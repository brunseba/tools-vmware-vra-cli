{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VMware vRA CLI","text":"<p>A powerful Python CLI tool to interact with VMware vRealize Automation 8 via REST API. This tool enables developers and system administrators to automate VM provisioning, management, and decommissioning tasks through a simple command-line interface.</p>"},{"location":"#features","title":"Features","text":"<p>Key Capabilities</p> <ul> <li>Authentication Management: Secure authentication with vRA 8 using bearer tokens</li> <li>Service Catalog Management: Access and request catalog items programmatically</li> <li>Deployment Lifecycle: Create, manage, and destroy deployments through the CLI</li> <li>Deployment Export: Export all deployments grouped by catalog item for backup, migration, and analytics</li> <li>Tag Management: Comprehensive tagging system for resource organization and governance</li> <li>Workflow Operations: Execute and monitor vRealize Orchestrator workflows</li> <li>Analytics &amp; Reporting: Generate usage reports, activity timelines, and unsynced deployment analysis</li> <li>Configuration Management: Flexible configuration options with environment variables and config files</li> <li>Rich Output: Beautiful terminal output with colors and progress indicators</li> <li>Secure Credential Storage: Integration with system keyring for secure credential management</li> <li>Batch Operations: Support for bulk operations for high-volume use cases</li> </ul>"},{"location":"#why-vmware-vra-cli","title":"Why VMware vRA CLI?","text":"<p>This tool was inspired by real-world use cases where development teams need to create and destroy 1000+ virtual machines per day. Instead of clicking through the vRA 8 self-service portal repeatedly, developers can now automate these tasks through a simple CLI interface.</p> <pre><code>graph LR\n    A[Developer] --&gt; B[vRA CLI]\n    B --&gt; C[vRA 8 API]\n    C --&gt; D[VMware Infrastructure]\n    D --&gt; E[Virtual Machines]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># Authenticate with vRA\nvra auth login --username admin --url https://vra.company.com\n\n# List available catalog items\nvra catalog list\n\n# Request a catalog item\nvra catalog request &lt;catalog-item-id&gt; --project &lt;project-id&gt; --name \"dev-vm-001\"\n\n# List deployments\nvra deployment list\n\n# Create and assign tags\nvra tag create \"environment\" --value \"development\" --description \"Dev environment\"\nvra tag assign &lt;deployment-id&gt; &lt;tag-id&gt;\n\n# Clean up\nvra deployment delete &lt;deployment-id&gt;\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#development-teams","title":"Development Teams","text":"<ul> <li>Rapid provisioning of development environments</li> <li>Automated testing infrastructure setup</li> <li>CI/CD pipeline integration</li> </ul>"},{"location":"#system-administrators","title":"System Administrators","text":"<ul> <li>Bulk VM operations</li> <li>Infrastructure automation</li> <li>Resource management and monitoring</li> </ul>"},{"location":"#devops-engineers","title":"DevOps Engineers","text":"<ul> <li>Infrastructure as Code implementation</li> <li>Automated deployment pipelines</li> <li>Environment standardization</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>flowchart TB\n    subgraph \"VMware vRA CLI\"\n        CLI[CLI Interface]\n        AUTH[Authentication Module]\n        API[API Client]\n        CONFIG[Configuration Manager]\n        CRED[Credential Manager]\n    end\n\n    subgraph \"VMware vRA 8\"\n        CSP[Cloud Services Platform]\n        CAT[Service Catalog]\n        DEP[Deployment Service]\n        RES[Resource Management]\n    end\n\n    CLI --&gt; AUTH\n    CLI --&gt; API\n    CLI --&gt; CONFIG\n    CLI --&gt; CRED\n\n    AUTH --&gt; CSP\n    API --&gt; CAT\n    API --&gt; DEP\n    API --&gt; RES\n\n    style CLI fill:#e3f2fd\n    style AUTH fill:#e8f5e8\n    style API fill:#fff3e0\n    style CONFIG fill:#f3e5f5\n    style CRED fill:#fce4ec</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Get up and running in minutes:</p> <ol> <li>Installation - Install the CLI tool</li> <li>Quick Start - Your first VM in 5 minutes</li> <li>Configuration - Configure for your environment</li> </ol>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: Comprehensive guides and API reference</li> <li>Issues: Report bugs on GitHub Issues</li> <li>Contributing: See our Contributing Guide</li> </ul> <p>Built with \u2764\ufe0f for VMware administrators and developers</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to VMware vRA CLI will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#090-2025-01-21","title":"[0.9.0] - 2025-01-21","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Deployment Export Functionality: New <code>deployment export-all</code> command for bulk deployment export</li> <li>Enhanced Deployment Management: Export multiple deployments in JSON, YAML, or CSV formats</li> <li>Flexible Export Options: </li> <li>Export by deployment names, tags, or all deployments</li> <li>Support for multiple output formats with configurable formatting</li> <li>Optional resource details inclusion for comprehensive export data</li> <li>Comprehensive Documentation Suite:</li> <li>Deployment Export Guide: Complete user guide for the new export-all command</li> <li>CLI Reference Guide: Full reference documentation for all commands and options</li> <li>Troubleshooting Guide: Comprehensive troubleshooting and diagnostic information</li> <li>Practical Examples Guide: Real-world automation scenarios and usage patterns</li> <li>Enhanced Navigation: Updated MkDocs configuration with improved documentation structure</li> <li>Export Filtering: Advanced deployment matching with name patterns and tag-based filtering</li> <li>Batch Operations: Support for exporting large numbers of deployments efficiently</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved CLI Help: Enhanced help text and documentation for all deployment commands</li> <li>Better Error Handling: More informative error messages for export operations</li> <li>Enhanced Service Catalog Documentation: Updated with export functionality integration</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Export Performance: Optimized deployment data retrieval for large-scale exports</li> <li>Output Formatting: Improved consistency across different export formats</li> <li>Documentation Links: Fixed cross-references between documentation sections</li> </ul>"},{"location":"changelog/#070-2025-01-21","title":"[0.7.0] - 2025-01-21","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Persistent Configuration Management: Complete configuration storage system</li> <li>ConfigManager Class: Handles persistent settings in <code>~/.vmware-vra-cli/config.json</code></li> <li>Configuration Commands:</li> <li><code>vra config show</code>: Display current configuration with source information</li> <li><code>vra config set</code>: Set individual configuration values</li> <li><code>vra config reset</code>: Reset configuration to defaults</li> <li><code>vra config edit</code>: Edit configuration file in default editor</li> <li>Automatic Parameter Storage: Login parameters (URL, tenant, domain) saved during authentication</li> <li>Environment Variable Override: Support for VRA_URL, VRA_TENANT, VRA_DOMAIN, etc.</li> <li>Enhanced Login Command: Now includes tenant parameter and saves all connection details</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved User Experience: No need to specify URL/tenant on every login</li> <li>Enhanced CLI Help: Better documentation for configuration management</li> <li>Configuration Persistence: Settings retained between CLI sessions</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Configuration Loss Issue: Login parameters now persist between sessions</li> <li>Parameter Redundancy: No more need to repeatedly specify connection details</li> </ul>"},{"location":"changelog/#060-2025-01-21","title":"[0.6.0] - 2025-01-21","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Proper two-step VMware vRA authentication procedure following official documentation</li> <li>VRAAuthenticator class implementing Identity Service API + IaaS API flow</li> <li>TokenManager class for secure token storage and management</li> <li>Domain support for multiple identity sources authentication</li> <li>Automatic access token refresh functionality (90-day refresh tokens, 8-hour access tokens)</li> <li>Enhanced authentication status command showing detailed token information</li> <li>Manual token refresh command for better token management</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Complete authentication system overhaul to follow VMware official standards</li> <li>Improved CLI authentication commands with better user experience</li> <li>Enhanced error handling and status reporting for authentication operations</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Implemented secure token lifecycle management</li> <li>Added automatic token renewal to minimize credential exposure</li> <li>Enhanced keyring integration for secure credential storage</li> </ul>"},{"location":"changelog/#050-2025-01-21","title":"[0.5.0] - 2025-01-21","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added --version option to CLI for better version management</li> <li>Cross-platform installation scripts for development tools</li> <li>Comprehensive GitHub workflow for multiarch wheel building and publishing</li> <li>Comprehensive tag management functionality</li> <li>Taskfile for task automation</li> <li>MIT license for open source distribution</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Refined GitHub workflow configuration for better reliability</li> <li>Updated README with correct repository URLs and tag management commands</li> <li>Removed Windows targets from workflow to reduce build complexity</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Improved CI/CD pipeline stability</li> </ul>"},{"location":"changelog/#040-2025-01-21","title":"[0.4.0] - 2025-01-21","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Initial release of VMware vRA CLI</li> <li>Service Catalog integration with vRealize Orchestrator API</li> <li>Authentication management with secure token storage</li> <li>Catalog item listing, viewing, and requesting</li> <li>Deployment management (list, show, delete, resources)</li> <li>Workflow operations (list, run, monitor)</li> <li>Multiple output formats (table, JSON, YAML)</li> <li>Configuration management with profiles</li> <li>Rich terminal output with colors and progress indicators</li> <li>Comprehensive documentation with MkDocs</li> <li>Support for environment variables and configuration files</li> <li>SSL/TLS configuration options</li> <li>Batch operations support</li> <li>Interactive and non-interactive modes</li> </ul>"},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>Secure credential storage using system keyring</li> <li>Bearer token authentication</li> <li>SSL certificate verification</li> <li>Environment variable support for CI/CD</li> </ul>"},{"location":"changelog/#010-2024-07-21","title":"[0.1.0] - 2024-07-21","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Initial project structure</li> <li>Basic CLI framework with Click</li> <li>Authentication commands</li> <li>Service Catalog API client</li> <li>Deployment operations</li> <li>Workflow execution capabilities</li> <li>Documentation structure</li> <li>Development tooling setup</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"changelog/#security_2","title":"Security","text":"<ul> <li>Implemented secure token storage</li> <li>Added SSL verification</li> </ul>"},{"location":"changelog/#contributing","title":"Contributing","text":"<p>When contributing to this project, please:</p> <ol> <li>Follow Conventional Commits for commit messages</li> <li>Update this changelog with your changes</li> <li>Include appropriate version bumps</li> <li>Add relevant documentation updates</li> </ol>"},{"location":"changelog/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types: - <code>feat</code>: A new feature - <code>fix</code>: A bug fix - <code>docs</code>: Documentation only changes - <code>style</code>: Changes that do not affect the meaning of the code - <code>refactor</code>: A code change that neither fixes a bug nor adds a feature - <code>perf</code>: A code change that improves performance - <code>test</code>: Adding missing tests or correcting existing tests - <code>chore</code>: Changes to the build process or auxiliary tools</p> <p>Examples: <pre><code>feat(catalog): add support for catalog item schema retrieval\n\nfix(auth): resolve token storage issue on macOS\n\ndocs(api): update authentication examples\n\nchore(deps): update pydantic to v2.5.0\n</code></pre></p>"},{"location":"references/","title":"References","text":"<p>This document contains references and resources related to the VMware vRA CLI project, including official documentation, APIs, and community resources.</p>"},{"location":"references/#official-vmwarebroadcom-resources","title":"Official VMware/Broadcom Resources","text":""},{"location":"references/#api-documentation","title":"API Documentation","text":"<ul> <li>Broadcom vRealize Orchestrator API</li> <li>Complete REST API reference for vRealize Orchestrator</li> <li>Workflow execution, management, and monitoring</li> <li>Tag management and resource operations</li> <li> <p>Authentication and security best practices</p> </li> <li> <p>VMware vRealize Automation 8.x API</p> </li> <li>Service Catalog APIs for catalog item management</li> <li>Deployment lifecycle management APIs</li> <li>Project and resource management endpoints</li> <li>Integration patterns and examples</li> </ul>"},{"location":"references/#documentation-centers","title":"Documentation Centers","text":"<ul> <li>VMware vRealize Automation Documentation</li> <li>Installation and configuration guides</li> <li>Administrator and user guides</li> <li>Troubleshooting and best practices</li> <li> <p>Release notes and compatibility matrices</p> </li> <li> <p>Broadcom Support Portal</p> </li> <li>Knowledge base articles</li> <li>Product downloads and patches</li> <li>Community forums and discussions</li> <li>Support case management</li> </ul>"},{"location":"references/#development-resources","title":"Development Resources","text":""},{"location":"references/#python-libraries-and-tools","title":"Python Libraries and Tools","text":"<ul> <li>Click Documentation</li> <li>Command-line interface creation toolkit</li> <li>Advanced features and patterns</li> <li> <p>Testing CLI applications</p> </li> <li> <p>Pydantic Documentation</p> </li> <li>Data validation and serialization</li> <li>Type hints and model validation</li> <li> <p>JSON schema generation</p> </li> <li> <p>Requests Documentation</p> </li> <li>HTTP library for API interactions</li> <li>Session management and authentication</li> <li> <p>Error handling and retries</p> </li> <li> <p>Rich Documentation</p> </li> <li>Terminal formatting and display</li> <li>Progress bars and status indicators</li> <li>Tables and syntax highlighting</li> </ul>"},{"location":"references/#testing-and-quality","title":"Testing and Quality","text":"<ul> <li>pytest Documentation</li> <li>Testing framework and fixtures</li> <li>Mocking and test organization</li> <li> <p>Coverage reporting</p> </li> <li> <p>pre-commit Documentation</p> </li> <li>Git hooks configuration</li> <li>Code quality automation</li> <li>Multi-language support</li> </ul>"},{"location":"references/#community-and-learning","title":"Community and Learning","text":""},{"location":"references/#vmware-community","title":"VMware Community","text":"<ul> <li>VMware {code} Community</li> <li>Developer forums and discussions</li> <li>Sample code and integrations</li> <li> <p>Technical blog posts and tutorials</p> </li> <li> <p>VMware Technology Network (VMTN)</p> </li> <li>Product-specific communities</li> <li>User groups and events</li> <li>Knowledge sharing and networking</li> </ul>"},{"location":"references/#learning-resources","title":"Learning Resources","text":"<ul> <li>VMware Learning Platform</li> <li>Official training courses</li> <li>Certification programs</li> <li> <p>Hands-on labs and workshops</p> </li> <li> <p>VMware vRealize Automation Learning Path</p> </li> <li>Product-specific training materials</li> <li>Exam preparation resources</li> <li>Best practice guides</li> </ul>"},{"location":"references/#standards-and-specifications","title":"Standards and Specifications","text":""},{"location":"references/#rest-api-standards","title":"REST API Standards","text":"<ul> <li>OpenAPI Specification</li> <li>API design and documentation standards</li> <li>Schema definitions and validation</li> <li> <p>Code generation tools</p> </li> <li> <p>JSON Schema</p> </li> <li>Data validation specifications</li> <li>Schema composition and referencing</li> <li>Validation tools and libraries</li> </ul>"},{"location":"references/#security-standards","title":"Security Standards","text":"<ul> <li>OAuth 2.0 Specification</li> <li>Authorization framework</li> <li>Token-based authentication</li> <li> <p>Security best practices</p> </li> <li> <p>OWASP API Security Top 10</p> </li> <li>Common API security vulnerabilities</li> <li>Prevention techniques and controls</li> <li>Security testing methodologies</li> </ul>"},{"location":"references/#tools-and-utilities","title":"Tools and Utilities","text":""},{"location":"references/#api-development-and-testing","title":"API Development and Testing","text":"<ul> <li>Postman</li> <li>API development and testing platform</li> <li>Collection sharing and collaboration</li> <li> <p>Automated testing and monitoring</p> </li> <li> <p>HTTPie</p> </li> <li>Command-line HTTP client</li> <li>Simple syntax for API testing</li> <li>JSON and authentication support</li> </ul>"},{"location":"references/#documentation-tools","title":"Documentation Tools","text":"<ul> <li>MkDocs Material Theme</li> <li>Material Design documentation theme</li> <li>Advanced features and customization</li> <li> <p>Plugin ecosystem and extensions</p> </li> <li> <p>Mermaid</p> </li> <li>Diagram and flowchart generation</li> <li>Markdown integration</li> <li>Various diagram types and styles</li> </ul>"},{"location":"references/#version-information","title":"Version Information","text":"<p>This CLI tool is designed to work with:</p> <ul> <li>VMware vRealize Automation: 8.x series</li> <li>VMware vRealize Orchestrator: 8.x series</li> <li>Python: 3.10+ (as per project requirements)</li> <li>API Versions: Latest stable releases</li> </ul>"},{"location":"references/#contributing-to-references","title":"Contributing to References","text":"<p>If you find additional resources that would benefit the community, please:</p> <ol> <li>Verify the resource is official and maintained</li> <li>Ensure it's relevant to VMware vRA CLI usage or development</li> <li>Submit a pull request with the new reference</li> <li>Include a brief description of the resource's value</li> </ol> <p>This references page is maintained to provide developers and users with comprehensive resources for working with VMware vRealize Automation and related technologies.</p>"},{"location":"architecture-design/","title":"Architecture and Design","text":"<p>This section provides comprehensive technical documentation for the VMware vRA CLI architecture, design decisions, and system components.</p>"},{"location":"architecture-design/#documentation-structure","title":"Documentation Structure","text":""},{"location":"architecture-design/#system-architecture","title":"System Architecture","text":"<ul> <li>Context Diagram - High-level system context and external dependencies</li> <li>Architecture Overview - Complete system architecture and design patterns</li> <li>Components Model - Detailed component breakdown and interactions</li> </ul>"},{"location":"architecture-design/#data-and-models","title":"Data and Models","text":"<ul> <li>Data Models - Data structures, schemas, and object models</li> </ul>"},{"location":"architecture-design/#requirements","title":"Requirements","text":"<ul> <li>Functional Requirements - System capabilities and features</li> <li>Non-Functional Requirements - Performance, scalability, and quality attributes</li> </ul>"},{"location":"architecture-design/#security-and-compliance","title":"Security and Compliance","text":"<ul> <li>Security and Compliance - Security architecture, threat model, and compliance considerations</li> </ul>"},{"location":"architecture-design/#overview","title":"Overview","text":"<p>The VMware vRA CLI is a comprehensive command-line interface tool designed to interact with VMware vRealize Automation environments. It provides a rich set of commands for managing service catalogs, deployments, workflows, and system configuration through a secure, authenticated API layer.</p>"},{"location":"architecture-design/#key-architectural-principles","title":"Key Architectural Principles","text":"<ol> <li>Modular Design: Separation of concerns with distinct modules for authentication, API clients, CLI commands, and configuration management</li> <li>Security First: Secure credential storage, token management, and SSL/TLS communication</li> <li>Extensibility: Plugin-based architecture allowing for easy addition of new commands and features</li> <li>User Experience: Rich terminal output, multiple output formats, and comprehensive error handling</li> <li>Cross-Platform: Compatible across Windows, macOS, and Linux environments</li> </ol>"},{"location":"architecture-design/#technology-stack","title":"Technology Stack","text":"<ul> <li>Language: Python 3.8+</li> <li>CLI Framework: Click</li> <li>HTTP Client: Requests with retry mechanisms</li> <li>Authentication: Custom VMware vRA authentication flow</li> <li>Configuration: JSON-based persistent configuration</li> <li>Security: System keyring integration</li> <li>Documentation: MkDocs with Material theme</li> <li>Testing: pytest with comprehensive test coverage</li> <li>Packaging: Python wheels with automated CI/CD</li> </ul>"},{"location":"architecture-design/#getting-started","title":"Getting Started","text":"<p>For implementation details and component specifications, explore the individual documentation sections listed above.</p>"},{"location":"architecture-design/architecture-overview/","title":"Architecture Overview","text":""},{"location":"architecture-design/architecture-overview/#system-architecture","title":"System Architecture","text":"<p>The VMware vRA CLI follows a layered architecture pattern with clear separation of concerns, promoting maintainability, testability, and extensibility.</p>"},{"location":"architecture-design/architecture-overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Presentation Layer\"\n        CLI[CLI Commands]\n        Output[Output Formatters]\n        Help[Help System]\n    end\n\n    subgraph \"Application Layer\"\n        Commands[Command Handlers]\n        Validation[Input Validation]\n        Orchestration[Business Logic]\n    end\n\n    subgraph \"Service Layer\"\n        CatalogSvc[Catalog Service]\n        DeploymentSvc[Deployment Service]\n        WorkflowSvc[Workflow Service]\n        AuthSvc[Authentication Service]\n        ConfigSvc[Configuration Service]\n    end\n\n    subgraph \"Integration Layer\"\n        APIClient[API Client]\n        TokenMgr[Token Manager]\n        ConfigMgr[Config Manager]\n        OutputMgr[Output Manager]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        HTTP[HTTP Client]\n        Keyring[Keyring Interface]\n        FileSystem[File System]\n        Logging[Logging System]\n    end\n\n    subgraph \"External Systems\"\n        vRA[VMware vRA APIs]\n        OS[Operating System]\n        Storage[Local Storage]\n    end\n\n    CLI --&gt; Commands\n    Output --&gt; Commands\n    Help --&gt; Commands\n\n    Commands --&gt; CatalogSvc\n    Commands --&gt; DeploymentSvc\n    Commands --&gt; WorkflowSvc\n    Commands --&gt; AuthSvc\n    Commands --&gt; ConfigSvc\n\n    CatalogSvc --&gt; APIClient\n    DeploymentSvc --&gt; APIClient\n    WorkflowSvc --&gt; APIClient\n    AuthSvc --&gt; TokenMgr\n    ConfigSvc --&gt; ConfigMgr\n\n    APIClient --&gt; HTTP\n    TokenMgr --&gt; Keyring\n    ConfigMgr --&gt; FileSystem\n    OutputMgr --&gt; Output\n\n    HTTP --&gt; vRA\n    Keyring --&gt; OS\n    FileSystem --&gt; Storage</code></pre>"},{"location":"architecture-design/architecture-overview/#architectural-patterns","title":"Architectural Patterns","text":""},{"location":"architecture-design/architecture-overview/#1-layered-architecture","title":"1. Layered Architecture","text":"<p>The system is organized into distinct layers, each with specific responsibilities:</p> <ul> <li>Presentation Layer: User interface and output formatting</li> <li>Application Layer: Command processing and business logic orchestration</li> <li>Service Layer: Domain-specific business services</li> <li>Integration Layer: External system integration and data management</li> <li>Infrastructure Layer: Low-level technical services</li> </ul>"},{"location":"architecture-design/architecture-overview/#2-command-pattern","title":"2. Command Pattern","text":"<p>CLI commands are implemented using the Command pattern:</p> <pre><code>class CommandBase:\n    \"\"\"Base class for all CLI commands\"\"\"\n\n    def execute(self, context: CommandContext) -&gt; CommandResult:\n        \"\"\"Execute the command with given context\"\"\"\n        pass\n\n    def validate(self, args: dict) -&gt; ValidationResult:\n        \"\"\"Validate command arguments\"\"\"\n        pass\n</code></pre>"},{"location":"architecture-design/architecture-overview/#3-factory-pattern","title":"3. Factory Pattern","text":"<p>Command factories create appropriate command instances:</p> <pre><code>class CommandFactory:\n    \"\"\"Factory for creating command instances\"\"\"\n\n    @staticmethod\n    def create_command(command_type: str) -&gt; CommandBase:\n        \"\"\"Create command instance based on type\"\"\"\n        return command_registry.get(command_type)()\n</code></pre>"},{"location":"architecture-design/architecture-overview/#4-strategy-pattern","title":"4. Strategy Pattern","text":"<p>Output formatting uses the Strategy pattern:</p> <pre><code>class OutputStrategy:\n    \"\"\"Base output formatting strategy\"\"\"\n\n    def format(self, data: dict) -&gt; str:\n        \"\"\"Format data according to strategy\"\"\"\n        pass\n\nclass JSONOutputStrategy(OutputStrategy):\n    \"\"\"JSON output formatting\"\"\"\n\nclass TableOutputStrategy(OutputStrategy):\n    \"\"\"Table output formatting\"\"\"\n\nclass YAMLOutputStrategy(OutputStrategy):\n    \"\"\"YAML output formatting\"\"\"\n</code></pre>"},{"location":"architecture-design/architecture-overview/#core-components","title":"Core Components","text":""},{"location":"architecture-design/architecture-overview/#1-cli-engine","title":"1. CLI Engine","text":"<ul> <li>Click Framework Integration: Leverages Click for command parsing and help generation</li> <li>Command Router: Routes commands to appropriate handlers</li> <li>Context Management: Manages execution context across command lifecycle</li> <li>Error Handling: Centralized error handling and user-friendly error messages</li> </ul>"},{"location":"architecture-design/architecture-overview/#2-authentication-system","title":"2. Authentication System","text":"<ul> <li>Two-Phase Authentication: Implements VMware vRA authentication flow</li> <li>Token Management: Secure token storage and automatic renewal</li> <li>Session Management: Handles authentication state across CLI sessions</li> <li>Credential Storage: Secure integration with system keyring</li> </ul>"},{"location":"architecture-design/architecture-overview/#3-api-client-layer","title":"3. API Client Layer","text":"<ul> <li>RESTful Communication: HTTP/HTTPS communication with vRA APIs</li> <li>Request/Response Handling: Standardized API request/response processing</li> <li>Error Handling: API-specific error handling and retry logic</li> <li>Rate Limiting: Built-in rate limiting and backoff strategies</li> </ul>"},{"location":"architecture-design/architecture-overview/#4-configuration-system","title":"4. Configuration System","text":"<ul> <li>Hierarchical Configuration: Environment variables &gt; CLI args &gt; config file &gt; defaults</li> <li>Profile Management: Support for multiple configuration profiles</li> <li>Persistent Storage: JSON-based configuration persistence</li> <li>Runtime Configuration: Dynamic configuration updates during execution</li> </ul>"},{"location":"architecture-design/architecture-overview/#5-output-system","title":"5. Output System","text":"<ul> <li>Multiple Formats: Support for JSON, YAML, CSV, and tabular output</li> <li>Rich Terminal Output: Colors, progress bars, and interactive elements</li> <li>Streaming Output: Support for large dataset streaming</li> <li>Template System: Custom output templates and formatting</li> </ul>"},{"location":"architecture-design/architecture-overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture-design/architecture-overview/#1-single-responsibility-principle","title":"1. Single Responsibility Principle","text":"<p>Each component has a single, well-defined responsibility: - Commands handle user input and orchestration - Services encapsulate business logic - Clients manage external communication - Managers handle specific cross-cutting concerns</p>"},{"location":"architecture-design/architecture-overview/#2-openclosed-principle","title":"2. Open/Closed Principle","text":"<p>The system is designed for extension without modification: - Plugin architecture for new commands - Strategy pattern for output formats - Factory pattern for component creation - Interface-based design for external integrations</p>"},{"location":"architecture-design/architecture-overview/#3-dependency-inversion","title":"3. Dependency Inversion","text":"<p>High-level modules depend on abstractions: - Service interfaces define contracts - Repository pattern for data access - Dependency injection for component wiring - Mock implementations for testing</p>"},{"location":"architecture-design/architecture-overview/#4-separation-of-concerns","title":"4. Separation of Concerns","text":"<p>Clear boundaries between different aspects: - Business logic separated from presentation - Configuration management isolated from business logic - Authentication separated from API operations - Error handling centralized and consistent</p>"},{"location":"architecture-design/architecture-overview/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"architecture-design/architecture-overview/#1-request-flow","title":"1. Request Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Command\n    participant Service\n    participant APIClient\n    participant vRA\n\n    User-&gt;&gt;CLI: Execute command\n    CLI-&gt;&gt;Command: Parse and validate\n    Command-&gt;&gt;Service: Business logic\n    Service-&gt;&gt;APIClient: API request\n    APIClient-&gt;&gt;vRA: HTTP request\n    vRA--&gt;&gt;APIClient: HTTP response\n    APIClient--&gt;&gt;Service: Processed response\n    Service--&gt;&gt;Command: Business result\n    Command--&gt;&gt;CLI: Formatted output\n    CLI--&gt;&gt;User: Display result</code></pre>"},{"location":"architecture-design/architecture-overview/#2-authentication-flow","title":"2. Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant CLI\n    participant AuthService\n    participant TokenManager\n    participant Keyring\n    participant vRA\n\n    CLI-&gt;&gt;AuthService: Login request\n    AuthService-&gt;&gt;vRA: Identity API call\n    vRA--&gt;&gt;AuthService: Identity token\n    AuthService-&gt;&gt;vRA: IaaS API call\n    vRA--&gt;&gt;AuthService: Access token\n    AuthService-&gt;&gt;TokenManager: Store tokens\n    TokenManager-&gt;&gt;Keyring: Secure storage\n    Keyring--&gt;&gt;TokenManager: Confirmation\n    TokenManager--&gt;&gt;AuthService: Success\n    AuthService--&gt;&gt;CLI: Login complete</code></pre>"},{"location":"architecture-design/architecture-overview/#3-configuration-flow","title":"3. Configuration Flow","text":"<pre><code>sequenceDiagram\n    participant CLI\n    participant ConfigService\n    participant ConfigManager\n    participant FileSystem\n    participant Environment\n\n    CLI-&gt;&gt;ConfigService: Get configuration\n    ConfigService-&gt;&gt;Environment: Check env vars\n    Environment--&gt;&gt;ConfigService: Env values\n    ConfigService-&gt;&gt;ConfigManager: Load config file\n    ConfigManager-&gt;&gt;FileSystem: Read config\n    FileSystem--&gt;&gt;ConfigManager: Config data\n    ConfigManager--&gt;&gt;ConfigService: Parsed config\n    ConfigService-&gt;&gt;ConfigService: Merge priorities\n    ConfigService--&gt;&gt;CLI: Final configuration</code></pre>"},{"location":"architecture-design/architecture-overview/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"architecture-design/architecture-overview/#1-error-categories","title":"1. Error Categories","text":"<ul> <li>User Errors: Invalid input, missing parameters</li> <li>Authentication Errors: Login failures, token expiration</li> <li>API Errors: Service unavailable, rate limiting</li> <li>System Errors: Network issues, file system problems</li> <li>Configuration Errors: Invalid settings, missing files</li> </ul>"},{"location":"architecture-design/architecture-overview/#2-error-handling-patterns","title":"2. Error Handling Patterns","text":"<pre><code>class ErrorHandler:\n    \"\"\"Centralized error handling\"\"\"\n\n    def handle_error(self, error: Exception, context: dict) -&gt; ErrorResponse:\n        \"\"\"Process error and return appropriate response\"\"\"\n        if isinstance(error, AuthenticationError):\n            return self._handle_auth_error(error, context)\n        elif isinstance(error, APIError):\n            return self._handle_api_error(error, context)\n        # ... other error types\n</code></pre>"},{"location":"architecture-design/architecture-overview/#3-recovery-strategies","title":"3. Recovery Strategies","text":"<ul> <li>Automatic Retry: Network timeouts, temporary service issues</li> <li>Token Refresh: Expired authentication tokens</li> <li>Fallback Options: Alternative API endpoints, cached data</li> <li>User Guidance: Helpful error messages with resolution steps</li> </ul>"},{"location":"architecture-design/architecture-overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture-design/architecture-overview/#1-caching-strategy","title":"1. Caching Strategy","text":"<ul> <li>Configuration Caching: Cache loaded configuration data</li> <li>API Response Caching: Cache frequently accessed data</li> <li>Token Caching: Cache valid authentication tokens</li> <li>Schema Caching: Cache API schema definitions</li> </ul>"},{"location":"architecture-design/architecture-overview/#2-async-operations","title":"2. Async Operations","text":"<ul> <li>Background Tasks: Long-running operations in background</li> <li>Progress Tracking: Real-time progress updates</li> <li>Cancellation Support: User-initiated operation cancellation</li> <li>Resource Management: Proper cleanup of resources</li> </ul>"},{"location":"architecture-design/architecture-overview/#3-memory-management","title":"3. Memory Management","text":"<ul> <li>Streaming Processing: Process large datasets incrementally</li> <li>Connection Pooling: Reuse HTTP connections</li> <li>Resource Cleanup: Explicit resource disposal</li> <li>Memory Monitoring: Track memory usage patterns</li> </ul>"},{"location":"architecture-design/architecture-overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture-design/architecture-overview/#1-authentication-security","title":"1. Authentication Security","text":"<ul> <li>Secure Token Storage: System keyring integration</li> <li>Token Encryption: Additional encryption layer</li> <li>Token Rotation: Automatic token renewal</li> <li>Session Management: Secure session handling</li> </ul>"},{"location":"architecture-design/architecture-overview/#2-communication-security","title":"2. Communication Security","text":"<ul> <li>TLS/HTTPS: Encrypted communication channels</li> <li>Certificate Validation: SSL certificate verification</li> <li>Request Signing: API request authentication</li> <li>Secure Headers: Security-focused HTTP headers</li> </ul>"},{"location":"architecture-design/architecture-overview/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>Credential Masking: Mask sensitive data in logs</li> <li>Secure Configuration: Encrypted configuration storage</li> <li>Memory Protection: Clear sensitive data from memory</li> <li>Audit Logging: Security event logging</li> </ul> <p>This architecture provides a solid foundation for the VMware vRA CLI, ensuring scalability, maintainability, and security while delivering excellent user experience.</p>"},{"location":"architecture-design/components-model/","title":"Components Model","text":""},{"location":"architecture-design/components-model/#component-overview","title":"Component Overview","text":"<p>The VMware vRA CLI is composed of several interconnected components, each with specific responsibilities and well-defined interfaces. This document details the component model, interfaces, and dependencies.</p>"},{"location":"architecture-design/components-model/#component-architecture","title":"Component Architecture","text":"<pre><code>graph TB\n    subgraph \"CLI Layer\"\n        MainCLI[Main CLI Entry Point]\n        CommandRouter[Command Router]\n        HelpSystem[Help System]\n    end\n\n    subgraph \"Command Components\"\n        AuthCmd[Authentication Commands]\n        ConfigCmd[Configuration Commands]\n        CatalogCmd[Catalog Commands]\n        DeploymentCmd[Deployment Commands]\n        WorkflowCmd[Workflow Commands]\n        TagCmd[Tag Commands]\n        ReportCmd[Report Commands]\n    end\n\n    subgraph \"Service Components\"\n        AuthService[Authentication Service]\n        ConfigService[Configuration Service]\n        CatalogService[Catalog Service]\n        DeploymentService[Deployment Service]\n        WorkflowService[Workflow Service]\n        TagService[Tag Service]\n        ReportService[Report Service]\n    end\n\n    subgraph \"Integration Components\"\n        APIClient[API Client]\n        TokenManager[Token Manager]\n        ConfigManager[Configuration Manager]\n        OutputManager[Output Manager]\n        ValidationManager[Validation Manager]\n    end\n\n    subgraph \"Infrastructure Components\"\n        HTTPClient[HTTP Client]\n        KeyringInterface[Keyring Interface]\n        FileSystemInterface[File System Interface]\n        LoggingSystem[Logging System]\n        ErrorHandler[Error Handler]\n    end\n\n    MainCLI --&gt; CommandRouter\n    CommandRouter --&gt; AuthCmd\n    CommandRouter --&gt; ConfigCmd\n    CommandRouter --&gt; CatalogCmd\n    CommandRouter --&gt; DeploymentCmd\n    CommandRouter --&gt; WorkflowCmd\n    CommandRouter --&gt; TagCmd\n    CommandRouter --&gt; ReportCmd\n\n    AuthCmd --&gt; AuthService\n    ConfigCmd --&gt; ConfigService\n    CatalogCmd --&gt; CatalogService\n    DeploymentCmd --&gt; DeploymentService\n    WorkflowCmd --&gt; WorkflowService\n    TagCmd --&gt; TagService\n    ReportCmd --&gt; ReportService\n\n    AuthService --&gt; APIClient\n    AuthService --&gt; TokenManager\n    ConfigService --&gt; ConfigManager\n    CatalogService --&gt; APIClient\n    DeploymentService --&gt; APIClient\n    WorkflowService --&gt; APIClient\n    TagService --&gt; APIClient\n    ReportService --&gt; APIClient\n\n    APIClient --&gt; HTTPClient\n    TokenManager --&gt; KeyringInterface\n    ConfigManager --&gt; FileSystemInterface\n    OutputManager --&gt; FileSystemInterface\n    ValidationManager --&gt; ErrorHandler\n\n    HTTPClient --&gt; LoggingSystem\n    KeyringInterface --&gt; LoggingSystem\n    FileSystemInterface --&gt; LoggingSystem\n    ErrorHandler --&gt; LoggingSystem</code></pre>"},{"location":"architecture-design/components-model/#core-components","title":"Core Components","text":""},{"location":"architecture-design/components-model/#1-cli-layer-components","title":"1. CLI Layer Components","text":""},{"location":"architecture-design/components-model/#main-cli-entry-point","title":"Main CLI Entry Point","text":"<p>Responsibility: Application bootstrap and initialization</p> <pre><code>class MainCLI:\n    \"\"\"Main CLI application entry point\"\"\"\n\n    def __init__(self):\n        self.config_manager = ConfigManager()\n        self.command_router = CommandRouter()\n        self.error_handler = ErrorHandler()\n\n    def run(self, args: List[str]) -&gt; int:\n        \"\"\"Execute CLI with provided arguments\"\"\"\n        pass\n\n    def initialize_application(self) -&gt; None:\n        \"\"\"Initialize application components\"\"\"\n        pass\n</code></pre> <p>Dependencies: - ConfigManager - CommandRouter - ErrorHandler - LoggingSystem</p>"},{"location":"architecture-design/components-model/#command-router","title":"Command Router","text":"<p>Responsibility: Route commands to appropriate handlers</p> <pre><code>class CommandRouter:\n    \"\"\"Routes CLI commands to appropriate handlers\"\"\"\n\n    def __init__(self):\n        self.command_registry = {}\n        self.validation_manager = ValidationManager()\n\n    def register_command(self, name: str, command_class: Type[CommandBase]) -&gt; None:\n        \"\"\"Register a command with the router\"\"\"\n        pass\n\n    def route_command(self, command_name: str, args: dict) -&gt; CommandResult:\n        \"\"\"Route command to appropriate handler\"\"\"\n        pass\n</code></pre> <p>Dependencies: - Command classes - ValidationManager - ErrorHandler</p>"},{"location":"architecture-design/components-model/#2-command-components","title":"2. Command Components","text":""},{"location":"architecture-design/components-model/#authentication-commands","title":"Authentication Commands","text":"<p>Responsibility: Handle authentication-related CLI operations</p> <pre><code>class AuthenticationCommands:\n    \"\"\"Authentication command handlers\"\"\"\n\n    def __init__(self, auth_service: AuthService):\n        self.auth_service = auth_service\n\n    def login(self, url: str, username: str, password: str, tenant: str, domain: str) -&gt; CommandResult:\n        \"\"\"Handle login command\"\"\"\n        pass\n\n    def logout(self) -&gt; CommandResult:\n        \"\"\"Handle logout command\"\"\"\n        pass\n\n    def status(self) -&gt; CommandResult:\n        \"\"\"Handle authentication status command\"\"\"\n        pass\n\n    def refresh(self) -&gt; CommandResult:\n        \"\"\"Handle token refresh command\"\"\"\n        pass\n</code></pre> <p>Dependencies: - AuthService - OutputManager - ValidationManager</p>"},{"location":"architecture-design/components-model/#deployment-commands","title":"Deployment Commands","text":"<p>Responsibility: Handle deployment management operations</p> <pre><code>class DeploymentCommands:\n    \"\"\"Deployment command handlers\"\"\"\n\n    def __init__(self, deployment_service: DeploymentService):\n        self.deployment_service = deployment_service\n        self.output_manager = OutputManager()\n\n    def list_deployments(self, filters: dict) -&gt; CommandResult:\n        \"\"\"List deployments with optional filtering\"\"\"\n        pass\n\n    def show_deployment(self, deployment_id: str) -&gt; CommandResult:\n        \"\"\"Show detailed deployment information\"\"\"\n        pass\n\n    def export_all(self, names: List[str], tags: List[str], output_format: str) -&gt; CommandResult:\n        \"\"\"Export multiple deployments\"\"\"\n        pass\n\n    def delete_deployment(self, deployment_id: str) -&gt; CommandResult:\n        \"\"\"Delete a deployment\"\"\"\n        pass\n</code></pre> <p>Dependencies: - DeploymentService - OutputManager - ValidationManager</p>"},{"location":"architecture-design/components-model/#3-service-components","title":"3. Service Components","text":""},{"location":"architecture-design/components-model/#authentication-service","title":"Authentication Service","text":"<p>Responsibility: Manage authentication flows and token lifecycle</p> <pre><code>class AuthService:\n    \"\"\"Authentication service for VMware vRA\"\"\"\n\n    def __init__(self, api_client: APIClient, token_manager: TokenManager):\n        self.api_client = api_client\n        self.token_manager = token_manager\n        self.authenticator = VRAAuthenticator()\n\n    def authenticate(self, credentials: AuthCredentials) -&gt; AuthResult:\n        \"\"\"Perform two-phase authentication\"\"\"\n        pass\n\n    def refresh_token(self) -&gt; TokenResult:\n        \"\"\"Refresh expired access token\"\"\"\n        pass\n\n    def logout(self) -&gt; bool:\n        \"\"\"Clear authentication state\"\"\"\n        pass\n\n    def get_auth_status(self) -&gt; AuthStatus:\n        \"\"\"Get current authentication status\"\"\"\n        pass\n</code></pre> <p>Dependencies: - APIClient - TokenManager - VRAAuthenticator</p>"},{"location":"architecture-design/components-model/#deployment-service","title":"Deployment Service","text":"<p>Responsibility: Manage deployment operations and data processing</p> <pre><code>class DeploymentService:\n    \"\"\"Deployment management service\"\"\"\n\n    def __init__(self, api_client: APIClient):\n        self.api_client = api_client\n        self.deployment_processor = DeploymentProcessor()\n\n    def get_deployments(self, filters: DeploymentFilters) -&gt; List[Deployment]:\n        \"\"\"Retrieve deployments with filtering\"\"\"\n        pass\n\n    def get_deployment_details(self, deployment_id: str) -&gt; DeploymentDetails:\n        \"\"\"Get detailed deployment information\"\"\"\n        pass\n\n    def export_deployments(self, criteria: ExportCriteria) -&gt; ExportResult:\n        \"\"\"Export deployments based on criteria\"\"\"\n        pass\n\n    def delete_deployment(self, deployment_id: str) -&gt; bool:\n        \"\"\"Delete deployment\"\"\"\n        pass\n</code></pre> <p>Dependencies: - APIClient - DeploymentProcessor - DataValidator</p>"},{"location":"architecture-design/components-model/#4-integration-components","title":"4. Integration Components","text":""},{"location":"architecture-design/components-model/#api-client","title":"API Client","text":"<p>Responsibility: Handle HTTP communication with VMware vRA APIs</p> <pre><code>class APIClient:\n    \"\"\"VMware vRA API client\"\"\"\n\n    def __init__(self, http_client: HTTPClient, token_manager: TokenManager):\n        self.http_client = http_client\n        self.token_manager = token_manager\n        self.rate_limiter = RateLimiter()\n\n    def get(self, endpoint: str, params: dict = None) -&gt; APIResponse:\n        \"\"\"Execute GET request\"\"\"\n        pass\n\n    def post(self, endpoint: str, data: dict = None) -&gt; APIResponse:\n        \"\"\"Execute POST request\"\"\"\n        pass\n\n    def put(self, endpoint: str, data: dict = None) -&gt; APIResponse:\n        \"\"\"Execute PUT request\"\"\"\n        pass\n\n    def delete(self, endpoint: str) -&gt; APIResponse:\n        \"\"\"Execute DELETE request\"\"\"\n        pass\n</code></pre> <p>Dependencies: - HTTPClient - TokenManager - RateLimiter - RequestValidator</p>"},{"location":"architecture-design/components-model/#token-manager","title":"Token Manager","text":"<p>Responsibility: Secure token storage and lifecycle management</p> <pre><code>class TokenManager:\n    \"\"\"Secure token management\"\"\"\n\n    def __init__(self, keyring_interface: KeyringInterface):\n        self.keyring = keyring_interface\n        self.token_cache = {}\n\n    def store_tokens(self, tokens: TokenSet) -&gt; bool:\n        \"\"\"Store tokens securely\"\"\"\n        pass\n\n    def get_access_token(self) -&gt; Optional[str]:\n        \"\"\"Retrieve valid access token\"\"\"\n        pass\n\n    def get_refresh_token(self) -&gt; Optional[str]:\n        \"\"\"Retrieve refresh token\"\"\"\n        pass\n\n    def clear_tokens(self) -&gt; bool:\n        \"\"\"Clear all stored tokens\"\"\"\n        pass\n\n    def is_token_valid(self, token: str) -&gt; bool:\n        \"\"\"Check token validity\"\"\"\n        pass\n</code></pre> <p>Dependencies: - KeyringInterface - TokenValidator - EncryptionService</p>"},{"location":"architecture-design/components-model/#configuration-manager","title":"Configuration Manager","text":"<p>Responsibility: Manage application configuration and profiles</p> <pre><code>class ConfigManager:\n    \"\"\"Configuration management\"\"\"\n\n    def __init__(self, file_system: FileSystemInterface):\n        self.file_system = file_system\n        self.config_cache = {}\n        self.config_validator = ConfigValidator()\n\n    def load_configuration(self, profile: str = None) -&gt; Configuration:\n        \"\"\"Load configuration with profile support\"\"\"\n        pass\n\n    def save_configuration(self, config: Configuration, profile: str = None) -&gt; bool:\n        \"\"\"Save configuration to file\"\"\"\n        pass\n\n    def merge_configurations(self, *configs: Configuration) -&gt; Configuration:\n        \"\"\"Merge multiple configuration sources\"\"\"\n        pass\n\n    def validate_configuration(self, config: Configuration) -&gt; ValidationResult:\n        \"\"\"Validate configuration settings\"\"\"\n        pass\n</code></pre> <p>Dependencies: - FileSystemInterface - ConfigValidator - EnvironmentReader</p>"},{"location":"architecture-design/components-model/#5-infrastructure-components","title":"5. Infrastructure Components","text":""},{"location":"architecture-design/components-model/#http-client","title":"HTTP Client","text":"<p>Responsibility: Low-level HTTP communication and connection management</p> <pre><code>class HTTPClient:\n    \"\"\"HTTP client with advanced features\"\"\"\n\n    def __init__(self):\n        self.session = requests.Session()\n        self.retry_strategy = RetryStrategy()\n        self.connection_pool = ConnectionPool()\n\n    def request(self, method: str, url: str, **kwargs) -&gt; HTTPResponse:\n        \"\"\"Execute HTTP request with retry logic\"\"\"\n        pass\n\n    def configure_ssl(self, ssl_config: SSLConfig) -&gt; None:\n        \"\"\"Configure SSL/TLS settings\"\"\"\n        pass\n\n    def set_timeout(self, timeout: int) -&gt; None:\n        \"\"\"Set request timeout\"\"\"\n        pass\n</code></pre> <p>Dependencies: - RetryStrategy - ConnectionPool - SSLValidator</p>"},{"location":"architecture-design/components-model/#keyring-interface","title":"Keyring Interface","text":"<p>Responsibility: Cross-platform secure credential storage</p> <pre><code>class KeyringInterface:\n    \"\"\"Cross-platform keyring abstraction\"\"\"\n\n    def __init__(self):\n        self.keyring_backend = self._detect_keyring_backend()\n\n    def store_credential(self, service: str, username: str, password: str) -&gt; bool:\n        \"\"\"Store credential securely\"\"\"\n        pass\n\n    def get_credential(self, service: str, username: str) -&gt; Optional[str]:\n        \"\"\"Retrieve stored credential\"\"\"\n        pass\n\n    def delete_credential(self, service: str, username: str) -&gt; bool:\n        \"\"\"Delete stored credential\"\"\"\n        pass\n\n    def _detect_keyring_backend(self) -&gt; KeyringBackend:\n        \"\"\"Detect appropriate keyring backend\"\"\"\n        pass\n</code></pre> <p>Dependencies: - Platform-specific keyring backends - CredentialValidator</p>"},{"location":"architecture-design/components-model/#component-interfaces","title":"Component Interfaces","text":""},{"location":"architecture-design/components-model/#base-interfaces","title":"Base Interfaces","text":""},{"location":"architecture-design/components-model/#commandbase-interface","title":"CommandBase Interface","text":"<pre><code>class CommandBase(ABC):\n    \"\"\"Base interface for all commands\"\"\"\n\n    @abstractmethod\n    def execute(self, context: CommandContext) -&gt; CommandResult:\n        \"\"\"Execute command with given context\"\"\"\n        pass\n\n    @abstractmethod\n    def validate(self, args: dict) -&gt; ValidationResult:\n        \"\"\"Validate command arguments\"\"\"\n        pass\n\n    @abstractmethod\n    def get_help(self) -&gt; str:\n        \"\"\"Get command help text\"\"\"\n        pass\n</code></pre>"},{"location":"architecture-design/components-model/#servicebase-interface","title":"ServiceBase Interface","text":"<pre><code>class ServiceBase(ABC):\n    \"\"\"Base interface for all services\"\"\"\n\n    @abstractmethod\n    def initialize(self) -&gt; bool:\n        \"\"\"Initialize service\"\"\"\n        pass\n\n    @abstractmethod\n    def cleanup(self) -&gt; None:\n        \"\"\"Cleanup service resources\"\"\"\n        pass\n\n    @abstractmethod\n    def health_check(self) -&gt; HealthStatus:\n        \"\"\"Check service health\"\"\"\n        pass\n</code></pre>"},{"location":"architecture-design/components-model/#outputformatter-interface","title":"OutputFormatter Interface","text":"<pre><code>class OutputFormatter(ABC):\n    \"\"\"Interface for output formatting strategies\"\"\"\n\n    @abstractmethod\n    def format(self, data: Any, options: FormatOptions) -&gt; str:\n        \"\"\"Format data according to strategy\"\"\"\n        pass\n\n    @abstractmethod\n    def supports_streaming(self) -&gt; bool:\n        \"\"\"Check if formatter supports streaming output\"\"\"\n        pass\n</code></pre>"},{"location":"architecture-design/components-model/#dependency-graph","title":"Dependency Graph","text":"<pre><code>graph LR\n    subgraph \"External Dependencies\"\n        Click[Click Framework]\n        Requests[Requests Library]\n        Keyring[Python Keyring]\n        Rich[Rich Terminal]\n        Pydantic[Pydantic Validation]\n    end\n\n    subgraph \"Core Dependencies\"\n        MainCLI --&gt; Click\n        HTTPClient --&gt; Requests\n        KeyringInterface --&gt; Keyring\n        OutputManager --&gt; Rich\n        ValidationManager --&gt; Pydantic\n    end\n\n    subgraph \"Internal Dependencies\"\n        Commands --&gt; Services\n        Services --&gt; Integration\n        Integration --&gt; Infrastructure\n        Infrastructure --&gt; External\n    end</code></pre>"},{"location":"architecture-design/components-model/#component-lifecycle","title":"Component Lifecycle","text":""},{"location":"architecture-design/components-model/#1-initialization-phase","title":"1. Initialization Phase","text":"<pre><code>def initialize_application():\n    \"\"\"Initialize application components in dependency order\"\"\"\n\n    # 1. Infrastructure components\n    logging_system = LoggingSystem()\n    error_handler = ErrorHandler(logging_system)\n\n    # 2. Integration components\n    file_system = FileSystemInterface()\n    keyring = KeyringInterface()\n    http_client = HTTPClient()\n\n    # 3. Manager components\n    config_manager = ConfigManager(file_system)\n    token_manager = TokenManager(keyring)\n\n    # 4. Service components\n    api_client = APIClient(http_client, token_manager)\n    auth_service = AuthService(api_client, token_manager)\n\n    # 5. Command components\n    command_router = CommandRouter()\n    command_router.register_commands()\n\n    # 6. CLI application\n    main_cli = MainCLI(command_router, config_manager, error_handler)\n\n    return main_cli\n</code></pre>"},{"location":"architecture-design/components-model/#2-execution-phase","title":"2. Execution Phase","text":"<pre><code>def execute_command(command_name: str, args: dict):\n    \"\"\"Execute command with proper lifecycle management\"\"\"\n\n    try:\n        # Validate inputs\n        validation_result = validate_command(command_name, args)\n\n        # Route to appropriate handler\n        command = command_router.get_command(command_name)\n\n        # Execute with context\n        context = CommandContext(args, config, auth_state)\n        result = command.execute(context)\n\n        # Format and display output\n        formatted_output = output_manager.format(result)\n        display_output(formatted_output)\n\n    except Exception as e:\n        error_handler.handle_error(e, context)\n</code></pre>"},{"location":"architecture-design/components-model/#3-cleanup-phase","title":"3. Cleanup Phase","text":"<pre><code>def cleanup_application():\n    \"\"\"Cleanup application components\"\"\"\n\n    # Clear sensitive data\n    token_manager.clear_cache()\n\n    # Close connections\n    http_client.close_connections()\n\n    # Flush logs\n    logging_system.flush()\n\n    # Release resources\n    resource_manager.release_all()\n</code></pre> <p>This component model provides a clear structure for understanding the VMware vRA CLI architecture, component responsibilities, and their interactions within the system.</p>"},{"location":"architecture-design/context-diagram/","title":"Context Diagram","text":""},{"location":"architecture-design/context-diagram/#system-context-overview","title":"System Context Overview","text":"<p>The VMware vRA CLI operates within a complex enterprise environment, interacting with multiple external systems and serving various user personas. This context diagram illustrates the high-level relationships and boundaries of the system.</p>"},{"location":"architecture-design/context-diagram/#external-actors-and-systems","title":"External Actors and Systems","text":""},{"location":"architecture-design/context-diagram/#primary-actors","title":"Primary Actors","text":""},{"location":"architecture-design/context-diagram/#1-end-users","title":"1. End Users","text":"<ul> <li>DevOps Engineers: Automate infrastructure provisioning and management</li> <li>System Administrators: Manage vRA environments and deployments  </li> <li>Cloud Engineers: Orchestrate multi-cloud deployments</li> <li>Developers: Integrate CLI into CI/CD pipelines and automation scripts</li> </ul>"},{"location":"architecture-design/context-diagram/#2-vmware-vrealize-automation-platform","title":"2. VMware vRealize Automation Platform","text":"<ul> <li>Identity Service API: Authentication and authorization services</li> <li>IaaS API: Infrastructure as a Service management</li> <li>Service Catalog API: Blueprint and catalog item management</li> <li>Orchestrator API: Workflow execution and management</li> </ul>"},{"location":"architecture-design/context-diagram/#3-external-systems-integration","title":"3. External Systems Integration","text":"<ul> <li>CI/CD Platforms: Jenkins, GitLab CI, GitHub Actions, Azure DevOps</li> <li>Configuration Management: Ansible, Puppet, Chef</li> <li>Monitoring Systems: VMware vRealize Operations, third-party monitoring</li> <li>Identity Providers: Active Directory, LDAP, SAML providers</li> </ul>"},{"location":"architecture-design/context-diagram/#supporting-systems","title":"Supporting Systems","text":""},{"location":"architecture-design/context-diagram/#4-local-system-resources","title":"4. Local System Resources","text":"<ul> <li>Operating System: Windows, macOS, Linux</li> <li>System Keyring: Secure credential storage (Windows Credential Manager, macOS Keychain, Linux Secret Service)</li> <li>File System: Configuration files, logs, temporary data</li> <li>Network Stack: HTTPS/TLS communications</li> </ul>"},{"location":"architecture-design/context-diagram/#5-development-and-distribution","title":"5. Development and Distribution","text":"<ul> <li>Package Repositories: PyPI for Python package distribution</li> <li>Version Control: Git repositories for source code</li> <li>Documentation Hosting: MkDocs sites, GitHub Pages</li> </ul>"},{"location":"architecture-design/context-diagram/#system-boundaries","title":"System Boundaries","text":"<pre><code>graph TB\n    %% External Actors\n    DevOps[DevOps Engineers]\n    SysAdmin[System Administrators]\n    CloudEng[Cloud Engineers]\n    Developers[Developers]\n\n    %% CLI System (Main System Boundary)\n    subgraph \"VMware vRA CLI System\"\n        CLI[vRA CLI Application]\n        Config[Configuration Manager]\n        Auth[Authentication Layer]\n        API[API Client Layer]\n        Output[Output Formatters]\n    end\n\n    %% External Systems\n    subgraph \"VMware vRA Platform\"\n        Identity[Identity Service API]\n        IaaS[IaaS API]\n        Catalog[Service Catalog API]\n        Orchestrator[Orchestrator API]\n    end\n\n    subgraph \"Local System\"\n        Keyring[System Keyring]\n        FileSystem[File System]\n        OS[Operating System]\n    end\n\n    subgraph \"External Integration\"\n        CICD[CI/CD Platforms]\n        ConfigMgmt[Configuration Management]\n        Monitoring[Monitoring Systems]\n        IdP[Identity Providers]\n    end\n\n    %% Relationships\n    DevOps --&gt; CLI\n    SysAdmin --&gt; CLI\n    CloudEng --&gt; CLI\n    Developers --&gt; CLI\n\n    CLI --&gt; Identity\n    CLI --&gt; IaaS\n    CLI --&gt; Catalog\n    CLI --&gt; Orchestrator\n\n    CLI --&gt; Keyring\n    CLI --&gt; FileSystem\n    CLI --&gt; OS\n\n    CLI --&gt; CICD\n    CLI --&gt; ConfigMgmt\n    CLI --&gt; Monitoring\n\n    Identity --&gt; IdP</code></pre>"},{"location":"architecture-design/context-diagram/#context-boundaries","title":"Context Boundaries","text":""},{"location":"architecture-design/context-diagram/#1-primary-system-boundary","title":"1. Primary System Boundary","text":"<p>The VMware vRA CLI System encompasses: - Command-line interface application - Configuration management subsystem - Authentication and authorization components - API communication layer - Output formatting and display logic</p>"},{"location":"architecture-design/context-diagram/#2-external-service-boundary","title":"2. External Service Boundary","text":"<p>VMware vRealize Automation Platform provides: - Identity and access management services - Infrastructure provisioning APIs - Service catalog and blueprint management - Workflow orchestration capabilities</p>"},{"location":"architecture-design/context-diagram/#3-local-system-boundary","title":"3. Local System Boundary","text":"<p>Local Operating Environment includes: - Secure credential storage mechanisms - File system access for configuration and logs - Network connectivity for API communications - Process execution environment</p>"},{"location":"architecture-design/context-diagram/#4-integration-boundary","title":"4. Integration Boundary","text":"<p>External Integration Points support: - Automation pipeline integration - Configuration management tool connectivity - Monitoring and observability integration - Enterprise identity provider connectivity</p>"},{"location":"architecture-design/context-diagram/#data-flows","title":"Data Flows","text":""},{"location":"architecture-design/context-diagram/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>User initiates login through CLI</li> <li>CLI communicates with vRA Identity Service</li> <li>Credentials validated against Identity Provider</li> <li>Tokens stored securely in system keyring</li> <li>Subsequent API calls use stored tokens</li> </ol>"},{"location":"architecture-design/context-diagram/#api-operations-flow","title":"API Operations Flow","text":"<ol> <li>User executes CLI command</li> <li>CLI retrieves stored authentication tokens</li> <li>API request constructed and sent to vRA platform</li> <li>Response processed and formatted</li> <li>Results displayed to user in requested format</li> </ol>"},{"location":"architecture-design/context-diagram/#configuration-management-flow","title":"Configuration Management Flow","text":"<ol> <li>CLI reads configuration from local file system</li> <li>Environment variables override file-based settings</li> <li>Command-line parameters override all other sources</li> <li>Configuration changes persisted to local storage</li> </ol>"},{"location":"architecture-design/context-diagram/#security-boundaries","title":"Security Boundaries","text":""},{"location":"architecture-design/context-diagram/#trust-boundaries","title":"Trust Boundaries","text":"<ul> <li>User to CLI: Local system trust</li> <li>CLI to vRA Platform: Authenticated HTTPS/TLS</li> <li>CLI to System Keyring: OS-mediated secure storage</li> <li>CLI to File System: Standard OS file permissions</li> </ul>"},{"location":"architecture-design/context-diagram/#security-zones","title":"Security Zones","text":"<ul> <li>User Zone: Terminal/shell environment</li> <li>Application Zone: CLI process space</li> <li>Local System Zone: OS-protected storage</li> <li>Network Zone: Encrypted network communications</li> <li>Remote Zone: VMware vRA platform services</li> </ul>"},{"location":"architecture-design/context-diagram/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture-design/context-diagram/#1-command-line-integration","title":"1. Command-Line Integration","text":"<ul> <li>Direct terminal execution</li> <li>Shell scripting integration</li> <li>Process automation workflows</li> </ul>"},{"location":"architecture-design/context-diagram/#2-pipeline-integration","title":"2. Pipeline Integration","text":"<ul> <li>CI/CD step execution</li> <li>Automated deployment workflows</li> <li>Infrastructure as Code integration</li> </ul>"},{"location":"architecture-design/context-diagram/#3-api-integration","title":"3. API Integration","text":"<ul> <li>RESTful API communication</li> <li>Token-based authentication</li> <li>JSON/YAML data exchange</li> </ul>"},{"location":"architecture-design/context-diagram/#4-configuration-integration","title":"4. Configuration Integration","text":"<ul> <li>Environment variable configuration</li> <li>Configuration file management</li> <li>Profile-based settings</li> </ul> <p>This context diagram establishes the system boundaries and external relationships that inform the detailed architecture and component design decisions documented in the following sections.</p>"},{"location":"architecture-design/data-models/","title":"Data Models","text":""},{"location":"architecture-design/data-models/#overview","title":"Overview","text":"<p>This document defines the data models, schemas, and object structures used throughout the VMware vRA CLI application. These models ensure type safety, data validation, and consistent API interactions.</p>"},{"location":"architecture-design/data-models/#data-model-schema-diagrams","title":"Data Model Schema Diagrams","text":""},{"location":"architecture-design/data-models/#core-entity-relationship-diagram","title":"Core Entity Relationship Diagram","text":"<pre><code>erDiagram\n    User {\n        string username\n        string password\n        string tenant\n        string domain\n    }\n\n    AuthCredentials {\n        string username\n        string password\n        string url\n        string tenant\n        string domain\n    }\n\n    TokenSet {\n        string access_token\n        string refresh_token\n        string token_type\n        int expires_in\n        string scope\n    }\n\n    Configuration {\n        string url\n        string tenant\n        string domain\n        string output_format\n        bool ssl_verify\n        int timeout\n        int max_retries\n        string log_level\n        string profile\n    }\n\n    Deployment {\n        string id\n        string name\n        string description\n        string status\n        string project_id\n        string project_name\n        string blueprint_id\n        string blueprint_name\n        string created_by\n        datetime created_at\n        datetime updated_at\n        datetime lease_expire_at\n        dict inputs\n    }\n\n    DeploymentResource {\n        string id\n        string name\n        string type\n        string status\n        string deployment_id\n        dict properties\n    }\n\n    Tag {\n        string key\n        string value\n    }\n\n    TaggedResource {\n        string resource_id\n        string resource_type\n    }\n\n    CatalogItem {\n        string id\n        string name\n        string description\n        string type\n        string status\n        string version\n        dict form\n        dict schema\n        string created_by\n        datetime created_at\n        datetime updated_at\n    }\n\n    CatalogRequest {\n        string catalog_item_id\n        string project_id\n        string reason\n        dict inputs\n    }\n\n    WorkflowExecution {\n        string id\n        string workflow_id\n        string name\n        string status\n        datetime start_time\n        datetime end_time\n        dict inputs\n        dict outputs\n        string error_message\n    }\n\n    WorkflowDefinition {\n        string id\n        string name\n        string description\n        string version\n        list input_parameters\n        list output_parameters\n    }\n\n    User ||--|| AuthCredentials : authenticates_with\n    AuthCredentials ||--|| TokenSet : generates\n    User ||--|| Configuration : has_profile\n    Deployment ||--o{ DeploymentResource : contains\n    TaggedResource ||--o{ Tag : has_tags\n    Deployment ||--|| TaggedResource : can_be_tagged\n    CatalogItem ||--|| TaggedResource : can_be_tagged\n    DeploymentResource ||--|| TaggedResource : can_be_tagged\n    CatalogItem ||--o{ CatalogRequest : requested_as\n    CatalogRequest ||--|| Deployment : creates\n    WorkflowDefinition ||--o{ WorkflowExecution : executes_as</code></pre>"},{"location":"architecture-design/data-models/#authentication-flow-schema","title":"Authentication Flow Schema","text":"<pre><code>flowchart TD\n    A[AuthCredentials] --&gt; B[Identity Token Request]\n    B --&gt; C[Identity Token Response]\n    C --&gt; D[Access Token Request]\n    D --&gt; E[TokenSet]\n    E --&gt; F[System Keyring Storage]\n\n    G[Token Refresh] --&gt; H{Token Valid?}\n    H --&gt;|Yes| I[Continue Operation]\n    H --&gt;|No| J[Refresh Token Request]\n    J --&gt; K[New Access Token]\n    K --&gt; L[Update TokenSet]\n    L --&gt; F\n\n    M[Logout] --&gt; N[Clear TokenSet]\n    N --&gt; O[Remove from Keyring]\n\n    style E fill:#e1f5fe\n    style F fill:#f3e5f5\n    style A fill:#fff3e0</code></pre>"},{"location":"architecture-design/data-models/#deployment-lifecycle-schema","title":"Deployment Lifecycle Schema","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; CatalogRequest\n    CatalogRequest --&gt; CREATE_IN_PROGRESS\n    CREATE_IN_PROGRESS --&gt; CREATE_SUCCESSFUL\n    CREATE_IN_PROGRESS --&gt; CREATE_FAILED\n    CREATE_SUCCESSFUL --&gt; UPDATE_IN_PROGRESS\n    CREATE_SUCCESSFUL --&gt; DELETE_IN_PROGRESS\n    UPDATE_IN_PROGRESS --&gt; UPDATE_SUCCESSFUL\n    UPDATE_IN_PROGRESS --&gt; UPDATE_FAILED\n    UPDATE_SUCCESSFUL --&gt; DELETE_IN_PROGRESS\n    UPDATE_FAILED --&gt; DELETE_IN_PROGRESS\n    DELETE_IN_PROGRESS --&gt; DELETE_SUCCESSFUL\n    DELETE_IN_PROGRESS --&gt; DELETE_FAILED\n    CREATE_FAILED --&gt; [*]\n    DELETE_SUCCESSFUL --&gt; [*]\n    DELETE_FAILED --&gt; [*]\n\n    CREATE_SUCCESSFUL : Resources Created\n    UPDATE_SUCCESSFUL : Resources Modified\n    DELETE_SUCCESSFUL : Resources Removed\n    CREATE_FAILED : Creation Error\n    UPDATE_FAILED : Update Error\n    DELETE_FAILED : Deletion Error</code></pre>"},{"location":"architecture-design/data-models/#data-validation-hierarchy","title":"Data Validation Hierarchy","text":"<pre><code>classDiagram\n    class BaseModel {\n        &lt;&lt;abstract&gt;&gt;\n        +validate()\n        +to_dict()\n        +from_dict()\n    }\n\n    class AuthCredentials {\n        +username: str\n        +password: str\n        +url: str\n        +tenant: str\n        +domain: str\n        +__post_init__()\n    }\n\n    class TokenSet {\n        +access_token: str\n        +refresh_token: str\n        +token_type: str\n        +expires_in: int\n        +scope: str\n        +expires_at: datetime\n        +is_expired: bool\n    }\n\n    class Configuration {\n        +url: str\n        +tenant: str\n        +domain: str\n        +output_format: str\n        +ssl_verify: bool\n        +timeout: int\n        +max_retries: int\n        +log_level: str\n        +profile: str\n        +merge(other)\n        +from_dict(data)\n    }\n\n    class Deployment {\n        +id: str\n        +name: str\n        +description: str\n        +status: str\n        +project_id: str\n        +created_at: datetime\n        +is_expired: bool\n        +days_until_expiry: int\n    }\n\n    class Tag {\n        +key: str\n        +value: str\n        +__str__()\n        +from_string(tag_string)\n    }\n\n    class TaggedResource {\n        +resource_id: str\n        +resource_type: str\n        +tags: List~Tag~\n        +add_tag(tag)\n        +remove_tag(key, value)\n        +has_tag(key, value)\n    }\n\n    BaseModel &lt;|-- AuthCredentials\n    BaseModel &lt;|-- TokenSet\n    BaseModel &lt;|-- Configuration\n    BaseModel &lt;|-- Deployment\n    BaseModel &lt;|-- Tag\n    BaseModel &lt;|-- TaggedResource\n\n    TaggedResource \"1\" --&gt; \"*\" Tag : contains</code></pre>"},{"location":"architecture-design/data-models/#core-data-models","title":"Core Data Models","text":""},{"location":"architecture-design/data-models/#1-authentication-models","title":"1. Authentication Models","text":""},{"location":"architecture-design/data-models/#authcredentials","title":"AuthCredentials","text":"<pre><code>@dataclass\nclass AuthCredentials:\n    \"\"\"User authentication credentials\"\"\"\n    username: str\n    password: str\n    url: str\n    tenant: str\n    domain: str = \"vsphere.local\"\n\n    def __post_init__(self):\n        \"\"\"Validate credentials after initialization\"\"\"\n        if not all([self.username, self.password, self.url, self.tenant]):\n            raise ValueError(\"All credential fields are required\")\n</code></pre>"},{"location":"architecture-design/data-models/#tokenset","title":"TokenSet","text":"<pre><code>@dataclass\nclass TokenSet:\n    \"\"\"Authentication token set\"\"\"\n    access_token: str\n    refresh_token: str\n    token_type: str = \"Bearer\"\n    expires_in: int = 28800  # 8 hours\n    scope: Optional[str] = None\n\n    @property\n    def expires_at(self) -&gt; datetime:\n        \"\"\"Calculate token expiration time\"\"\"\n        return datetime.utcnow() + timedelta(seconds=self.expires_in)\n\n    @property\n    def is_expired(self) -&gt; bool:\n        \"\"\"Check if token is expired\"\"\"\n        return datetime.utcnow() &gt; self.expires_at\n</code></pre>"},{"location":"architecture-design/data-models/#authstatus","title":"AuthStatus","text":"<pre><code>@dataclass\nclass AuthStatus:\n    \"\"\"Current authentication status\"\"\"\n    is_authenticated: bool\n    username: Optional[str] = None\n    tenant: Optional[str] = None\n    domain: Optional[str] = None\n    expires_at: Optional[datetime] = None\n    token_valid: bool = False\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert to dictionary for output\"\"\"\n        return asdict(self)\n</code></pre>"},{"location":"architecture-design/data-models/#2-configuration-models","title":"2. Configuration Models","text":""},{"location":"architecture-design/data-models/#configuration","title":"Configuration","text":"<pre><code>@dataclass\nclass Configuration:\n    \"\"\"Application configuration\"\"\"\n    url: Optional[str] = None\n    tenant: Optional[str] = None\n    domain: str = \"vsphere.local\"\n    output_format: str = \"table\"\n    ssl_verify: bool = True\n    timeout: int = 30\n    max_retries: int = 3\n    log_level: str = \"INFO\"\n    profile: str = \"default\"\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'Configuration':\n        \"\"\"Create configuration from dictionary\"\"\"\n        return cls(**{k: v for k, v in data.items() if k in cls.__annotations__})\n\n    def merge(self, other: 'Configuration') -&gt; 'Configuration':\n        \"\"\"Merge with another configuration, preferring non-None values\"\"\"\n        merged_data = asdict(self)\n        for key, value in asdict(other).items():\n            if value is not None:\n                merged_data[key] = value\n        return Configuration.from_dict(merged_data)\n</code></pre>"},{"location":"architecture-design/data-models/#configprofile","title":"ConfigProfile","text":"<pre><code>@dataclass\nclass ConfigProfile:\n    \"\"\"Named configuration profile\"\"\"\n    name: str\n    config: Configuration\n    description: Optional[str] = None\n    created_at: datetime = field(default_factory=datetime.utcnow)\n    updated_at: datetime = field(default_factory=datetime.utcnow)\n\n    def update_config(self, updates: Dict[str, Any]) -&gt; None:\n        \"\"\"Update configuration with new values\"\"\"\n        for key, value in updates.items():\n            if hasattr(self.config, key):\n                setattr(self.config, key, value)\n        self.updated_at = datetime.utcnow()\n</code></pre>"},{"location":"architecture-design/data-models/#3-catalog-models","title":"3. Catalog Models","text":""},{"location":"architecture-design/data-models/#catalogitem","title":"CatalogItem","text":"<pre><code>@dataclass\nclass CatalogItem:\n    \"\"\"Service catalog item\"\"\"\n    id: str\n    name: str\n    description: Optional[str] = None\n    type: str = \"Blueprint\"\n    status: str = \"RELEASED\"\n    version: str = \"1.0\"\n    form: Optional[Dict[str, Any]] = None\n    schema: Optional[Dict[str, Any]] = None\n    created_by: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n\n    @property\n    def is_requestable(self) -&gt; bool:\n        \"\"\"Check if item can be requested\"\"\"\n        return self.status == \"RELEASED\"\n</code></pre>"},{"location":"architecture-design/data-models/#catalogrequest","title":"CatalogRequest","text":"<pre><code>@dataclass\nclass CatalogRequest:\n    \"\"\"Request for catalog item\"\"\"\n    catalog_item_id: str\n    project_id: str\n    reason: str\n    inputs: Dict[str, Any] = field(default_factory=dict)\n\n    def add_input(self, key: str, value: Any) -&gt; None:\n        \"\"\"Add input parameter\"\"\"\n        self.inputs[key] = value\n\n    def validate_inputs(self, schema: Dict[str, Any]) -&gt; bool:\n        \"\"\"Validate inputs against schema\"\"\"\n        # Implementation for schema validation\n        return True\n</code></pre>"},{"location":"architecture-design/data-models/#4-deployment-models","title":"4. Deployment Models","text":""},{"location":"architecture-design/data-models/#deployment","title":"Deployment","text":"<pre><code>@dataclass\nclass Deployment:\n    \"\"\"VMware vRA deployment\"\"\"\n    id: str\n    name: str\n    description: Optional[str] = None\n    status: str = \"CREATE_SUCCESSFUL\"\n    project_id: str = \"\"\n    project_name: Optional[str] = None\n    blueprint_id: Optional[str] = None\n    blueprint_name: Optional[str] = None\n    created_by: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n    lease_expire_at: Optional[datetime] = None\n    inputs: Dict[str, Any] = field(default_factory=dict)\n\n    @property\n    def is_expired(self) -&gt; bool:\n        \"\"\"Check if deployment lease is expired\"\"\"\n        return (self.lease_expire_at and \n                datetime.utcnow() &gt; self.lease_expire_at)\n\n    @property\n    def days_until_expiry(self) -&gt; Optional[int]:\n        \"\"\"Days until deployment expires\"\"\"\n        if not self.lease_expire_at:\n            return None\n        delta = self.lease_expire_at - datetime.utcnow()\n        return max(0, delta.days)\n</code></pre>"},{"location":"architecture-design/data-models/#deploymentresource","title":"DeploymentResource","text":"<pre><code>@dataclass\nclass DeploymentResource:\n    \"\"\"Resource within a deployment\"\"\"\n    id: str\n    name: str\n    type: str\n    status: str\n    deployment_id: str\n    properties: Dict[str, Any] = field(default_factory=dict)\n\n    @property\n    def is_vm(self) -&gt; bool:\n        \"\"\"Check if resource is a virtual machine\"\"\"\n        return self.type.lower() in [\"cloud.machine\", \"virtualmachine\"]\n\n    @property\n    def ip_address(self) -&gt; Optional[str]:\n        \"\"\"Get IP address if available\"\"\"\n        return self.properties.get(\"address\") or self.properties.get(\"networks\", [{}])[0].get(\"address\")\n</code></pre>"},{"location":"architecture-design/data-models/#deploymentfilters","title":"DeploymentFilters","text":"<pre><code>@dataclass\nclass DeploymentFilters:\n    \"\"\"Filters for deployment queries\"\"\"\n    names: Optional[List[str]] = None\n    tags: Optional[List[str]] = None\n    status: Optional[List[str]] = None\n    project_ids: Optional[List[str]] = None\n    created_after: Optional[datetime] = None\n    created_before: Optional[datetime] = None\n    expires_before: Optional[datetime] = None\n\n    def to_api_params(self) -&gt; Dict[str, str]:\n        \"\"\"Convert to API query parameters\"\"\"\n        params = {}\n        if self.names:\n            params['names'] = ','.join(self.names)\n        if self.status:\n            params['status'] = ','.join(self.status)\n        if self.project_ids:\n            params['projects'] = ','.join(self.project_ids)\n        return params\n</code></pre>"},{"location":"architecture-design/data-models/#5-tag-models","title":"5. Tag Models","text":""},{"location":"architecture-design/data-models/#tag","title":"Tag","text":"<pre><code>@dataclass\nclass Tag:\n    \"\"\"Resource tag\"\"\"\n    key: str\n    value: str\n\n    def __str__(self) -&gt; str:\n        return f\"{self.key}:{self.value}\"\n\n    @classmethod\n    def from_string(cls, tag_string: str) -&gt; 'Tag':\n        \"\"\"Parse tag from string format 'key:value'\"\"\"\n        if ':' not in tag_string:\n            raise ValueError(f\"Invalid tag format: {tag_string}\")\n        key, value = tag_string.split(':', 1)\n        return cls(key=key.strip(), value=value.strip())\n</code></pre>"},{"location":"architecture-design/data-models/#taggedresource","title":"TaggedResource","text":"<pre><code>@dataclass\nclass TaggedResource:\n    \"\"\"Resource with associated tags\"\"\"\n    resource_id: str\n    resource_type: str\n    tags: List[Tag] = field(default_factory=list)\n\n    def add_tag(self, tag: Tag) -&gt; None:\n        \"\"\"Add a tag to the resource\"\"\"\n        if tag not in self.tags:\n            self.tags.append(tag)\n\n    def remove_tag(self, key: str, value: str = None) -&gt; bool:\n        \"\"\"Remove tag(s) by key and optionally value\"\"\"\n        removed = False\n        self.tags = [tag for tag in self.tags \n                    if not (tag.key == key and (value is None or tag.value == value))]\n        return removed\n\n    def has_tag(self, key: str, value: str = None) -&gt; bool:\n        \"\"\"Check if resource has specified tag\"\"\"\n        return any(tag.key == key and (value is None or tag.value == value) \n                  for tag in self.tags)\n</code></pre>"},{"location":"architecture-design/data-models/#6-workflow-models","title":"6. Workflow Models","text":""},{"location":"architecture-design/data-models/#workflowexecution","title":"WorkflowExecution","text":"<pre><code>@dataclass\nclass WorkflowExecution:\n    \"\"\"Workflow execution instance\"\"\"\n    id: str\n    workflow_id: str\n    name: str\n    status: str = \"RUNNING\"\n    start_time: Optional[datetime] = None\n    end_time: Optional[datetime] = None\n    inputs: Dict[str, Any] = field(default_factory=dict)\n    outputs: Dict[str, Any] = field(default_factory=dict)\n    error_message: Optional[str] = None\n\n    @property\n    def is_completed(self) -&gt; bool:\n        \"\"\"Check if workflow execution is completed\"\"\"\n        return self.status in [\"COMPLETED\", \"FAILED\", \"CANCELED\"]\n\n    @property\n    def duration(self) -&gt; Optional[timedelta]:\n        \"\"\"Calculate execution duration\"\"\"\n        if self.start_time and self.end_time:\n            return self.end_time - self.start_time\n        return None\n</code></pre>"},{"location":"architecture-design/data-models/#workflowdefinition","title":"WorkflowDefinition","text":"<pre><code>@dataclass\nclass WorkflowDefinition:\n    \"\"\"Workflow definition\"\"\"\n    id: str\n    name: str\n    description: Optional[str] = None\n    version: str = \"1.0.0\"\n    input_parameters: List[Dict[str, Any]] = field(default_factory=list)\n    output_parameters: List[Dict[str, Any]] = field(default_factory=list)\n\n    def get_input_parameter(self, name: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Get input parameter definition by name\"\"\"\n        return next((param for param in self.input_parameters if param.get('name') == name), None)\n</code></pre>"},{"location":"architecture-design/data-models/#7-api-response-models","title":"7. API Response Models","text":""},{"location":"architecture-design/data-models/#apiresponse","title":"APIResponse","text":"<pre><code>@dataclass\nclass APIResponse:\n    \"\"\"Generic API response wrapper\"\"\"\n    status_code: int\n    data: Any = None\n    error: Optional[str] = None\n    headers: Dict[str, str] = field(default_factory=dict)\n\n    @property\n    def is_success(self) -&gt; bool:\n        \"\"\"Check if response indicates success\"\"\"\n        return 200 &lt;= self.status_code &lt; 300\n\n    @property\n    def is_error(self) -&gt; bool:\n        \"\"\"Check if response indicates error\"\"\"\n        return self.status_code &gt;= 400\n</code></pre>"},{"location":"architecture-design/data-models/#paginatedresponse","title":"PaginatedResponse","text":"<pre><code>@dataclass\nclass PaginatedResponse:\n    \"\"\"Paginated API response\"\"\"\n    content: List[Any] = field(default_factory=list)\n    total_elements: int = 0\n    total_pages: int = 0\n    page: int = 0\n    size: int = 20\n\n    @property\n    def has_more_pages(self) -&gt; bool:\n        \"\"\"Check if more pages are available\"\"\"\n        return self.page &lt; self.total_pages - 1\n\n    def get_next_page_number(self) -&gt; Optional[int]:\n        \"\"\"Get next page number if available\"\"\"\n        return self.page + 1 if self.has_more_pages else None\n</code></pre>"},{"location":"architecture-design/data-models/#8-export-models","title":"8. Export Models","text":""},{"location":"architecture-design/data-models/#exportcriteria","title":"ExportCriteria","text":"<pre><code>@dataclass\nclass ExportCriteria:\n    \"\"\"Criteria for export operations\"\"\"\n    names: Optional[List[str]] = None\n    tags: Optional[List[str]] = None\n    include_resources: bool = False\n    output_format: str = \"json\"\n    output_file: Optional[str] = None\n\n    def matches_deployment(self, deployment: Deployment, tagged_resource: TaggedResource) -&gt; bool:\n        \"\"\"Check if deployment matches export criteria\"\"\"\n        # Name matching\n        if self.names:\n            if not any(name.lower() in deployment.name.lower() for name in self.names):\n                return False\n\n        # Tag matching\n        if self.tags:\n            deployment_tags = [str(tag) for tag in tagged_resource.tags]\n            if not any(tag in deployment_tags for tag in self.tags):\n                return False\n\n        return True\n</code></pre>"},{"location":"architecture-design/data-models/#exportresult","title":"ExportResult","text":"<pre><code>@dataclass\nclass ExportResult:\n    \"\"\"Result of export operation\"\"\"\n    total_deployments: int\n    exported_deployments: int\n    skipped_deployments: int\n    export_file: Optional[str] = None\n    errors: List[str] = field(default_factory=list)\n\n    @property\n    def success_rate(self) -&gt; float:\n        \"\"\"Calculate success rate percentage\"\"\"\n        if self.total_deployments == 0:\n            return 100.0\n        return (self.exported_deployments / self.total_deployments) * 100\n</code></pre>"},{"location":"architecture-design/data-models/#data-validation","title":"Data Validation","text":""},{"location":"architecture-design/data-models/#pydantic-models","title":"Pydantic Models","text":"<p>For advanced validation, the CLI uses Pydantic models:</p> <pre><code>from pydantic import BaseModel, validator, Field\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass DeploymentModel(BaseModel):\n    \"\"\"Pydantic model for deployment validation\"\"\"\n    id: str = Field(..., min_length=1)\n    name: str = Field(..., min_length=1, max_length=255)\n    status: str = Field(..., regex=r'^[A-Z_]+$')\n    project_id: str = Field(..., min_length=1)\n    created_at: Optional[datetime] = None\n\n    @validator('name')\n    def validate_name(cls, v):\n        \"\"\"Validate deployment name\"\"\"\n        if not v or v.isspace():\n            raise ValueError('Deployment name cannot be empty')\n        return v.strip()\n\n    @validator('status')\n    def validate_status(cls, v):\n        \"\"\"Validate deployment status\"\"\"\n        valid_statuses = ['CREATE_SUCCESSFUL', 'CREATE_FAILED', 'UPDATE_SUCCESSFUL', 'DELETE_SUCCESSFUL']\n        if v not in valid_statuses:\n            raise ValueError(f'Invalid status: {v}')\n        return v\n</code></pre>"},{"location":"architecture-design/data-models/#schema-definitions","title":"Schema Definitions","text":""},{"location":"architecture-design/data-models/#json-schemas","title":"JSON Schemas","text":""},{"location":"architecture-design/data-models/#deployment-schema","title":"Deployment Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"title\": \"Deployment\",\n  \"required\": [\"id\", \"name\", \"status\", \"project_id\"],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255\n    },\n    \"description\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"CREATE_SUCCESSFUL\", \"CREATE_FAILED\", \"UPDATE_SUCCESSFUL\", \"DELETE_SUCCESSFUL\"]\n    },\n    \"project_id\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"created_at\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"inputs\": {\n      \"type\": \"object\"\n    }\n  }\n}\n</code></pre>"},{"location":"architecture-design/data-models/#configuration-schema","title":"Configuration Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"title\": \"Configuration\",\n  \"properties\": {\n    \"url\": {\n      \"type\": [\"string\", \"null\"],\n      \"format\": \"uri\"\n    },\n    \"tenant\": {\n      \"type\": [\"string\", \"null\"],\n      \"minLength\": 1\n    },\n    \"domain\": {\n      \"type\": \"string\",\n      \"default\": \"vsphere.local\"\n    },\n    \"output_format\": {\n      \"type\": \"string\",\n      \"enum\": [\"table\", \"json\", \"yaml\", \"csv\"],\n      \"default\": \"table\"\n    },\n    \"ssl_verify\": {\n      \"type\": \"boolean\",\n      \"default\": true\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 300,\n      \"default\": 30\n    }\n  }\n}\n</code></pre>"},{"location":"architecture-design/data-models/#data-transformation","title":"Data Transformation","text":""},{"location":"architecture-design/data-models/#model-converters","title":"Model Converters","text":"<pre><code>class ModelConverter:\n    \"\"\"Convert between different model representations\"\"\"\n\n    @staticmethod\n    def deployment_to_dict(deployment: Deployment) -&gt; Dict[str, Any]:\n        \"\"\"Convert deployment model to dictionary\"\"\"\n        result = asdict(deployment)\n        # Convert datetime objects to ISO strings\n        for key, value in result.items():\n            if isinstance(value, datetime):\n                result[key] = value.isoformat() if value else None\n        return result\n\n    @staticmethod\n    def dict_to_deployment(data: Dict[str, Any]) -&gt; Deployment:\n        \"\"\"Convert dictionary to deployment model\"\"\"\n        # Convert ISO strings to datetime objects\n        datetime_fields = ['created_at', 'updated_at', 'lease_expire_at']\n        for field in datetime_fields:\n            if field in data and data[field]:\n                data[field] = datetime.fromisoformat(data[field].replace('Z', '+00:00'))\n        return Deployment(**data)\n</code></pre>"},{"location":"architecture-design/data-models/#serialization","title":"Serialization","text":"<pre><code>class DataSerializer:\n    \"\"\"Serialize data models to various formats\"\"\"\n\n    def to_json(self, data: Any, indent: int = 2) -&gt; str:\n        \"\"\"Serialize to JSON\"\"\"\n        return json.dumps(data, indent=indent, default=self._json_serializer)\n\n    def to_yaml(self, data: Any) -&gt; str:\n        \"\"\"Serialize to YAML\"\"\"\n        return yaml.dump(data, default_flow_style=False, default=self._yaml_serializer)\n\n    def to_csv(self, data: List[Dict[str, Any]], fieldnames: List[str] = None) -&gt; str:\n        \"\"\"Serialize to CSV\"\"\"\n        if not data:\n            return \"\"\n\n        output = io.StringIO()\n        fieldnames = fieldnames or list(data[0].keys())\n        writer = csv.DictWriter(output, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n        return output.getvalue()\n\n    def _json_serializer(self, obj: Any) -&gt; Any:\n        \"\"\"JSON serialization helper\"\"\"\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        elif isinstance(obj, (Deployment, Tag, CatalogItem)):\n            return asdict(obj)\n        raise TypeError(f\"Object of type {type(obj)} is not JSON serializable\")\n\n    def _yaml_serializer(self, dumper, data):\n        \"\"\"YAML serialization helper\"\"\"\n        if isinstance(data, datetime):\n            return dumper.represent_scalar('tag:yaml.org,2002:timestamp', data.isoformat())\n        return dumper.represent_data(data)\n</code></pre> <p>This comprehensive data model documentation ensures type safety, validation, and consistent data handling throughout the VMware vRA CLI application.</p>"},{"location":"architecture-design/functional-requirements/","title":"Functional Requirements","text":""},{"location":"architecture-design/functional-requirements/#overview","title":"Overview","text":"<p>This document outlines the functional requirements of the VMware vRA CLI, detailing the system capabilities and expected behavior. These requirements form the foundation for system specifications and testing criteria.</p>"},{"location":"architecture-design/functional-requirements/#core-functional-requirements","title":"Core Functional Requirements","text":""},{"location":"architecture-design/functional-requirements/#1-authentication-management","title":"1. Authentication Management","text":"<ul> <li>FR-001: Support two-phase authentication using vRA Identity and IaaS APIs</li> <li>FR-002: Store authentication tokens securely in the system keyring</li> <li>FR-003: Enable automatic token refresh prior to expiration</li> <li>FR-004: Provide explicit login, logout, and validation commands</li> <li>FR-005: Support multiple identity providers (LDAP, SAML)</li> </ul>"},{"location":"architecture-design/functional-requirements/#2-configuration-management","title":"2. Configuration Management","text":"<ul> <li>FR-006: Persist user configuration in a JSON-based file</li> <li>FR-007: Allow configuration to be overridden by environment variables and CLI arguments</li> <li>FR-008: Provide commands to view, edit, save, and delete configuration profiles</li> <li>FR-009: Support configuration validation and error reporting</li> <li>FR-010: Enable configuration import/export for backup and sharing</li> </ul>"},{"location":"architecture-design/functional-requirements/#3-service-catalog-management","title":"3. Service Catalog Management","text":"<ul> <li>FR-011: List available catalog items with filtering by name, type, and status</li> <li>FR-012: Retrieve detailed information for individual catalog items</li> <li>FR-013: Submit catalog item requests with input validation</li> <li>FR-014: Track catalog request status and outcomes</li> <li>FR-015: Support catalog versioning and release management</li> </ul>"},{"location":"architecture-design/functional-requirements/#4-deployment-management","title":"4. Deployment Management","text":"<ul> <li>FR-016: Create, list, show, export, and delete deployments</li> <li>FR-017: Support filtering and pagination for deployment listings</li> <li>FR-018: Provide detailed deployment status and logs</li> <li>FR-019: Allow export of deployment details in JSON, YAML, and CSV formats</li> <li>FR-020: Enable bulk operations on multiple deployments</li> </ul>"},{"location":"architecture-design/functional-requirements/#5-workflow-management","title":"5. Workflow Management","text":"<ul> <li>FR-021: List available workflows with search and filter capabilities</li> <li>FR-022: Execute workflows with input parameter validation</li> <li>FR-023: Monitor workflow execution and provide detailed logs</li> <li>FR-024: Allow cancellation and termination of workflow execution</li> <li>FR-025: Support workflow scheduling and recurrence</li> </ul>"},{"location":"architecture-design/functional-requirements/#6-tag-management","title":"6. Tag Management","text":"<ul> <li>FR-026: Add, remove, list, and search resource tags</li> <li>FR-027: Enforce tag key uniqueness within a resource</li> <li>FR-028: Support bulk tagging operations</li> <li>FR-029: Enable tagging of catalog items, deployments, and resources</li> <li>FR-030: Provide commands for tag-based filtering and queries</li> </ul>"},{"location":"architecture-design/functional-requirements/#7-reporting-and-analytics","title":"7. Reporting and Analytics","text":"<ul> <li>FR-031: Generate reports for activities, usage, and resource allocation</li> <li>FR-032: Provide exportable reports in CSV and PDF formats</li> <li>FR-033: Support scheduled and on-demand report generation</li> </ul>"},{"location":"architecture-design/functional-requirements/#8-cli-experience","title":"8. CLI Experience","text":"<ul> <li>FR-034: Provide comprehensive help documentation for all commands</li> <li>FR-035: Support interactive and non-interactive modes</li> <li>FR-036: Implement command completion and suggestions</li> <li>FR-037: Provide structured and colored terminal output</li> <li>FR-038: Offer multiple output formats (table, JSON, YAML)</li> </ul>"},{"location":"architecture-design/functional-requirements/#supporting-functional-requirements","title":"Supporting Functional Requirements","text":""},{"location":"architecture-design/functional-requirements/#1-error-handling","title":"1. Error Handling","text":"<ul> <li>FR-039: Display user-friendly error messages and resolution suggestions</li> <li>FR-040: Log detailed error information for debugging purposes</li> <li>FR-041: Handle API rate limiting gracefully with retry logic</li> <li>FR-042: Provide global error handling mechanisms for uncaught exceptions</li> </ul>"},{"location":"architecture-design/functional-requirements/#2-security-and-compliance","title":"2. Security and Compliance","text":"<ul> <li>FR-043: Ensure data encryption during transmission</li> <li>FR-044: Adhere to secure coding practices and perform regular security audits</li> <li>FR-045: Enable auditing and logging of all access and data operations</li> </ul>"},{"location":"architecture-design/functional-requirements/#validation-and-testing","title":"Validation and Testing","text":"<p>Functional requirements will be verified through a combination of automated testing, manual testing, and user acceptance testing to ensure all scenarios are covered and the system behaves as expected.</p>"},{"location":"architecture-design/non-functional-requirements/","title":"Non-Functional Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#overview","title":"Overview","text":"<p>This document defines the non-functional requirements (NFRs) for the VMware vRA CLI, including performance, scalability, security, usability, maintainability, and other quality attributes that the system must satisfy.</p>"},{"location":"architecture-design/non-functional-requirements/#performance-requirements","title":"Performance Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#response-time","title":"Response Time","text":"<ul> <li>NFR-001: CLI commands must respond within 2 seconds for simple operations (authentication status, configuration display)</li> <li>NFR-002: API-dependent operations must complete within 10 seconds under normal conditions</li> <li>NFR-003: Bulk operations (export, delete multiple deployments) must provide progress indicators for operations exceeding 30 seconds</li> <li>NFR-004: File I/O operations (configuration, export) must complete within 5 seconds for files up to 10MB</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#throughput","title":"Throughput","text":"<ul> <li>NFR-005: Support concurrent execution of up to 10 parallel API requests without degradation</li> <li>NFR-006: Handle export operations for up to 1000 deployments within 5 minutes</li> <li>NFR-007: Process bulk tag operations for up to 500 resources within 2 minutes</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#resource-utilization","title":"Resource Utilization","text":"<ul> <li>NFR-008: Memory usage must not exceed 512MB during normal operations</li> <li>NFR-009: Peak memory usage must not exceed 1GB during large bulk operations</li> <li>NFR-010: CPU usage must remain below 25% during idle state</li> <li>NFR-011: Disk space usage for logs and cache must not exceed 100MB</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#scalability-requirements","title":"Scalability Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#data-volume","title":"Data Volume","text":"<ul> <li>NFR-012: Support environments with up to 10,000 deployments</li> <li>NFR-013: Handle catalog with up to 1,000 available items</li> <li>NFR-014: Support up to 100 concurrent workflow executions</li> <li>NFR-015: Manage up to 50,000 resource tags across all deployments</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#user-load","title":"User Load","text":"<ul> <li>NFR-016: Support multiple CLI instances per user without conflict</li> <li>NFR-017: Handle shared configuration scenarios in team environments</li> <li>NFR-018: Support concurrent access to the same vRA environment by multiple users</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#availability-requirements","title":"Availability Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#uptime","title":"Uptime","text":"<ul> <li>NFR-019: CLI must be available for operation 99.9% of the time</li> <li>NFR-020: Graceful handling of vRA API unavailability with appropriate error messages</li> <li>NFR-021: Offline mode capability for configuration management and help documentation</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#recovery","title":"Recovery","text":"<ul> <li>NFR-022: Automatic recovery from transient network failures within 30 seconds</li> <li>NFR-023: Resume interrupted operations where possible (bulk exports, large downloads)</li> <li>NFR-024: Maintain operation continuity during token refresh cycles</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#security-requirements","title":"Security Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>NFR-025: Implement secure token storage using platform-native keyring services</li> <li>NFR-026: Support multi-factor authentication when required by vRA</li> <li>NFR-027: Automatic token cleanup on logout or application termination</li> <li>NFR-028: Session timeout handling with graceful re-authentication prompts</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#data-protection","title":"Data Protection","text":"<ul> <li>NFR-029: Encrypt all sensitive data at rest (tokens, cached credentials)</li> <li>NFR-030: Use TLS 1.2+ for all network communications</li> <li>NFR-031: Mask sensitive information in logs and output</li> <li>NFR-032: Implement secure memory handling for credentials</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#compliance","title":"Compliance","text":"<ul> <li>NFR-033: Adhere to VMware security guidelines and best practices</li> <li>NFR-034: Support audit logging for compliance requirements</li> <li>NFR-035: Implement role-based access control consistent with vRA permissions</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#usability-requirements","title":"Usability Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#user-experience","title":"User Experience","text":"<ul> <li>NFR-036: Provide consistent command syntax across all operations</li> <li>NFR-037: Offer comprehensive help documentation for all commands</li> <li>NFR-038: Support command-line completion and suggestions</li> <li>NFR-039: Provide meaningful error messages with suggested resolutions</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#accessibility","title":"Accessibility","text":"<ul> <li>NFR-040: Support screen readers and accessibility tools</li> <li>NFR-041: Provide text-only output options for automated processing</li> <li>NFR-042: Support high-contrast terminal themes</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#internationalization","title":"Internationalization","text":"<ul> <li>NFR-043: Support UTF-8 encoding for international character sets</li> <li>NFR-044: Handle timezone-aware date/time operations</li> <li>NFR-045: Provide English language interface (baseline requirement)</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#compatibility-requirements","title":"Compatibility Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#platform-support","title":"Platform Support","text":"<ul> <li>NFR-046: Support Windows 10/11, macOS 10.15+, and Linux (Ubuntu 18.04+)</li> <li>NFR-047: Compatible with Python 3.8+ runtime environments</li> <li>NFR-048: Support both x86_64 and ARM64 architectures</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#integration","title":"Integration","text":"<ul> <li>NFR-049: Compatible with VMware vRA 8.x and vRA Cloud</li> <li>NFR-050: Integration with common CI/CD platforms (Jenkins, GitLab CI, GitHub Actions)</li> <li>NFR-051: Shell integration for bash, zsh, and PowerShell environments</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#maintainability-requirements","title":"Maintainability Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#code-quality","title":"Code Quality","text":"<ul> <li>NFR-052: Maintain minimum 80% unit test coverage</li> <li>NFR-053: Adhere to PEP 8 Python coding standards</li> <li>NFR-054: Implement comprehensive logging for debugging and monitoring</li> <li>NFR-055: Use static code analysis tools to maintain code quality</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#documentation","title":"Documentation","text":"<ul> <li>NFR-056: Maintain comprehensive API documentation</li> <li>NFR-057: Provide architecture and design documentation</li> <li>NFR-058: Include troubleshooting guides and FAQ</li> <li>NFR-059: Maintain up-to-date user guides and examples</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#deployment","title":"Deployment","text":"<ul> <li>NFR-060: Support automated testing and continuous integration</li> <li>NFR-061: Provide automated build and packaging processes</li> <li>NFR-062: Enable easy installation through package managers (pip, conda)</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#reliability-requirements","title":"Reliability Requirements","text":""},{"location":"architecture-design/non-functional-requirements/#error-handling","title":"Error Handling","text":"<ul> <li>NFR-063: Graceful degradation when optional features are unavailable</li> <li>NFR-064: Comprehensive error logging without exposing sensitive information</li> <li>NFR-065: Automatic retry mechanisms for transient failures</li> <li>NFR-066: Consistent error reporting across all operations</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#data-integrity","title":"Data Integrity","text":"<ul> <li>NFR-067: Validate all input data before processing</li> <li>NFR-068: Implement checksums for exported data files</li> <li>NFR-069: Atomic operations for configuration changes</li> <li>NFR-070: Backup and recovery mechanisms for configuration data</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture-design/non-functional-requirements/#logging","title":"Logging","text":"<ul> <li>NFR-071: Implement structured logging with configurable levels</li> <li>NFR-072: Support log rotation and archival policies</li> <li>NFR-073: Provide performance metrics for key operations</li> <li>NFR-074: Enable debug logging for troubleshooting</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#metrics","title":"Metrics","text":"<ul> <li>NFR-075: Track API response times and success rates</li> <li>NFR-076: Monitor authentication token lifecycle events</li> <li>NFR-077: Collect usage statistics for feature optimization</li> <li>NFR-078: Provide health check capabilities for monitoring systems</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#installation-and-configuration","title":"Installation and Configuration","text":""},{"location":"architecture-design/non-functional-requirements/#installation","title":"Installation","text":"<ul> <li>NFR-079: Installation process must complete within 2 minutes</li> <li>NFR-080: Support silent/unattended installation modes</li> <li>NFR-081: Minimal system requirements: 100MB disk space, 256MB RAM</li> <li>NFR-082: No administrative privileges required for user installation</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#configuration","title":"Configuration","text":"<ul> <li>NFR-083: Zero-configuration startup for basic operations</li> <li>NFR-084: Configuration wizard for initial setup</li> <li>NFR-085: Import/export configuration for environment migration</li> <li>NFR-086: Validation of configuration settings with helpful error messages</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":""},{"location":"architecture-design/non-functional-requirements/#test-coverage","title":"Test Coverage","text":"<ul> <li>NFR-087: Automated unit tests with 80%+ code coverage</li> <li>NFR-088: Integration tests for all API interactions</li> <li>NFR-089: End-to-end tests for critical user workflows</li> <li>NFR-090: Performance tests for scalability validation</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>NFR-091: Static code analysis with zero critical issues</li> <li>NFR-092: Security scanning with no high-severity vulnerabilities</li> <li>NFR-093: Dependency vulnerability scanning and updates</li> <li>NFR-094: Regular quality gate reviews and approvals</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#compliance-and-standards","title":"Compliance and Standards","text":""},{"location":"architecture-design/non-functional-requirements/#industry-standards","title":"Industry Standards","text":"<ul> <li>NFR-095: Comply with OWASP security guidelines</li> <li>NFR-096: Follow RFC standards for HTTP/HTTPS communications</li> <li>NFR-097: Adhere to JSON Schema standards for data validation</li> <li>NFR-098: Implement OAuth 2.0 and OpenID Connect standards where applicable</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#organizational-standards","title":"Organizational Standards","text":"<ul> <li>NFR-099: Follow VMware development and security guidelines</li> <li>NFR-100: Comply with enterprise logging and monitoring requirements</li> </ul>"},{"location":"architecture-design/non-functional-requirements/#measurement-and-validation","title":"Measurement and Validation","text":"<p>These non-functional requirements will be validated through:</p> <ol> <li>Performance Testing: Load testing, stress testing, and benchmark measurements</li> <li>Security Testing: Penetration testing, vulnerability scanning, and security audits</li> <li>Usability Testing: User experience evaluation and accessibility testing</li> <li>Compatibility Testing: Multi-platform testing across supported environments</li> <li>Reliability Testing: Chaos engineering and failure scenario testing</li> </ol> <p>Each requirement will be assigned measurable criteria and validated through automated testing and manual verification processes.</p>"},{"location":"architecture-design/security-compliance/","title":"Security and Compliance","text":""},{"location":"architecture-design/security-compliance/#overview","title":"Overview","text":"<p>This document outlines the security architecture, threat model, and compliance requirements for the VMware vRA CLI. It defines security controls, data protection measures, and compliance considerations necessary for enterprise deployment.</p>"},{"location":"architecture-design/security-compliance/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture-design/security-compliance/#1-trust-boundaries","title":"1. Trust Boundaries","text":"<pre><code>graph TB\n    subgraph UserEnv[\"User Environment\"]\n        User[End User]\n        Terminal[Terminal/Shell]\n        FS[File System]\n    end\n\n    subgraph AppBoundary[\"Application Boundary\"]\n        CLI[CLI Application]\n        Config[Configuration Manager]\n        Auth[Authentication Layer]\n        API[API Client]\n    end\n\n    subgraph SysBoundary[\"System Boundary\"]\n        Keyring[System Keyring]\n        OS[Operating System]\n        Network[Network Stack]\n    end\n\n    subgraph ExtBoundary[\"External Boundary\"]\n        vRA[VMware vRA Platform]\n        IdP[Identity Provider]\n        CA[Certificate Authority]\n    end\n\n    User --&gt; Terminal\n    Terminal --&gt; CLI\n    CLI --&gt; Config\n    CLI --&gt; Auth\n    CLI --&gt; API\n\n    Config --&gt; FS\n    Auth --&gt; Keyring\n    API --&gt; Network\n\n    Network --&gt; vRA\n    vRA --&gt; IdP\n    Network --&gt; CA\n\n    style AppBoundary fill:#e1f5fe\n    style SysBoundary fill:#f3e5f5\n    style ExtBoundary fill:#fff3e0\n</code></pre>"},{"location":"architecture-design/security-compliance/#2-security-zones","title":"2. Security Zones","text":""},{"location":"architecture-design/security-compliance/#zone-1-user-space-lowest-trust","title":"Zone 1: User Space (Lowest Trust)","text":"<ul> <li>Terminal environment and user input</li> <li>Configuration files and logs</li> <li>Temporary data storage</li> </ul>"},{"location":"architecture-design/security-compliance/#zone-2-application-space-medium-trust","title":"Zone 2: Application Space (Medium Trust)","text":"<ul> <li>CLI application process</li> <li>In-memory data processing</li> <li>Configuration management</li> </ul>"},{"location":"architecture-design/security-compliance/#zone-3-system-space-high-trust","title":"Zone 3: System Space (High Trust)","text":"<ul> <li>System keyring services</li> <li>Operating system APIs</li> <li>Network communication stack</li> </ul>"},{"location":"architecture-design/security-compliance/#zone-4-external-services-variable-trust","title":"Zone 4: External Services (Variable Trust)","text":"<ul> <li>VMware vRA APIs (High Trust)</li> <li>Identity providers (High Trust)</li> <li>Certificate authorities (High Trust)</li> <li>Network infrastructure (Medium Trust)</li> </ul>"},{"location":"architecture-design/security-compliance/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"architecture-design/security-compliance/#1-authentication-flow","title":"1. Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Auth as Auth Service\n    participant Keyring\n    participant vRA as vRA Identity API\n    participant IaaS as vRA IaaS API\n    participant IdP as Identity Provider\n\n    User-&gt;&gt;CLI: Login command\n    CLI-&gt;&gt;Auth: Authenticate request\n    Auth-&gt;&gt;vRA: Identity authentication\n    vRA-&gt;&gt;IdP: Validate credentials\n    IdP--&gt;&gt;vRA: User validated\n    vRA--&gt;&gt;Auth: Identity token\n    Auth-&gt;&gt;IaaS: Get access token\n    IaaS--&gt;&gt;Auth: Access token\n    Auth-&gt;&gt;Keyring: Store tokens securely\n    Keyring--&gt;&gt;Auth: Storage confirmed\n    Auth--&gt;&gt;CLI: Login successful\n    CLI--&gt;&gt;User: Authentication complete</code></pre>"},{"location":"architecture-design/security-compliance/#2-token-management","title":"2. Token Management","text":""},{"location":"architecture-design/security-compliance/#token-types","title":"Token Types","text":"<ul> <li>Identity Token: Initial authentication token from vRA Identity service</li> <li>Access Token: API access token with 8-hour expiration</li> <li>Refresh Token: Long-lived token for access token renewal (90 days)</li> </ul>"},{"location":"architecture-design/security-compliance/#security-controls","title":"Security Controls","text":"<ul> <li>Secure Storage: All tokens stored in system keyring with encryption</li> <li>Automatic Expiration: Tokens automatically expire and require renewal</li> <li>Scope Limitation: Tokens limited to minimum required permissions</li> <li>Revocation Support: Tokens can be revoked on logout or security events</li> </ul>"},{"location":"architecture-design/security-compliance/#3-multi-factor-authentication-mfa","title":"3. Multi-Factor Authentication (MFA)","text":"<ul> <li>Support: CLI supports MFA when required by vRA environment</li> <li>Flow: MFA prompts handled through interactive authentication</li> <li>Tokens: MFA-protected tokens stored with additional encryption layer</li> <li>Validation: MFA requirements validated before each authentication attempt</li> </ul>"},{"location":"architecture-design/security-compliance/#data-protection","title":"Data Protection","text":""},{"location":"architecture-design/security-compliance/#1-data-classification","title":"1. Data Classification","text":""},{"location":"architecture-design/security-compliance/#highly-sensitive-data","title":"Highly Sensitive Data","text":"<ul> <li>Authentication credentials (passwords, tokens)</li> <li>Private keys and certificates</li> <li>Personal identifiable information (PII)</li> </ul>"},{"location":"architecture-design/security-compliance/#sensitive-data","title":"Sensitive Data","text":"<ul> <li>Configuration settings with connection details</li> <li>API responses containing system information</li> <li>Audit logs and access records</li> </ul>"},{"location":"architecture-design/security-compliance/#internal-data","title":"Internal Data","text":"<ul> <li>Application logs and debug information</li> <li>Performance metrics and statistics</li> <li>Non-sensitive configuration data</li> </ul>"},{"location":"architecture-design/security-compliance/#public-data","title":"Public Data","text":"<ul> <li>Help documentation and command syntax</li> <li>Error messages without sensitive details</li> <li>Version and system information</li> </ul>"},{"location":"architecture-design/security-compliance/#2-encryption-requirements","title":"2. Encryption Requirements","text":""},{"location":"architecture-design/security-compliance/#data-at-rest","title":"Data at Rest","text":"<ul> <li>Keyring Storage: System keyring provides hardware-backed encryption where available</li> <li>Configuration Files: Sensitive configuration data encrypted using AES-256</li> <li>Log Files: Audit logs encrypted and protected with restricted access</li> <li>Cache Data: Temporary data encrypted and automatically purged</li> </ul>"},{"location":"architecture-design/security-compliance/#data-in-transit","title":"Data in Transit","text":"<ul> <li>TLS Encryption: All network communications use TLS 1.2 or higher</li> <li>Certificate Validation: SSL certificates validated against trusted CAs</li> <li>Perfect Forward Secrecy: Ephemeral key exchange for session security</li> <li>HSTS Support: HTTP Strict Transport Security enforced where supported</li> </ul>"},{"location":"architecture-design/security-compliance/#3-key-management","title":"3. Key Management","text":""},{"location":"architecture-design/security-compliance/#key-storage","title":"Key Storage","text":"<ul> <li>System Integration: Leverage platform native key storage (Windows Credential Manager, macOS Keychain, Linux Secret Service)</li> <li>Encryption Keys: Application encryption keys derived from user credentials and system entropy</li> <li>Key Rotation: Support for key rotation and migration procedures</li> </ul>"},{"location":"architecture-design/security-compliance/#key-lifecycle","title":"Key Lifecycle","text":"<ul> <li>Generation: Cryptographically secure random key generation</li> <li>Distribution: Keys never transmitted in plain text</li> <li>Storage: Keys protected with hardware security modules where available</li> <li>Destruction: Secure key deletion on logout or application removal</li> </ul>"},{"location":"architecture-design/security-compliance/#secure-communication","title":"Secure Communication","text":""},{"location":"architecture-design/security-compliance/#1-network-security","title":"1. Network Security","text":""},{"location":"architecture-design/security-compliance/#tls-configuration","title":"TLS Configuration","text":"<pre><code># Example TLS configuration\nSSL_CONFIG = {\n    'ssl_version': ssl.PROTOCOL_TLS_CLIENT,\n    'cert_reqs': ssl.CERT_REQUIRED,\n    'check_hostname': True,\n    'ciphers': 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS',\n    'options': ssl.OP_NO_SSLv2 | ssl.OP_NO_SSLv3 | ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1\n}\n</code></pre>"},{"location":"architecture-design/security-compliance/#certificate-validation","title":"Certificate Validation","text":"<ul> <li>Chain Validation: Complete certificate chain verification</li> <li>Revocation Checking: OCSP and CRL validation where supported</li> <li>Pinning: Certificate pinning for critical endpoints</li> <li>Custom CAs: Support for enterprise certificate authorities</li> </ul>"},{"location":"architecture-design/security-compliance/#2-api-security","title":"2. API Security","text":""},{"location":"architecture-design/security-compliance/#request-security","title":"Request Security","text":"<ul> <li>Authentication Headers: Bearer token authentication for all API calls</li> <li>Request Signing: Optional request signing for enhanced security</li> <li>Rate Limiting: Built-in rate limiting to prevent abuse</li> <li>Timeout Protection: Request timeouts to prevent hanging connections</li> </ul>"},{"location":"architecture-design/security-compliance/#response-validation","title":"Response Validation","text":"<ul> <li>Content Validation: Response content validation against expected schemas</li> <li>Size Limits: Maximum response size limits to prevent DoS attacks</li> <li>Content-Type Checking: Strict content-type validation for all responses</li> </ul>"},{"location":"architecture-design/security-compliance/#threat-model","title":"Threat Model","text":""},{"location":"architecture-design/security-compliance/#1-threat-actors","title":"1. Threat Actors","text":""},{"location":"architecture-design/security-compliance/#external-attackers","title":"External Attackers","text":"<ul> <li>Capabilities: Remote network access, social engineering</li> <li>Motivations: Data theft, system disruption, credential harvesting</li> <li>Attack Vectors: Network interception, phishing, malware</li> </ul>"},{"location":"architecture-design/security-compliance/#malicious-insiders","title":"Malicious Insiders","text":"<ul> <li>Capabilities: Legitimate system access, elevated privileges</li> <li>Motivations: Data exfiltration, sabotage, unauthorized access</li> <li>Attack Vectors: Privilege abuse, data copying, backdoor installation</li> </ul>"},{"location":"architecture-design/security-compliance/#compromised-accounts","title":"Compromised Accounts","text":"<ul> <li>Capabilities: Legitimate user credentials, normal access patterns</li> <li>Motivations: Lateral movement, persistence, data collection</li> <li>Attack Vectors: Credential stuffing, session hijacking, token theft</li> </ul>"},{"location":"architecture-design/security-compliance/#2-attack-scenarios","title":"2. Attack Scenarios","text":""},{"location":"architecture-design/security-compliance/#scenario-1-credential-theft","title":"Scenario 1: Credential Theft","text":"<ul> <li>Attack: Attacker attempts to steal stored credentials</li> <li>Impact: Unauthorized access to vRA environment</li> <li>Mitigations: </li> <li>System keyring encryption</li> <li>Token expiration and rotation</li> <li>Multi-factor authentication</li> <li>Access monitoring and alerting</li> </ul>"},{"location":"architecture-design/security-compliance/#scenario-2-man-in-the-middle","title":"Scenario 2: Man-in-the-Middle","text":"<ul> <li>Attack: Attacker intercepts network communications</li> <li>Impact: Credential interception, data manipulation</li> <li>Mitigations:</li> <li>TLS encryption with certificate pinning</li> <li>Certificate validation and HSTS</li> <li>Network segmentation</li> <li>VPN requirements for remote access</li> </ul>"},{"location":"architecture-design/security-compliance/#scenario-3-configuration-tampering","title":"Scenario 3: Configuration Tampering","text":"<ul> <li>Attack: Attacker modifies configuration to redirect API calls</li> <li>Impact: Data exfiltration, unauthorized system access</li> <li>Mitigations:</li> <li>Configuration file integrity checking</li> <li>Restricted file system permissions</li> <li>Configuration validation</li> <li>Audit logging of configuration changes</li> </ul>"},{"location":"architecture-design/security-compliance/#3-risk-assessment-matrix","title":"3. Risk Assessment Matrix","text":"Threat Likelihood Impact Risk Level Mitigation Priority Credential Theft Medium High High 1 Network Interception Low High Medium 2 Configuration Tampering Medium Medium Medium 3 Token Compromise Medium High High 1 Insider Threat Low High Medium 2 Malware Infection Medium Medium Medium 3"},{"location":"architecture-design/security-compliance/#compliance-requirements","title":"Compliance Requirements","text":""},{"location":"architecture-design/security-compliance/#1-industry-standards","title":"1. Industry Standards","text":""},{"location":"architecture-design/security-compliance/#soc-2-type-ii-compliance","title":"SOC 2 Type II Compliance","text":"<ul> <li>Security: Comprehensive security controls and monitoring</li> <li>Availability: System availability and disaster recovery procedures</li> <li>Processing Integrity: Data processing accuracy and completeness</li> <li>Confidentiality: Data confidentiality and access controls</li> <li>Privacy: Personal information protection and privacy controls</li> </ul>"},{"location":"architecture-design/security-compliance/#iso-2700127002-compliance","title":"ISO 27001/27002 Compliance","text":"<ul> <li>Information Security Management: Formal ISMS implementation</li> <li>Risk Management: Regular risk assessments and mitigation plans</li> <li>Access Control: Comprehensive access control policies</li> <li>Cryptography: Strong cryptographic controls and key management</li> <li>Incident Response: Formal incident response procedures</li> </ul>"},{"location":"architecture-design/security-compliance/#2-regulatory-compliance","title":"2. Regulatory Compliance","text":""},{"location":"architecture-design/security-compliance/#gdpr-general-data-protection-regulation","title":"GDPR (General Data Protection Regulation)","text":"<ul> <li>Data Minimization: Collect and process only necessary data</li> <li>Purpose Limitation: Use data only for specified purposes</li> <li>Storage Limitation: Retain data only as long as necessary</li> <li>Data Subject Rights: Support data access, correction, and deletion</li> <li>Privacy by Design: Implement privacy controls by default</li> </ul>"},{"location":"architecture-design/security-compliance/#hipaa-healthcare","title":"HIPAA (Healthcare)","text":"<ul> <li>Administrative Safeguards: Security policies and procedures</li> <li>Physical Safeguards: Physical access controls and protections</li> <li>Technical Safeguards: Technical access controls and audit logs</li> <li>Breach Notification: Incident reporting and notification procedures</li> </ul>"},{"location":"architecture-design/security-compliance/#3-enterprise-security-requirements","title":"3. Enterprise Security Requirements","text":""},{"location":"architecture-design/security-compliance/#vmware-security-guidelines","title":"VMware Security Guidelines","text":"<ul> <li>Secure Development: Follow VMware secure coding practices</li> <li>Vulnerability Management: Regular security assessments and patching</li> <li>Incident Response: Integration with VMware security operations</li> <li>Compliance Monitoring: Ongoing compliance validation and reporting</li> </ul>"},{"location":"architecture-design/security-compliance/#enterprise-integration","title":"Enterprise Integration","text":"<ul> <li>Single Sign-On (SSO): Integration with enterprise identity systems</li> <li>Certificate Management: Use of enterprise certificate authorities</li> <li>Network Security: Compliance with network segmentation policies</li> <li>Audit Integration: Integration with enterprise SIEM systems</li> </ul>"},{"location":"architecture-design/security-compliance/#security-controls-implementation","title":"Security Controls Implementation","text":""},{"location":"architecture-design/security-compliance/#1-preventive-controls","title":"1. Preventive Controls","text":""},{"location":"architecture-design/security-compliance/#access-controls","title":"Access Controls","text":"<pre><code>class AccessControl:\n    \"\"\"Access control implementation\"\"\"\n\n    def __init__(self):\n        self.permission_matrix = self._load_permissions()\n        self.role_mappings = self._load_role_mappings()\n\n    def check_permission(self, user_role: str, resource: str, action: str) -&gt; bool:\n        \"\"\"Check if user has permission for action\"\"\"\n        required_permission = f\"{resource}:{action}\"\n        user_permissions = self.permission_matrix.get(user_role, [])\n        return required_permission in user_permissions\n</code></pre>"},{"location":"architecture-design/security-compliance/#input-validation","title":"Input Validation","text":"<pre><code>class InputValidator:\n    \"\"\"Comprehensive input validation\"\"\"\n\n    @staticmethod\n    def validate_command_args(command: str, args: dict) -&gt; ValidationResult:\n        \"\"\"Validate command arguments\"\"\"\n        schema = CommandSchema.get_schema(command)\n        return validate_against_schema(args, schema)\n\n    @staticmethod\n    def sanitize_output(data: any) -&gt; any:\n        \"\"\"Sanitize output to remove sensitive information\"\"\"\n        return mask_sensitive_fields(data, SENSITIVE_FIELD_PATTERNS)\n</code></pre>"},{"location":"architecture-design/security-compliance/#2-detective-controls","title":"2. Detective Controls","text":""},{"location":"architecture-design/security-compliance/#audit-logging","title":"Audit Logging","text":"<pre><code>class AuditLogger:\n    \"\"\"Security audit logging\"\"\"\n\n    def log_authentication_event(self, user: str, success: bool, details: dict):\n        \"\"\"Log authentication events\"\"\"\n        event = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'event_type': 'authentication',\n            'user': user,\n            'success': success,\n            'source_ip': self.get_source_ip(),\n            'details': details\n        }\n        self.write_audit_log(event)\n\n    def log_api_access(self, endpoint: str, method: str, response_code: int):\n        \"\"\"Log API access events\"\"\"\n        event = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'event_type': 'api_access',\n            'endpoint': endpoint,\n            'method': method,\n            'response_code': response_code,\n            'user': self.get_current_user()\n        }\n        self.write_audit_log(event)\n</code></pre>"},{"location":"architecture-design/security-compliance/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<ul> <li>Failed Authentication: Alert on multiple failed login attempts</li> <li>Unusual Access Patterns: Detect anomalous API usage patterns</li> <li>Configuration Changes: Monitor and alert on configuration modifications</li> <li>Token Anomalies: Detect suspicious token usage or expiration patterns</li> </ul>"},{"location":"architecture-design/security-compliance/#3-responsive-controls","title":"3. Responsive Controls","text":""},{"location":"architecture-design/security-compliance/#incident-response","title":"Incident Response","text":"<ul> <li>Automatic Response: Automatic account lockout on security events</li> <li>Manual Response: Procedures for manual incident investigation</li> <li>Recovery Procedures: Steps for system recovery and restoration</li> <li>Communication Plans: Stakeholder notification and communication</li> </ul>"},{"location":"architecture-design/security-compliance/#forensic-capabilities","title":"Forensic Capabilities","text":"<ul> <li>Log Preservation: Tamper-evident log storage and preservation</li> <li>Evidence Collection: Procedures for collecting digital evidence</li> <li>Chain of Custody: Maintain proper evidence handling procedures</li> <li>Analysis Tools: Tools for security incident analysis and investigation</li> </ul>"},{"location":"architecture-design/security-compliance/#security-testing","title":"Security Testing","text":""},{"location":"architecture-design/security-compliance/#1-static-analysis","title":"1. Static Analysis","text":""},{"location":"architecture-design/security-compliance/#code-security-scanning","title":"Code Security Scanning","text":"<pre><code># Security scanning configuration\nsecurity_scan:\n  tools:\n    - bandit  # Python security linter\n    - safety  # Dependency vulnerability scanner\n    - semgrep # Static analysis security scanner\n\n  rules:\n    - no-hardcoded-secrets\n    - secure-random-usage\n    - sql-injection-prevention\n    - xss-prevention\n</code></pre>"},{"location":"architecture-design/security-compliance/#2-dynamic-analysis","title":"2. Dynamic Analysis","text":""},{"location":"architecture-design/security-compliance/#penetration-testing","title":"Penetration Testing","text":"<ul> <li>Network Testing: Test network security controls and configurations</li> <li>Application Testing: Test application security controls and logic</li> <li>Authentication Testing: Verify authentication and authorization controls</li> <li>Configuration Testing: Test configuration security and hardening</li> </ul>"},{"location":"architecture-design/security-compliance/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>Automated Scanning: Regular automated vulnerability scans</li> <li>Manual Testing: Periodic manual security testing</li> <li>Compliance Validation: Regular compliance control validation</li> <li>Remediation Tracking: Track and verify security issue remediation</li> </ul> <p>This comprehensive security and compliance framework ensures the VMware vRA CLI meets enterprise security requirements while protecting sensitive data and maintaining regulatory compliance.</p>"},{"location":"developer-guide/architecture/","title":"Architecture Guide","text":"<p>This document provides an in-depth overview of the VMware vRA CLI project architecture, explaining the key components and how they interact within the system.</p>"},{"location":"developer-guide/architecture/#overview","title":"Overview","text":"<p>The VMware vRA CLI project is designed to facilitate seamless interaction with VMware vRealize Automation through a command-line interface, providing a set of tools for developers and administrators.</p> <ul> <li>CLI: Implements the command-line interface using Click, a Python package for creating command-line commands.</li> <li>API Clients: Handles communication with the vRA API endpoints, structured around service-focused components.</li> <li>Configuration Management: Manages application configuration via environment variables and configuration files.</li> <li>Credential Management: Provides secure storage of API credentials using system keyring.</li> </ul>"},{"location":"developer-guide/architecture/#component-breakdown","title":"Component Breakdown","text":""},{"location":"developer-guide/architecture/#1-command-line-interface-cli","title":"1. Command-Line Interface (CLI)","text":"<p>The CLI is powered by Click, offering clear syntax, automatic generation of help documentation, and rich user interaction features.</p> <ul> <li>Structure: Organized with a main entry point (<code>cli.py</code>) and sub-commands for different functionalities.</li> </ul>"},{"location":"developer-guide/architecture/#key-features","title":"Key Features:","text":"<ul> <li>Group Commands: Commands are grouped under meaningful categories (e.g. <code>auth</code>, <code>catalog</code>, <code>deployment</code>, <code>tag</code>).</li> <li>Options and Arguments: Users can pass inputs using flags, providing flexibility and control over operations.</li> <li>Help and Guidance: Built-in options for <code>--help</code> provide easy access to usage information.</li> </ul>"},{"location":"developer-guide/architecture/#2-api-clients","title":"2. API Clients","text":"<p>API clients form the backbone of the CLI, allowing it to interact with various endpoints exposed by vRA.</p> <ul> <li>HTTP Requests: Built on top of the Python <code>requests</code> library for HTTP communication.</li> <li>Error Handling: Implements robust error handling mechanisms for dealing with API errors.</li> </ul>"},{"location":"developer-guide/architecture/#key-features_1","title":"Key Features:","text":"<ul> <li>Session Management: Utilizes persistent sessions for efficient API calls.</li> <li>Resource Models: Leverages Pydantic models for structured data management.</li> <li>Automated Retries: Includes automatic retry logic for transient network issues.</li> </ul>"},{"location":"developer-guide/architecture/#3-configuration-management","title":"3. Configuration Management","text":"<ul> <li>Environment Variables: Supports reading configuration from environment variables to allow for dynamic parameterization.</li> <li>Configuration Files: Uses local configuration files (e.g. <code>config.yaml</code>) for persistent settings.</li> <li>Defaults and Overrides: Allows default values with the option to override configurations.</li> </ul>"},{"location":"developer-guide/architecture/#4-credential-management","title":"4. Credential Management","text":"<ul> <li>Keyring Integration: Utilizes the <code>keyring</code> library for storing and retrieving sensitive data securely.</li> <li>Automated Token Management: Manages authentication tokens, removing the need for manual input.</li> </ul>"},{"location":"developer-guide/architecture/#interaction-flow","title":"Interaction Flow","text":"<p>The following diagram illustrates the flow of interaction within the CLI:</p> <pre><code>graph TD\n    A[User] --&gt;|Executes Command| B[CLI Interface]\n    B --&gt;|Processes Command| C[API Clients]\n    C --&gt;|Communicates with| D[vRA API]\n    D --&gt;|Returns Data| C\n    C --&gt;|Outputs Results| B\n    B --&gt;|Display to User| A</code></pre>"},{"location":"developer-guide/architecture/#api-endpoint-interaction","title":"API Endpoint Interaction","text":"<ul> <li>Authentication: Initial login to obtain a session token for API communication.</li> <li>Service Catalog: Access and manage catalog items such as listing, requesting, and obtaining schemas.</li> <li>Deployments: Handle deployment-related functionalities including creation, deletion, and listing.</li> <li>Tags: Comprehensive management of resource tags to provide organization and categorization.</li> </ul>"},{"location":"developer-guide/architecture/#best-practices","title":"Best Practices","text":""},{"location":"developer-guide/architecture/#code-quality","title":"Code Quality","text":"<ul> <li>Adhere to PEP 8: Follow Python's style guide for consistency.</li> <li>Module Isolation: Keep modules focused on specific functionality to ensure maintainability.</li> <li>Test Coverage: Develop unit and integration tests to validate functionality.</li> </ul>"},{"location":"developer-guide/architecture/#security","title":"Security","text":"<ul> <li>Secure Storage: Always store credentials securely in the system keyring.</li> <li>TLS/SSL Verification: Ensure all API calls verify server certificates by default.</li> </ul>"},{"location":"developer-guide/architecture/#documentation","title":"Documentation","text":"<ul> <li>User and Developer Docs: Maintain comprehensive documentation for both end-users and developers.</li> <li>Auto-Generated Help: Leverage Click's automation for generating command help messages.</li> </ul>"},{"location":"developer-guide/architecture/#performance","title":"Performance","text":"<ul> <li>Connection Reuse: Utilize persistent HTTP sessions for efficiency.</li> <li>Caching Strategy: Implement caching for frequent, read-only operations where applicable.</li> </ul>"},{"location":"developer-guide/architecture/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Cloud Events Integration: Explore integration with cloud events for real-time notifications.</li> <li>Additional Services: Extend support for more vRA services as APIs evolve.</li> <li>Scalability Improvements: Optimize for larger deployments with distributed caching solutions.</li> </ul> <p>This architecture guide serves as a framework to understand and extend the VMware vRA CLI project. For more detailed guidelines, refer to our Contributing Guide and the extensive code comments across the repository.</p> <p>Built with efficiency and modern development standards to streamline VMware vRA interactions.</p> <pre><code># Happy Coding! \ud83c\udf89 \n</code></pre>"},{"location":"developer-guide/contributing/","title":"Contributing Guide","text":"<p>Welcome to the VMware vRA CLI project! We're excited to have you contribute to making this tool better for the community.</p>"},{"location":"developer-guide/contributing/#getting-started","title":"Getting Started","text":""},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.10+ - The project requires Python 3.10 or higher</li> <li>uv - Package manager for Python projects</li> <li>Git - Version control system</li> <li>Docker (optional) - For running integration tests</li> </ul>"},{"location":"developer-guide/contributing/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/brun_s/vmware-vra-cli.git\ncd vmware-vra-cli\n</code></pre></p> </li> <li> <p>Install dependencies using uv: <pre><code># Install development dependencies\nuv sync --extra dev --extra docs\n\n# Activate the virtual environment\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code># Run tests\npytest\n\n# Check code formatting\nblack --check src/ tests/\n\n# Run linting\nflake8 src/ tests/\n\n# Type checking\nmypy src/\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#branch-strategy","title":"Branch Strategy","text":"<p>We follow a simplified Git flow:</p> <ul> <li><code>main</code> - Production-ready code</li> <li><code>develop</code> - Integration branch for features</li> <li><code>feature/*</code> - Feature development branches</li> <li><code>bugfix/*</code> - Bug fix branches</li> <li><code>hotfix/*</code> - Critical production fixes</li> </ul>"},{"location":"developer-guide/contributing/#conventional-commits","title":"Conventional Commits","text":"<p>We use conventional commit messages for automated changelog generation:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"developer-guide/contributing/#types","title":"Types:","text":"<ul> <li><code>feat:</code> - New features</li> <li><code>fix:</code> - Bug fixes</li> <li><code>docs:</code> - Documentation changes</li> <li><code>style:</code> - Code style changes</li> <li><code>refactor:</code> - Code refactoring</li> <li><code>test:</code> - Adding or updating tests</li> <li><code>chore:</code> - Build process or auxiliary tool changes</li> </ul>"},{"location":"developer-guide/contributing/#examples","title":"Examples:","text":"<pre><code>feat(tag): add tag management functionality\nfix(auth): resolve token refresh issue\ndocs(api): update API documentation\ntest(catalog): add unit tests for catalog client\n</code></pre>"},{"location":"developer-guide/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes:</p> </li> <li>Write code following our coding standards</li> <li>Add tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Run pre-commit checks: <pre><code>pre-commit run --all-files\n</code></pre></p> </li> <li> <p>Run tests: <pre><code>pytest --cov=src --cov-report=html\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"feat(scope): description of your changes\"\n</code></pre></p> </li> <li> <p>Push and create a pull request: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/contributing/#code-standards","title":"Code Standards","text":""},{"location":"developer-guide/contributing/#python-code-style","title":"Python Code Style","text":"<p>We follow PEP 8 with some modifications:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Import sorting: Using isort with Black profile</li> <li>Type hints: Required for all public functions</li> <li>Docstrings: Google-style docstrings for all modules, classes, and functions</li> </ul>"},{"location":"developer-guide/contributing/#example","title":"Example:","text":"<pre><code>from typing import Dict, List, Optional\n\ndef create_tag(\n    key: str, \n    value: Optional[str] = None, \n    description: Optional[str] = None\n) -&gt; Dict[str, str]:\n    \"\"\"Create a new tag with the specified parameters.\n\n    Args:\n        key: The tag key (required)\n        value: The tag value (optional)\n        description: A description of the tag (optional)\n\n    Returns:\n        A dictionary containing the created tag information.\n\n    Raises:\n        ValueError: If the key is empty or invalid.\n    \"\"\"\n    if not key:\n        raise ValueError(\"Tag key cannot be empty\")\n\n    tag_data = {\"key\": key}\n    if value is not None:\n        tag_data[\"value\"] = value\n    if description is not None:\n        tag_data[\"description\"] = description\n\n    return tag_data\n</code></pre>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<pre><code>vmware-vra-cli/\n\u251c\u2500\u2500 src/vmware_vra_cli/          # Source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 cli.py                   # CLI entry point\n\u2502   \u2514\u2500\u2500 api/                     # API clients\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 catalog.py           # Service catalog client\n\u251c\u2500\u2500 tests/                       # Test files\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_catalog_api.py      # API tests\n\u2502   \u2514\u2500\u2500 conftest.py              # Test configuration\n\u251c\u2500\u2500 docs/                        # Documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u2514\u2500\u2500 developer-guide/\n\u251c\u2500\u2500 pyproject.toml               # Project configuration\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 main.py                      # CLI wrapper\n</code></pre>"},{"location":"developer-guide/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"developer-guide/contributing/#unit-tests","title":"Unit Tests","text":"<p>Write comprehensive unit tests for all new functionality:</p> <pre><code>import pytest\nfrom requests_mock import Mocker\nfrom vmware_vra_cli.api.catalog import CatalogClient, Tag\n\ndef test_create_tag():\n    \"\"\"Test tag creation functionality.\"\"\"\n    client = CatalogClient(\"https://vra.example.com\", \"token123\")\n\n    with Mocker() as m:\n        # Mock the API response\n        m.post(\n            \"https://vra.example.com/vco/api/tags\",\n            json={\n                \"id\": \"tag-123\",\n                \"key\": \"environment\",\n                \"value\": \"production\",\n                \"description\": \"Production environment\"\n            }\n        )\n\n        # Test the functionality\n        tag = client.create_tag(\n            key=\"environment\",\n            value=\"production\", \n            description=\"Production environment\"\n        )\n\n        # Assertions\n        assert tag.id == \"tag-123\"\n        assert tag.key == \"environment\"\n        assert tag.value == \"production\"\n        assert tag.description == \"Production environment\"\n</code></pre>"},{"location":"developer-guide/contributing/#test-organization","title":"Test Organization","text":"<ul> <li>Unit tests: Test individual functions and methods</li> <li>Integration tests: Test API interactions</li> <li>End-to-end tests: Test complete CLI workflows</li> </ul>"},{"location":"developer-guide/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run specific test file\npytest tests/test_catalog_api.py\n\n# Run tests matching a pattern\npytest -k \"test_tag\"\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":""},{"location":"developer-guide/contributing/#code-documentation","title":"Code Documentation","text":"<p>All code should be well-documented:</p> <ul> <li>Module docstrings: Describe the module's purpose</li> <li>Class docstrings: Explain the class functionality</li> <li>Method docstrings: Document parameters, return values, and exceptions</li> <li>Type hints: For all function parameters and return values</li> </ul>"},{"location":"developer-guide/contributing/#user-documentation","title":"User Documentation","text":"<p>When adding new features, update:</p> <ul> <li>User guide documentation</li> <li>API reference</li> <li>Command help text</li> <li>README examples</li> </ul>"},{"location":"developer-guide/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install docs dependencies\nuv sync --extra docs\n\n# Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"developer-guide/contributing/#adding-new-features","title":"Adding New Features","text":""},{"location":"developer-guide/contributing/#api-client-extensions","title":"API Client Extensions","text":"<p>When adding new API functionality:</p> <ol> <li>Add Pydantic models for data structures</li> <li>Implement client methods with proper error handling</li> <li>Add comprehensive tests with mocked responses</li> <li>Document the API endpoints used</li> </ol> <p>Example: <pre><code>class NewResource(BaseModel):\n    \"\"\"Represents a new resource in vRA.\"\"\"\n    id: str\n    name: str\n    status: str\n    created_at: Optional[str] = None\n\nclass CatalogClient:\n    def create_resource(self, name: str) -&gt; NewResource:\n        \"\"\"Create a new resource.\"\"\"\n        url = f\"{self.base_url}/api/resources\"\n        payload = {\"name\": name}\n\n        response = self.session.post(url, json=payload)\n        response.raise_for_status()\n\n        return NewResource(**response.json())\n</code></pre></p>"},{"location":"developer-guide/contributing/#cli-command-extensions","title":"CLI Command Extensions","text":"<p>When adding new CLI commands:</p> <ol> <li>Create command groups for related functionality</li> <li>Use consistent option naming across commands</li> <li>Support multiple output formats (table, JSON, YAML)</li> <li>Add comprehensive help text</li> <li>Include examples in docstrings</li> </ol> <p>Example: <pre><code>@main.group()\ndef resource():\n    \"\"\"Resource management operations.\"\"\"\n    pass\n\n@resource.command('create')\n@click.argument('name')\n@click.option('--description', help='Resource description')\n@click.pass_context\ndef create_resource(ctx, name, description):\n    \"\"\"Create a new resource.\n\n    Examples:\n        vra resource create \"my-resource\" --description \"Test resource\"\n    \"\"\"\n    client = get_catalog_client()\n\n    with console.status(f\"Creating resource {name}...\"):\n        resource = client.create_resource(name, description)\n\n    console.print(f\"[green]\u2705 Resource created: {resource.id}[/green]\")\n</code></pre></p>"},{"location":"developer-guide/contributing/#quality-assurance","title":"Quality Assurance","text":""},{"location":"developer-guide/contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Our pre-commit configuration includes:</p> <ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>flake8: Code linting</li> <li>mypy: Static type checking</li> <li>pytest: Running tests</li> </ul>"},{"location":"developer-guide/contributing/#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions automatically:</p> <ul> <li>Run tests on multiple Python versions</li> <li>Check code formatting and linting</li> <li>Build and test documentation</li> <li>Generate coverage reports</li> </ul>"},{"location":"developer-guide/contributing/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Use connection pooling for API clients</li> <li>Implement proper error handling with retries</li> <li>Cache frequently accessed data when appropriate</li> <li>Optimize CLI startup time by lazy loading</li> </ul>"},{"location":"developer-guide/contributing/#release-process","title":"Release Process","text":""},{"location":"developer-guide/contributing/#version-management","title":"Version Management","text":"<p>We use semantic versioning (SemVer):</p> <ul> <li><code>MAJOR.MINOR.PATCH</code></li> <li>Increment MAJOR for breaking changes</li> <li>Increment MINOR for new features</li> <li>Increment PATCH for bug fixes</li> </ul>"},{"location":"developer-guide/contributing/#creating-a-release","title":"Creating a Release","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update changelog with new features and fixes</li> <li>Create a git tag: <pre><code>git tag -a v0.3.0 -m \"Release version 0.3.0\"\ngit push origin v0.3.0\n</code></pre></li> <li>GitHub Actions will automatically build and publish</li> </ol>"},{"location":"developer-guide/contributing/#changelog-generation","title":"Changelog Generation","text":"<p>We maintain a changelog following Keep a Changelog format:</p> <pre><code>## [0.3.0] - 2024-01-15\n\n### Added\n- Tag management functionality\n- New CLI commands for resource tagging\n\n### Changed\n- Improved error handling in API client\n\n### Fixed\n- Authentication token refresh issue\n</code></pre>"},{"location":"developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"developer-guide/contributing/#code-review-process","title":"Code Review Process","text":"<p>All contributions must go through code review:</p> <ol> <li>Create a pull request with a clear description</li> <li>Ensure CI passes (tests, linting, formatting)</li> <li>Request review from maintainers</li> <li>Address feedback promptly</li> <li>Squash commits before merging</li> </ol>"},{"location":"developer-guide/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting issues:</p> <ul> <li>Use the issue template</li> <li>Provide clear reproduction steps</li> <li>Include relevant logs and error messages</li> <li>Specify your environment (OS, Python version, CLI version)</li> </ul>"},{"location":"developer-guide/contributing/#feature-requests","title":"Feature Requests","text":"<p>For new features:</p> <ul> <li>Check existing issues first</li> <li>Provide clear use case and motivation</li> <li>Consider implementation complexity</li> <li>Be willing to contribute the implementation</li> </ul>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Check the user guide and API reference</li> <li>Issues: Search existing GitHub issues</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Email: Contact maintainers for security issues</li> </ul>"},{"location":"developer-guide/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in:</p> <ul> <li>README.md contributors section</li> <li>Release notes</li> <li>Changelog entries</li> </ul> <p>Thank you for contributing to VMware vRA CLI! \ud83c\udf89</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>VMware vRA CLI provides flexible configuration options to customize your experience. This guide covers all available configuration methods.</p>"},{"location":"getting-started/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>The CLI supports multiple configuration sources, in order of precedence:</p> <ol> <li>Command-line arguments (highest priority)</li> <li>Environment variables</li> <li>Configuration file</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":""},{"location":"getting-started/configuration/#default-location","title":"Default Location","text":"<p>The CLI looks for configuration files in these locations:</p> <ul> <li>Linux/macOS: <code>~/.config/vmware-vra-cli/config.yaml</code></li> <li>Windows: <code>%APPDATA%\\vmware-vra-cli\\config.yaml</code></li> </ul>"},{"location":"getting-started/configuration/#sample-configuration","title":"Sample Configuration","text":"<p>Create a configuration file to set default values:</p> ~/.config/vmware-vra-cli/config.yaml<pre><code># VMware vRA CLI Configuration\n\n# Default vRA server settings\nserver:\n  url: \"https://vra.company.com\"\n  tenant: \"vsphere.local\"\n  verify_ssl: true\n  timeout: 30\n\n# Default project and template preferences\ndefaults:\n  project: \"Development\"\n  template: \"Ubuntu Server 20.04 LTS\"\n\n# Output preferences\noutput:\n  format: \"table\"  # table, json, yaml\n  color: true\n  verbose: false\n\n# VM creation defaults\nvm:\n  cpu: 2\n  memory: 4096  # MB\n  disk: 20      # GB\n\n# Authentication settings\nauth:\n  store_token: true\n  token_lifetime: 3600  # seconds\n\n# Logging configuration\nlogging:\n  level: \"INFO\"  # DEBUG, INFO, WARNING, ERROR\n  file: \"~/.local/share/vmware-vra-cli/vra-cli.log\"\n</code></pre>"},{"location":"getting-started/configuration/#create-config-directory","title":"Create Config Directory","text":"<p>Create the configuration directory and file:</p> <pre><code># Linux/macOS\nmkdir -p ~/.config/vmware-vra-cli\ntouch ~/.config/vmware-vra-cli/config.yaml\n\n# Windows (PowerShell)\nNew-Item -ItemType Directory -Path \"$env:APPDATA\\vmware-vra-cli\" -Force\nNew-Item -ItemType File -Path \"$env:APPDATA\\vmware-vra-cli\\config.yaml\" -Force\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Set environment variables to configure the CLI:</p>"},{"location":"getting-started/configuration/#authentication-variables","title":"Authentication Variables","text":"<pre><code>export VRA_URL=\"https://vra.company.com\"\nexport VRA_USERNAME=\"admin@vsphere.local\"\nexport VRA_TENANT=\"vsphere.local\"\n# Note: Don't set VRA_PASSWORD in production - use keyring instead\n</code></pre>"},{"location":"getting-started/configuration/#default-settings","title":"Default Settings","text":"<pre><code>export VRA_DEFAULT_PROJECT=\"Development\"\nexport VRA_DEFAULT_TEMPLATE=\"Ubuntu Server 20.04 LTS\"\nexport VRA_OUTPUT_FORMAT=\"json\"\nexport VRA_VERIFY_SSL=\"true\"\nexport VRA_TIMEOUT=\"60\"\n</code></pre>"},{"location":"getting-started/configuration/#shell-profile-setup","title":"Shell Profile Setup","text":"<p>Add to your shell profile (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code># VMware vRA CLI Configuration\nexport VRA_URL=\"https://vra.company.com\"\nexport VRA_DEFAULT_PROJECT=\"Development\"\nexport VRA_OUTPUT_FORMAT=\"table\"\n</code></pre>"},{"location":"getting-started/configuration/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Override any setting using command-line arguments:</p> <pre><code># Override server URL\nvra --url \"https://vra-prod.company.com\" vm list\n\n# Override output format\nvra --format json vm templates\n\n# Override default project\nvra vm create --project \"Production\" --name \"prod-vm-001\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/configuration/#view-current-configuration","title":"View Current Configuration","text":"<p>Display the effective configuration:</p> <pre><code>vra config show\n</code></pre>"},{"location":"getting-started/configuration/#set-configuration-values","title":"Set Configuration Values","text":"<pre><code># Set default project\nvra config set defaults.project \"Production\"\n\n# Set output format\nvra config set output.format \"json\"\n\n# Set server URL\nvra config set server.url \"https://vra-prod.company.com\"\n</code></pre>"},{"location":"getting-started/configuration/#get-configuration-values","title":"Get Configuration Values","text":"<pre><code># Get specific value\nvra config get server.url\n\n# Get all defaults\nvra config get defaults\n</code></pre>"},{"location":"getting-started/configuration/#reset-configuration","title":"Reset Configuration","text":"<pre><code># Reset to defaults\nvra config reset\n\n# Reset specific section\nvra config reset defaults\n</code></pre>"},{"location":"getting-started/configuration/#profiles","title":"Profiles","text":"<p>Manage multiple vRA environments using profiles:</p>"},{"location":"getting-started/configuration/#create-profile","title":"Create Profile","text":"<pre><code>vra profile create production \\\n  --url \"https://vra-prod.company.com\" \\\n  --tenant \"prod.local\"\n\nvra profile create development \\\n  --url \"https://vra-dev.company.com\" \\\n  --tenant \"dev.local\"\n</code></pre>"},{"location":"getting-started/configuration/#switch-profiles","title":"Switch Profiles","text":"<pre><code># Use production profile\nvra profile use production\n\n# Use development profile  \nvra profile use development\n\n# Show current profile\nvra profile current\n\n# List all profiles\nvra profile list\n</code></pre>"},{"location":"getting-started/configuration/#profile-configuration","title":"Profile Configuration","text":"<p>Each profile has its own configuration:</p> <pre><code># Set defaults for current profile\nvra config set defaults.project \"WebApps\"\n\n# View profile-specific config\nvra config show --profile production\n</code></pre>"},{"location":"getting-started/configuration/#ssl-configuration","title":"SSL Configuration","text":""},{"location":"getting-started/configuration/#disable-ssl-verification-development-only","title":"Disable SSL Verification (Development Only)","text":"<p>Security Warning</p> <p>Only disable SSL verification in development environments with self-signed certificates.</p> <pre><code># Via environment variable\nexport VRA_VERIFY_SSL=\"false\"\n\n# Via config file\nserver:\n  verify_ssl: false\n\n# Via command line\nvra --no-verify-ssl vm list\n</code></pre>"},{"location":"getting-started/configuration/#custom-ca-certificate","title":"Custom CA Certificate","text":"<p>For environments with custom CA certificates:</p> <pre><code># Via environment variable\nexport VRA_CA_CERT=\"/path/to/ca-cert.pem\"\n\n# Via config file\nserver:\n  ca_cert: \"/path/to/ca-cert.pem\"\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":""},{"location":"getting-started/configuration/#log-levels","title":"Log Levels","text":"<p>Configure logging verbosity:</p> <pre><code># Via environment variable\nexport VRA_LOG_LEVEL=\"DEBUG\"\n\n# Via config file\nlogging:\n  level: \"DEBUG\"\n\n# Via command line\nvra --verbose vm create --name \"test-vm\"\n</code></pre>"},{"location":"getting-started/configuration/#log-file-location","title":"Log File Location","text":"<pre><code># Default locations:\n# Linux/macOS: ~/.local/share/vmware-vra-cli/vra-cli.log\n# Windows: %LOCALAPPDATA%\\vmware-vra-cli\\vra-cli.log\n\n# Custom location via config\nlogging:\n  file: \"/var/log/vra-cli.log\"\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#request-timeouts","title":"Request Timeouts","text":"<pre><code># Via config file\nserver:\n  timeout: 60  # seconds\n  connect_timeout: 10\n  read_timeout: 30\n</code></pre>"},{"location":"getting-started/configuration/#retry-configuration","title":"Retry Configuration","text":"<pre><code># Via config file\nserver:\n  retry_attempts: 3\n  retry_delay: 1  # seconds\n  retry_backoff: 2.0\n</code></pre>"},{"location":"getting-started/configuration/#output-customization","title":"Output Customization","text":"<pre><code># Via config file\noutput:\n  format: \"table\"      # table, json, yaml, csv\n  color: true          # colorized output\n  pager: true          # use pager for long output\n  max_width: 120       # table width limit\n  timestamp: false     # include timestamps\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Validate your configuration:</p> <pre><code># Check configuration syntax\nvra config validate\n\n# Test connection with current config\nvra config test\n\n# Show resolved configuration\nvra config show --resolved\n</code></pre>"},{"location":"getting-started/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"Development Config<pre><code>server:\n  url: \"https://vra-dev.company.com\"\n  tenant: \"dev.local\"\n  verify_ssl: false\n\ndefaults:\n  project: \"Development\"\n  template: \"Ubuntu Server 20.04 LTS\"\n\noutput:\n  format: \"table\"\n  color: true\n  verbose: true\n\nlogging:\n  level: \"DEBUG\"\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"Production Config<pre><code>server:\n  url: \"https://vra-prod.company.com\"\n  tenant: \"prod.local\"\n  verify_ssl: true\n  timeout: 60\n\ndefaults:\n  project: \"Production\"\n\noutput:\n  format: \"json\"\n  color: false\n\nlogging:\n  level: \"INFO\"\n  file: \"/var/log/vra-cli.log\"\n</code></pre>"},{"location":"getting-started/configuration/#cicd-environment","title":"CI/CD Environment","text":"CI/CD Environment Variables<pre><code>export VRA_URL=\"https://vra-ci.company.com\"\nexport VRA_USERNAME=\"ci-service-account\"\nexport VRA_DEFAULT_PROJECT=\"CI-CD\"\nexport VRA_OUTPUT_FORMAT=\"json\"\nexport VRA_LOG_LEVEL=\"WARNING\"\nexport VRA_VERIFY_SSL=\"true\"\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"getting-started/configuration/#configuration-not-found","title":"Configuration Not Found","text":"<pre><code>ERROR: Configuration file not found\n</code></pre> <p>Solution: Create the config directory and file:</p> <pre><code>mkdir -p ~/.config/vmware-vra-cli\ntouch ~/.config/vmware-vra-cli/config.yaml\n</code></pre>"},{"location":"getting-started/configuration/#invalid-yaml-syntax","title":"Invalid YAML Syntax","text":"<pre><code>ERROR: Invalid configuration file syntax\n</code></pre> <p>Solution: Validate your YAML syntax:</p> <pre><code>vra config validate\n</code></pre>"},{"location":"getting-started/configuration/#environment-variable-not-working","title":"Environment Variable Not Working","text":"<p>Solution: Ensure variables are exported and in the correct format:</p> <pre><code># Check current variables\nenv | grep VRA_\n\n# Export variables\nexport VRA_URL=\"https://vra.company.com\"\n</code></pre>"},{"location":"getting-started/configuration/#getting-help","title":"Getting Help","text":"<p>For configuration help:</p> <pre><code>vra config --help\nvra --help\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install VMware vRA CLI on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>System Requirements</p> <ul> <li>Python 3.10 or higher</li> <li>Network access to your VMware vRA 8 environment</li> <li>Valid vRA user credentials</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#option-1-install-with-pipx-recommended","title":"Option 1: Install with pipx (Recommended)","text":"<p>pipx is the recommended way to install Python CLI applications:</p> <pre><code># Install pipx if you haven't already\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n\n# Install VMware vRA CLI\npipx install vmware-vra-cli\n</code></pre>"},{"location":"getting-started/installation/#option-2-install-with-pip","title":"Option 2: Install with pip","text":"<pre><code>pip install vmware-vra-cli\n</code></pre>"},{"location":"getting-started/installation/#option-3-install-from-source","title":"Option 3: Install from source","text":"<p>For development or the latest features:</p> <pre><code># Clone the repository\ngit clone https://github.com/brun_s/vmware-vra-cli.git\ncd vmware-vra-cli\n\n# Install with uv (recommended)\nuv sync --extra dev\nuv run vra --help\n\n# Or install with pip\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Verify your installation:</p> <pre><code>vra --version\n</code></pre> <p>You should see output similar to:</p> <pre><code>VMware vRA CLI v0.1.0\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have the CLI installed, you can:</p> <ol> <li>Configure your environment - Set up your vRA connection</li> <li>Try the Quick Start guide - Create your first VM</li> <li>Read the User Guide - Learn about advanced features</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#python-version-error","title":"Python Version Error","text":"<pre><code>ERROR: Python 3.10 or higher is required\n</code></pre> <p>Solution: Upgrade your Python version or use a virtual environment with Python 3.10+.</p>"},{"location":"getting-started/installation/#permission-denied","title":"Permission Denied","text":"<pre><code>ERROR: Could not install packages due to an EnvironmentError: [Errno 13] Permission denied\n</code></pre> <p>Solution: Use <code>--user</code> flag or install in a virtual environment:</p> <pre><code>pip install --user vmware-vra-cli\n</code></pre>"},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<pre><code>vra: command not found\n</code></pre> <p>Solution: Ensure your PATH includes the Python scripts directory:</p> <pre><code># Add to your shell profile (.bashrc, .zshrc, etc.)\nexport PATH=\"$PATH:$HOME/.local/bin\"\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the GitHub Issues</li> <li>Create a new issue with:</li> <li>Your operating system</li> <li>Python version (<code>python --version</code>)</li> <li>Error message or unexpected behavior</li> <li>Steps to reproduce</li> </ol>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with VMware vRA CLI in just a few minutes! This guide will walk you through creating your first virtual machine using the CLI.</p>"},{"location":"getting-started/quick-start/#step-1-authentication","title":"Step 1: Authentication","text":"<p>First, authenticate with your vRA environment:</p> <pre><code>vra auth login\n</code></pre> <p>You'll be prompted for:</p> <ul> <li>Username: Your vRA username</li> <li>Password: Your vRA password (hidden input)</li> <li>URL: Your vRA server URL (e.g., <code>https://vra.company.com</code>)</li> <li>Tenant: Your vRA tenant (default: <code>vsphere.local</code>)</li> </ul> <p>Pro Tip</p> <p>Your credentials are securely stored in your system keyring for future use.</p> <p>Example:</p> <pre><code>$ vra auth login\nUsername: admin@vsphere.local\nPassword: ********\nvRA URL: https://vra.company.com\nTenant [vsphere.local]: \n\n\u2705 Authentication successful!\n\ud83d\udd11 Token saved to keyring\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-explore-available-resources","title":"Step 2: Explore Available Resources","text":""},{"location":"getting-started/quick-start/#list-vm-templates","title":"List VM Templates","text":"<p>See what VM templates are available:</p> <pre><code>vra vm templates\n</code></pre>"},{"location":"getting-started/quick-start/#list-projects","title":"List Projects","text":"<p>Check which projects you have access to:</p> <pre><code>vra project list\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-create-your-first-vm","title":"Step 3: Create Your First VM","text":"<p>Create a new virtual machine:</p> <pre><code>vra vm create \\\n  --template \"Ubuntu Server 20.04 LTS\" \\\n  --name \"my-first-vm\" \\\n  --project \"Development\" \\\n  --description \"My first VM created with vRA CLI\"\n</code></pre> <p>Command Breakdown</p> <ul> <li><code>--template</code>: The VM template to use</li> <li><code>--name</code>: Unique name for your VM</li> <li><code>--project</code>: Project to deploy the VM in</li> <li><code>--description</code>: Optional description</li> </ul>"},{"location":"getting-started/quick-start/#step-4-monitor-vm-creation","title":"Step 4: Monitor VM Creation","text":"<p>Check the status of your VM:</p> <pre><code>vra vm status my-first-vm\n</code></pre> <p>You can also watch the deployment in real-time:</p> <pre><code>vra vm watch my-first-vm\n</code></pre>"},{"location":"getting-started/quick-start/#step-5-manage-your-vm","title":"Step 5: Manage Your VM","text":"<p>Once your VM is ready, you can perform various operations:</p>"},{"location":"getting-started/quick-start/#get-vm-details","title":"Get VM Details","text":"<pre><code>vra vm show my-first-vm\n</code></pre>"},{"location":"getting-started/quick-start/#power-operations","title":"Power Operations","text":"<pre><code># Power on\nvra vm power-on my-first-vm\n\n# Power off\nvra vm power-off my-first-vm\n\n# Restart\nvra vm restart my-first-vm\n</code></pre>"},{"location":"getting-started/quick-start/#connect-to-vm","title":"Connect to VM","text":"<p>Get connection information:</p> <pre><code>vra vm connect my-first-vm\n</code></pre>"},{"location":"getting-started/quick-start/#step-6-clean-up","title":"Step 6: Clean Up","text":"<p>When you're done, delete the VM:</p> <pre><code>vra vm delete my-first-vm --confirm\n</code></pre>"},{"location":"getting-started/quick-start/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/quick-start/#batch-operations","title":"Batch Operations","text":"<p>Create multiple VMs at once:</p> <pre><code># Create 5 development VMs\nfor i in {1..5}; do\n  vra vm create \\\n    --template \"Ubuntu Server 20.04 LTS\" \\\n    --name \"dev-vm-$i\" \\\n    --project \"Development\"\ndone\n</code></pre>"},{"location":"getting-started/quick-start/#configuration-file","title":"Configuration File","text":"<p>For complex deployments, use a configuration file:</p> vm-config.yamlCommand <pre><code>name: \"web-server-001\"\ntemplate: \"Ubuntu Server 20.04 LTS\"\nproject: \"Production\"\ndescription: \"Web server for production environment\"\ncpu: 2\nmemory: 4096\ndisk: 50\nnetwork: \"Production-Network\"\ntags:\n  - environment: production\n  - role: web-server\n  - owner: ops-team\n</code></pre> <pre><code>vra vm create --config vm-config.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#interactive-mode","title":"Interactive Mode","text":"<p>Use interactive mode for guided VM creation:</p> <pre><code>vra vm create --interactive\n</code></pre> <p>This will prompt you through all the options step by step.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you've created your first VM, explore more features:</p> <ol> <li>Authentication Guide - Advanced authentication options</li> <li>VM Management - Complete VM lifecycle management  </li> <li>API Reference - Full command reference</li> <li>Configuration - Customize your CLI experience</li> </ol>"},{"location":"getting-started/quick-start/#quick-reference","title":"Quick Reference","text":""},{"location":"getting-started/quick-start/#essential-commands","title":"Essential Commands","text":"Command Description <code>vra auth login</code> Authenticate with vRA <code>vra vm templates</code> List available templates <code>vra vm create</code> Create a new VM <code>vra vm list</code> List your VMs <code>vra vm status &lt;name&gt;</code> Check VM status <code>vra vm delete &lt;name&gt;</code> Delete a VM <code>vra --help</code> Show help"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>Any command can show help with <code>--help</code>:</p> <pre><code>vra vm create --help\nvra auth --help\nvra --help\n</code></pre> <p>Congratulations! \ud83c\udf89</p> <p>You've successfully created and managed your first VM using VMware vRA CLI!</p>"},{"location":"user-guide/authentication/","title":"Authentication","text":"<p>VMware vRA CLI uses secure authentication methods to interact with your vRA environment. This guide covers all authentication options and best practices.</p>"},{"location":"user-guide/authentication/#authentication-methods","title":"Authentication Methods","text":""},{"location":"user-guide/authentication/#token-based-authentication-recommended","title":"Token-based Authentication (Recommended)","text":"<p>The CLI uses bearer tokens for API authentication, which are securely stored in your system keyring.</p> <pre><code># Authenticate and store token\nvra auth login\n</code></pre> <p>You'll be prompted for: - Username: Your vRA username (e.g., <code>admin@vsphere.local</code>) - Password: Your vRA password (hidden input) - URL: Your vRA server URL (e.g., <code>https://vra.company.com</code>) - Tenant: Your vRA tenant (default: <code>vsphere.local</code>)</p>"},{"location":"user-guide/authentication/#environment-variables","title":"Environment Variables","text":"<p>For automation and CI/CD scenarios:</p> <pre><code>export VRA_URL=\"https://vra.company.com\"\nexport VRA_TENANT=\"vsphere.local\"\nexport VRA_USERNAME=\"service-account@company.com\"\n# Note: Avoid setting passwords in environment variables\n</code></pre>"},{"location":"user-guide/authentication/#authentication-commands","title":"Authentication Commands","text":""},{"location":"user-guide/authentication/#login","title":"Login","text":"<pre><code># Interactive login\nvra auth login\n\n# Non-interactive with parameters\nvra auth login --username admin@vsphere.local --url https://vra.company.com\n\n# Login to specific tenant\nvra auth login --tenant prod.local\n</code></pre>"},{"location":"user-guide/authentication/#check-status","title":"Check Status","text":"<pre><code>vra auth status\n</code></pre> <p>Output: <pre><code>\u2705 Authenticated\n</code></pre></p>"},{"location":"user-guide/authentication/#logout","title":"Logout","text":"<pre><code>vra auth logout\n</code></pre> <p>This clears your stored authentication token.</p>"},{"location":"user-guide/authentication/#security-features","title":"Security Features","text":""},{"location":"user-guide/authentication/#secure-token-storage","title":"Secure Token Storage","text":"<p>Tokens are stored securely using your system's keyring:</p> <ul> <li>macOS: Keychain</li> <li>Windows: Credential Manager  </li> <li>Linux: Secret Service (GNOME Keyring, KWallet)</li> </ul>"},{"location":"user-guide/authentication/#token-expiration","title":"Token Expiration","text":"<p>Tokens have configurable expiration times:</p> <pre><code># Check token expiration (if supported)\nvra auth status --verbose\n</code></pre>"},{"location":"user-guide/authentication/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>By default, SSL verification is enabled:</p> <pre><code># For development with self-signed certificates\nexport VRA_VERIFY_SSL=\"false\"\n\n# Or use command line flag\nvra --no-verify-ssl catalog list\n</code></pre> <p>Production Security</p> <p>Never disable SSL verification in production environments.</p>"},{"location":"user-guide/authentication/#multi-environment-support","title":"Multi-Environment Support","text":""},{"location":"user-guide/authentication/#using-profiles","title":"Using Profiles","text":"<p>Manage multiple vRA environments:</p> <pre><code># Create profiles\nvra profile create production \\\n  --url https://vra-prod.company.com \\\n  --tenant prod.local\n\nvra profile create development \\\n  --url https://vra-dev.company.com \\\n  --tenant dev.local\n\n# Switch between profiles\nvra profile use production\nvra profile use development\n\n# List profiles\nvra profile list\n\n# Show current profile\nvra profile current\n</code></pre>"},{"location":"user-guide/authentication/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code># Production environment\nexport VRA_PROFILE=\"production\"\nexport VRA_URL=\"https://vra-prod.company.com\"\nexport VRA_TENANT=\"prod.local\"\n\n# Development environment\nexport VRA_PROFILE=\"development\"\nexport VRA_URL=\"https://vra-dev.company.com\"\nexport VRA_TENANT=\"dev.local\"\n</code></pre>"},{"location":"user-guide/authentication/#authentication-workflow","title":"Authentication Workflow","text":"<pre><code>sequenceDiagram\n    participant CLI\n    participant vRA API\n    participant Keyring\n\n    CLI-&gt;&gt;vRA API: POST /csp/gateway/am/api/login\n    vRA API-&gt;&gt;CLI: Bearer Token\n    CLI-&gt;&gt;Keyring: Store Token\n\n    Note over CLI,Keyring: Token stored securely\n\n    CLI-&gt;&gt;vRA API: API calls with Bearer Token\n    vRA API-&gt;&gt;CLI: API Responses</code></pre>"},{"location":"user-guide/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/authentication/#common-authentication-issues","title":"Common Authentication Issues","text":""},{"location":"user-guide/authentication/#invalid-credentials","title":"Invalid Credentials","text":"<pre><code>\u274c Authentication failed: 401 Unauthorized\n</code></pre> <p>Solutions: - Verify username and password - Check if account is locked - Confirm correct tenant</p>"},{"location":"user-guide/authentication/#ssl-certificate-issues","title":"SSL Certificate Issues","text":"<pre><code>\u274c Authentication failed: SSL: CERTIFICATE_VERIFY_FAILED\n</code></pre> <p>Solutions: <pre><code># For development only\nexport VRA_VERIFY_SSL=\"false\"\n\n# Or provide custom CA certificate\nexport VRA_CA_CERT=\"/path/to/ca-cert.pem\"\n</code></pre></p>"},{"location":"user-guide/authentication/#network-connectivity","title":"Network Connectivity","text":"<pre><code>\u274c Authentication failed: Connection timeout\n</code></pre> <p>Solutions: - Check network connectivity - Verify vRA URL is accessible - Check firewall rules</p>"},{"location":"user-guide/authentication/#token-storage-issues","title":"Token Storage Issues","text":"<pre><code>\u26a0\ufe0f Warning: Could not store token securely\n</code></pre> <p>Solutions: - Ensure keyring service is running - Check permissions - Install keyring dependencies</p>"},{"location":"user-guide/authentication/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"user-guide/authentication/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose logging:</p> <pre><code>vra --verbose auth login\n</code></pre>"},{"location":"user-guide/authentication/#manual-token-management","title":"Manual Token Management","text":"<p>If keyring is unavailable:</p> <pre><code># Get token manually and set as environment variable\nTOKEN=$(curl -X POST https://vra.company.com/csp/gateway/am/api/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"user\",\"password\":\"pass\"}' | jq -r '.access_token')\n\nexport VRA_TOKEN=\"$TOKEN\"\n</code></pre>"},{"location":"user-guide/authentication/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/authentication/#security","title":"Security","text":"<ol> <li>Use Service Accounts: For automation, create dedicated service accounts</li> <li>Token Rotation: Regularly rotate authentication tokens</li> <li>Environment Isolation: Use separate accounts for dev/prod environments</li> <li>Audit Logging: Monitor authentication events</li> </ol>"},{"location":"user-guide/authentication/#automation","title":"Automation","text":"<ol> <li>CI/CD Integration: Use environment variables in pipelines</li> <li>Secret Management: Store credentials in secure secret managers</li> <li>Token Caching: Leverage token storage for performance</li> </ol>"},{"location":"user-guide/authentication/#development","title":"Development","text":"<ol> <li>Profile Management: Use profiles for different environments</li> <li>SSL Configuration: Properly configure SSL for development</li> <li>Error Handling: Implement proper error handling in scripts</li> </ol>"},{"location":"user-guide/authentication/#api-reference","title":"API Reference","text":""},{"location":"user-guide/authentication/#authentication-endpoints","title":"Authentication Endpoints","text":"Endpoint Method Description <code>/csp/gateway/am/api/login</code> POST Authenticate and get token <code>/csp/gateway/am/api/logout</code> POST Invalidate token <code>/csp/gateway/am/api/userinfo</code> GET Get user information"},{"location":"user-guide/authentication/#token-format","title":"Token Format","text":"<p>Bearer tokens are JWT tokens with the following structure:</p> <pre><code>{\n  \"header\": {\n    \"alg\": \"RS256\",\n    \"typ\": \"JWT\"\n  },\n  \"payload\": {\n    \"sub\": \"user@company.com\",\n    \"iss\": \"https://vra.company.com\",\n    \"exp\": 1640995200,\n    \"iat\": 1640908800,\n    \"tenant\": \"vsphere.local\"\n  }\n}\n</code></pre> <p>For more advanced authentication scenarios, see the API Reference.</p>"},{"location":"user-guide/cli-reference/","title":"VMware vRA CLI Reference Guide","text":"<p>This comprehensive reference guide covers all available commands, options, and usage patterns for the VMware vRA CLI tool.</p>"},{"location":"user-guide/cli-reference/#global-options","title":"Global Options","text":"<p>All commands support these global options:</p> Option Description Default <code>--verbose</code>, <code>-v</code> Enable verbose output with HTTP request/response details <code>False</code> <code>--format</code> Output format: <code>table</code>, <code>json</code>, <code>yaml</code> <code>table</code> <code>--version</code> Show CLI version and exit - <code>--help</code> Show help message and exit -"},{"location":"user-guide/cli-reference/#global-option-examples","title":"Global Option Examples","text":"<pre><code># Enable verbose logging for troubleshooting\nvmware-vra --verbose catalog list\n\n# Get JSON output instead of table\nvmware-vra --format json deployment list\n\n# Show version information\nvmware-vra --version\n</code></pre>"},{"location":"user-guide/cli-reference/#authentication-commands-auth","title":"Authentication Commands (<code>auth</code>)","text":"<p>Manage authentication tokens and credentials.</p>"},{"location":"user-guide/cli-reference/#auth-login","title":"<code>auth login</code>","text":"<p>Authenticate to vRA using username and password.</p> <p>Syntax: <pre><code>vmware-vra auth login [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Description | Required | |--------|------|-------------|----------| | <code>--username</code> | TEXT | Username for vRA access | Yes | | <code>--password</code> | TEXT | Password for vRA access | Yes | | <code>--url</code> | TEXT | vRA server URL | No | | <code>--tenant</code> | TEXT | vRA tenant | No | | <code>--domain</code> | TEXT | Domain for multiple identity sources | No |</p> <p>Prompted if not provided *Uses configured default if available</p> <p>Examples: <pre><code># Interactive login (prompts for credentials)\nvmware-vra auth login\n\n# Login with specific parameters\nvmware-vra auth login \\\n    --username john.doe@company.com \\\n    --url https://vra.company.com \\\n    --tenant company.local\n\n# Login with specific domain for multiple identity sources\nvmware-vra auth login \\\n    --username administrator \\\n    --domain vsphere.local \\\n    --url https://vra.company.com\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Authentication successful!\n\ud83d\udd11 Tokens saved securely\n\ud83d\udcbe Configuration saved: https://vra.company.com\n\ud83c\udfe2 Tenant: company.local\n\ud83c\udf10 Domain: vsphere.local\n</code></pre></p>"},{"location":"user-guide/cli-reference/#auth-logout","title":"<code>auth logout</code>","text":"<p>Clear stored authentication tokens.</p> <p>Syntax: <pre><code>vmware-vra auth logout\n</code></pre></p> <p>Example: <pre><code>vmware-vra auth logout\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Logged out successfully\n</code></pre></p>"},{"location":"user-guide/cli-reference/#auth-status","title":"<code>auth status</code>","text":"<p>Check current authentication status.</p> <p>Syntax: <pre><code>vmware-vra auth status\n</code></pre></p> <p>Example: <pre><code>vmware-vra auth status\n</code></pre></p> <p>Sample Outputs: <pre><code># Fully authenticated\n\u2705 Authenticated (Access token available)\n\ud83d\udd04 Refresh token available for automatic renewal\n\n# Refresh token only\n\u26a0\ufe0f Only refresh token available - will obtain new access token on next use\n\n# Not authenticated\n\u274c Not authenticated\n</code></pre></p>"},{"location":"user-guide/cli-reference/#auth-refresh","title":"<code>auth refresh</code>","text":"<p>Manually refresh the access token.</p> <p>Syntax: <pre><code>vmware-vra auth refresh\n</code></pre></p> <p>Example: <pre><code>vmware-vra auth refresh\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Access token refreshed successfully\n</code></pre></p>"},{"location":"user-guide/cli-reference/#configuration-commands-config","title":"Configuration Commands (<code>config</code>)","text":"<p>Manage CLI configuration settings.</p>"},{"location":"user-guide/cli-reference/#config-show","title":"<code>config show</code>","text":"<p>Display current configuration values.</p> <p>Syntax: <pre><code>vmware-vra config show\n</code></pre></p> <p>Example: <pre><code>vmware-vra config show\n</code></pre></p> <p>Sample Output (Table Format): <pre><code>                   VMware vRA CLI Configuration\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Setting       \u2503 Value                                   \u2503 Source                          \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Api Url       \u2502 https://vra.company.com                 \u2502 Config file                     \u2502\n\u2502 Tenant        \u2502 company.local                           \u2502 Config file                     \u2502\n\u2502 Domain        \u2502 vsphere.local                           \u2502 Config file                     \u2502\n\u2502 Verify Ssl    \u2502 True                                    \u2502 Default                         \u2502\n\u2502 Timeout       \u2502 30                                      \u2502 Default                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nConfig file: /Users/username/.config/vmware-vra-cli/config.json\n</code></pre></p>"},{"location":"user-guide/cli-reference/#config-set","title":"<code>config set</code>","text":"<p>Set a configuration value.</p> <p>Syntax: <pre><code>vmware-vra config set KEY VALUE\n</code></pre></p> <p>Available Keys: - <code>api_url</code>: vRA server URL - <code>tenant</code>: vRA tenant identifier - <code>domain</code>: Authentication domain - <code>verify_ssl</code>: SSL verification (true/false) - <code>timeout</code>: Request timeout in seconds</p> <p>Examples: <pre><code># Set vRA server URL\nvmware-vra config set api_url https://vra.company.com\n\n# Set tenant\nvmware-vra config set tenant company.local\n\n# Disable SSL verification (not recommended for production)\nvmware-vra config set verify_ssl false\n\n# Set timeout\nvmware-vra config set timeout 60\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Configuration updated: api_url = https://vra.company.com\nSaved to: /Users/username/.config/vmware-vra-cli/config.json\n</code></pre></p>"},{"location":"user-guide/cli-reference/#config-reset","title":"<code>config reset</code>","text":"<p>Reset configuration to defaults.</p> <p>Syntax: <pre><code>vmware-vra config reset [OPTIONS]\n</code></pre></p> <p>Options: | Option | Description | |--------|-------------| | <code>--confirm</code> | Skip confirmation prompt |</p> <p>Examples: <pre><code># Reset with confirmation prompt\nvmware-vra config reset\n\n# Reset without confirmation\nvmware-vra config reset --confirm\n</code></pre></p>"},{"location":"user-guide/cli-reference/#config-edit","title":"<code>config edit</code>","text":"<p>Edit configuration file in default editor.</p> <p>Syntax: <pre><code>vmware-vra config edit\n</code></pre></p> <p>Example: <pre><code>vmware-vra config edit\n</code></pre></p>"},{"location":"user-guide/cli-reference/#service-catalog-commands-catalog","title":"Service Catalog Commands (<code>catalog</code>)","text":"<p>Manage catalog items and requests.</p>"},{"location":"user-guide/cli-reference/#catalog-list","title":"<code>catalog list</code>","text":"<p>List available catalog items.</p> <p>Syntax: <pre><code>vmware-vra catalog list [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter by project ID | | <code>--page-size</code> | INT | 100 | Items per page (max: 2000) | | <code>--first-page-only</code> | FLAG | False | Fetch only first page |</p> <p>Examples: <pre><code># List all catalog items\nvmware-vra catalog list\n\n# List items for specific project\nvmware-vra catalog list --project dev-project-123\n\n# List first page only (faster for large catalogs)\nvmware-vra catalog list --first-page-only\n\n# Get JSON output\nvmware-vra --format json catalog list\n</code></pre></p> <p>Sample Output (Table): <pre><code>                     Service Catalog Items (156 items)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID                                     \u2503 Name                     \u2503 Type                \u2503 Status    \u2503 Version   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 blueprint-ubuntu-server-01             \u2502 Ubuntu Server Template  \u2502 blueprint           \u2502 PUBLISHED \u2502 1.2       \u2502\n\u2502 blueprint-windows-server-2019          \u2502 Windows Server 2019     \u2502 blueprint           \u2502 PUBLISHED \u2502 2.1       \u2502\n\u2502 workflow-create-user-account           \u2502 Create User Account     \u2502 workflow            \u2502 PUBLISHED \u2502 1.0       \u2502\n\u2502 blueprint-docker-container             \u2502 Docker Container        \u2502 blueprint           \u2502 PUBLISHED \u2502 3.0       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"user-guide/cli-reference/#catalog-show","title":"<code>catalog show</code>","text":"<p>Show details of a specific catalog item.</p> <p>Syntax: <pre><code>vmware-vra catalog show ITEM_ID\n</code></pre></p> <p>Examples: <pre><code># Show catalog item details\nvmware-vra catalog show blueprint-ubuntu-server-01\n\n# Get JSON output\nvmware-vra --format json catalog show blueprint-ubuntu-server-01\n</code></pre></p> <p>Sample Output (Table): <pre><code>                        Catalog Item: Ubuntu Server Template\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Property    \u2503 Value                                                                                   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 ID          \u2502 blueprint-ubuntu-server-01                                                              \u2502\n\u2502 Name        \u2502 Ubuntu Server Template                                                                  \u2502\n\u2502 Type        \u2502 blueprint                                                                               \u2502\n\u2502 Status      \u2502 PUBLISHED                                                                               \u2502\n\u2502 Version     \u2502 1.2                                                                                     \u2502\n\u2502 Description \u2502 Standard Ubuntu 20.04 server template with common configurations                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"user-guide/cli-reference/#catalog-schema","title":"<code>catalog schema</code>","text":"<p>Show request schema for a catalog item.</p> <p>Syntax: <pre><code>vmware-vra catalog schema ITEM_ID\n</code></pre></p> <p>Examples: <pre><code># Show schema for catalog item\nvmware-vra catalog schema blueprint-ubuntu-server-01\n\n# Always outputs JSON regardless of --format setting\nvmware-vra catalog schema blueprint-ubuntu-server-01\n</code></pre></p> <p>Sample Output: <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"hostname\": {\n      \"type\": \"string\",\n      \"title\": \"Hostname\",\n      \"description\": \"Server hostname\"\n    },\n    \"cpu\": {\n      \"type\": \"integer\",\n      \"title\": \"CPU Count\",\n      \"default\": 2,\n      \"minimum\": 1,\n      \"maximum\": 8\n    },\n    \"memory\": {\n      \"type\": \"string\",\n      \"title\": \"Memory Size\",\n      \"default\": \"4GB\",\n      \"enum\": [\"2GB\", \"4GB\", \"8GB\", \"16GB\"]\n    }\n  },\n  \"required\": [\"hostname\"]\n}\n</code></pre></p>"},{"location":"user-guide/cli-reference/#catalog-request","title":"<code>catalog request</code>","text":"<p>Request a catalog item deployment.</p> <p>Syntax: <pre><code>vmware-vra catalog request ITEM_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Description | Required | |--------|------|-------------|----------| | <code>--inputs</code> | TEXT | Input parameters as JSON string | No | | <code>--inputs-file</code> | PATH | Input parameters from YAML/JSON file | No | | <code>--project</code> | TEXT | Project ID for the request | Yes | | <code>--reason</code> | TEXT | Reason for the request | No | | <code>--name</code> | TEXT | Deployment name | No |</p> <p>Examples: <pre><code># Request with inline JSON inputs\nvmware-vra catalog request blueprint-ubuntu-server-01 \\\n    --inputs '{\"hostname\": \"web-server-01\", \"cpu\": 4, \"memory\": \"8GB\"}' \\\n    --project dev-project-123 \\\n    --reason \"Development web server\"\n\n# Request with inputs from file\nvmware-vra catalog request blueprint-ubuntu-server-01 \\\n    --inputs-file server-config.yaml \\\n    --project dev-project-123 \\\n    --name \"web-server-01\"\n\n# Simple request with minimal parameters\nvmware-vra catalog request blueprint-ubuntu-server-01 \\\n    --project dev-project-123\n</code></pre></p> <p>Sample inputs-file (server-config.yaml): <pre><code>hostname: web-server-01\ncpu: 4\nmemory: \"8GB\"\ndisk_size: \"100GB\"\nnetwork: \"corporate-dmz\"\ninstall_packages:\n  - nginx\n  - docker\n  - git\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Request submitted successfully!\nDeployment ID: deployment-12345-abcdef\nRequest ID: request-67890-ghijkl\n</code></pre></p>"},{"location":"user-guide/cli-reference/#deployment-commands-deployment","title":"Deployment Commands (<code>deployment</code>)","text":"<p>Manage and export deployments.</p>"},{"location":"user-guide/cli-reference/#deployment-list","title":"<code>deployment list</code>","text":"<p>List deployments.</p> <p>Syntax: <pre><code>vmware-vra deployment list [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter by project ID | | <code>--status</code> | TEXT | None | Filter by status | | <code>--page-size</code> | INT | 100 | Items per page (max: 2000) | | <code>--first-page-only</code> | FLAG | False | Fetch only first page |</p> <p>Examples: <pre><code># List all deployments\nvmware-vra deployment list\n\n# List deployments for specific project\nvmware-vra deployment list --project dev-project-123\n\n# List only successful deployments\nvmware-vra deployment list --status CREATE_SUCCESSFUL\n\n# First page only for large environments\nvmware-vra deployment list --first-page-only\n</code></pre></p> <p>Sample Output: <pre><code>                               Deployments (89 items)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID                                     \u2503 Name                   \u2503 Status              \u2503 Project           \u2503 Created                       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 deployment-12345-abcdef                \u2502 web-server-01          \u2502 CREATE_SUCCESSFUL   \u2502 dev-project-123   \u2502 2024-01-15T09:30:00.000Z      \u2502\n\u2502 deployment-67890-ghijkl                \u2502 database-server-01     \u2502 CREATE_SUCCESSFUL   \u2502 dev-project-123   \u2502 2024-01-15T10:15:00.000Z      \u2502\n\u2502 deployment-13579-mnopqr                \u2502 load-balancer-01       \u2502 CREATE_INPROGRESS   \u2502 prod-project-456  \u2502 2024-01-15T11:00:00.000Z      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"user-guide/cli-reference/#deployment-show","title":"<code>deployment show</code>","text":"<p>Show deployment details.</p> <p>Syntax: <pre><code>vmware-vra deployment show DEPLOYMENT_ID\n</code></pre></p> <p>Examples: <pre><code># Show deployment details\nvmware-vra deployment show deployment-12345-abcdef\n\n# Get YAML output\nvmware-vra --format yaml deployment show deployment-12345-abcdef\n</code></pre></p> <p>Sample Output (Table): <pre><code>                            Deployment: web-server-01\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Property           \u2503 Value                                                                   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id                 \u2502 deployment-12345-abcdef                                                 \u2502\n\u2502 name               \u2502 web-server-01                                                           \u2502\n\u2502 status             \u2502 CREATE_SUCCESSFUL                                                       \u2502\n\u2502 projectId          \u2502 dev-project-123                                                         \u2502\n\u2502 catalogItemId      \u2502 blueprint-ubuntu-server-01                                              \u2502\n\u2502 createdAt          \u2502 2024-01-15T09:30:00.000Z                                                \u2502\n\u2502 completedAt        \u2502 2024-01-15T09:45:00.000Z                                                \u2502\n\u2502 inputs             \u2502 {\"hostname\": \"web-server-01\", \"cpu\": 4, \"memory\": \"8GB\"}               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"user-guide/cli-reference/#deployment-delete","title":"<code>deployment delete</code>","text":"<p>Delete a deployment.</p> <p>Syntax: <pre><code>vmware-vra deployment delete DEPLOYMENT_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Description | |--------|-------------| | <code>--confirm</code> | Skip confirmation prompt |</p> <p>Examples: <pre><code># Delete with confirmation prompt\nvmware-vra deployment delete deployment-12345-abcdef\n\n# Delete without confirmation\nvmware-vra deployment delete deployment-12345-abcdef --confirm\n</code></pre></p> <p>Sample Output: <pre><code>\u2705 Deployment deployment-12345-abcdef deletion initiated\n</code></pre></p>"},{"location":"user-guide/cli-reference/#deployment-resources","title":"<code>deployment resources</code>","text":"<p>Show deployment resources.</p> <p>Syntax: <pre><code>vmware-vra deployment resources DEPLOYMENT_ID\n</code></pre></p> <p>Examples: <pre><code># Show deployment resources\nvmware-vra deployment resources deployment-12345-abcdef\n\n# Get JSON output\nvmware-vra --format json deployment resources deployment-12345-abcdef\n</code></pre></p> <p>Sample Output: <pre><code>                      Resources for Deployment deployment-12345-abcdef\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID                                     \u2503 Name                   \u2503 Type                     \u2503 Status            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 vm-12345-abcdef                        \u2502 web-server-01          \u2502 Cloud.vSphere.Machine    \u2502 SUCCESS           \u2502\n\u2502 disk-67890-ghijkl                      \u2502 web-server-01-disk1    \u2502 Cloud.vSphere.Disk       \u2502 SUCCESS           \u2502\n\u2502 nic-13579-mnopqr                       \u2502 web-server-01-nic0     \u2502 Cloud.vSphere.Network    \u2502 SUCCESS           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"user-guide/cli-reference/#deployment-export-all","title":"<code>deployment export-all</code>","text":"<p>Export all deployments grouped by catalog item.</p> <p>Syntax: <pre><code>vmware-vra deployment export-all [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter deployments by project ID | | <code>--output-dir</code> | TEXT | <code>./exports</code> | Directory to save export files | | <code>--include-resources</code> | FLAG | False | Include resource details (slower) | | <code>--no-unsynced</code> | FLAG | False | Exclude unsynced deployments |</p> <p>For comprehensive details and examples, see the Deployment Export Guide.</p> <p>Quick Examples: <pre><code># Basic export\nvmware-vra deployment export-all\n\n# Export with resource details\nvmware-vra deployment export-all --include-resources\n\n# Export specific project\nvmware-vra deployment export-all --project dev-project-123\n\n# Export to custom directory\nvmware-vra deployment export-all --output-dir /backup/vra-exports\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-management-commands-tag","title":"Tag Management Commands (<code>tag</code>)","text":"<p>Manage tags and resource tagging.</p>"},{"location":"user-guide/cli-reference/#tag-list","title":"<code>tag list</code>","text":"<p>List available tags.</p> <p>Syntax: <pre><code>vmware-vra tag list [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--search</code> | TEXT | None | Search term to filter tags | | <code>--page-size</code> | INT | 100 | Items per page (max: 2000) | | <code>--first-page-only</code> | FLAG | False | Fetch only first page |</p> <p>Examples: <pre><code># List all tags\nvmware-vra tag list\n\n# Search for specific tags\nvmware-vra tag list --search environment\n\n# First page only\nvmware-vra tag list --first-page-only\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-show","title":"<code>tag show</code>","text":"<p>Show details of a specific tag.</p> <p>Syntax: <pre><code>vmware-vra tag show TAG_ID\n</code></pre></p> <p>Example: <pre><code>vmware-vra tag show tag-12345-abcdef\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-create","title":"<code>tag create</code>","text":"<p>Create a new tag.</p> <p>Syntax: <pre><code>vmware-vra tag create KEY [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Description | |--------|------|-------------| | <code>--value</code> | TEXT | Tag value (optional) | | <code>--description</code> | TEXT | Tag description (optional) |</p> <p>Examples: <pre><code># Create simple tag\nvmware-vra tag create environment --value production\n\n# Create tag with description\nvmware-vra tag create cost-center \\\n    --value \"IT-Infrastructure\" \\\n    --description \"Cost center for IT infrastructure resources\"\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-update","title":"<code>tag update</code>","text":"<p>Update an existing tag.</p> <p>Syntax: <pre><code>vmware-vra tag update TAG_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Description | |--------|------|-------------| | <code>--key</code> | TEXT | New tag key | | <code>--value</code> | TEXT | New tag value | | <code>--description</code> | TEXT | New tag description |</p> <p>Example: <pre><code>vmware-vra tag update tag-12345-abcdef \\\n    --value \"development\" \\\n    --description \"Development environment resources\"\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-delete","title":"<code>tag delete</code>","text":"<p>Delete a tag.</p> <p>Syntax: <pre><code>vmware-vra tag delete TAG_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Description | |--------|-------------| | <code>--confirm</code> | Skip confirmation prompt |</p> <p>Example: <pre><code>vmware-vra tag delete tag-12345-abcdef --confirm\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-assign","title":"<code>tag assign</code>","text":"<p>Assign a tag to a resource.</p> <p>Syntax: <pre><code>vmware-vra tag assign RESOURCE_ID TAG_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--resource-type</code> | CHOICE | <code>deployment</code> | Resource type: <code>deployment</code> or <code>catalog-item</code> |</p> <p>Examples: <pre><code># Assign tag to deployment\nvmware-vra tag assign deployment-12345-abcdef tag-67890-ghijkl\n\n# Assign tag to catalog item\nvmware-vra tag assign blueprint-ubuntu-server-01 tag-environment-prod \\\n    --resource-type catalog-item\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-remove","title":"<code>tag remove</code>","text":"<p>Remove a tag from a resource.</p> <p>Syntax: <pre><code>vmware-vra tag remove RESOURCE_ID TAG_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--resource-type</code> | CHOICE | <code>deployment</code> | Resource type: <code>deployment</code> or <code>catalog-item</code> | | <code>--confirm</code> | FLAG | False | Skip confirmation prompt |</p> <p>Example: <pre><code>vmware-vra tag remove deployment-12345-abcdef tag-67890-ghijkl --confirm\n</code></pre></p>"},{"location":"user-guide/cli-reference/#tag-resource-tags","title":"<code>tag resource-tags</code>","text":"<p>Show tags assigned to a resource.</p> <p>Syntax: <pre><code>vmware-vra tag resource-tags RESOURCE_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--resource-type</code> | CHOICE | <code>deployment</code> | Resource type: <code>deployment</code> or <code>catalog-item</code> |</p> <p>Example: <pre><code>vmware-vra tag resource-tags deployment-12345-abcdef\n</code></pre></p>"},{"location":"user-guide/cli-reference/#report-commands-report","title":"Report Commands (<code>report</code>)","text":"<p>Generate analytics and reports.</p>"},{"location":"user-guide/cli-reference/#report-activity-timeline","title":"<code>report activity-timeline</code>","text":"<p>Generate deployment activity timeline.</p> <p>Syntax: <pre><code>vmware-vra report activity-timeline [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter by project ID | | <code>--days-back</code> | INT | 30 | Days back for timeline | | <code>--group-by</code> | CHOICE | <code>day</code> | Group by: <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code> | | <code>--statuses</code> | TEXT | All | Comma-separated status list |</p> <p>Examples: <pre><code># 30-day activity timeline\nvmware-vra report activity-timeline\n\n# Weekly activity for 90 days\nvmware-vra report activity-timeline --days-back 90 --group-by week\n\n# Only successful deployments\nvmware-vra report activity-timeline \\\n    --statuses \"CREATE_SUCCESSFUL,UPDATE_SUCCESSFUL\"\n</code></pre></p>"},{"location":"user-guide/cli-reference/#report-catalog-usage","title":"<code>report catalog-usage</code>","text":"<p>Generate catalog usage report.</p> <p>Syntax: <pre><code>vmware-vra report catalog-usage [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter by project ID | | <code>--include-zero</code> | FLAG | False | Include items with zero deployments | | <code>--sort-by</code> | CHOICE | <code>deployments</code> | Sort by: <code>deployments</code>, <code>resources</code>, <code>name</code> | | <code>--detailed-resources</code> | FLAG | False | Fetch exact resource counts |</p> <p>Examples: <pre><code># Basic usage report\nvmware-vra report catalog-usage\n\n# Include all catalog items\nvmware-vra report catalog-usage --include-zero --sort-by name\n\n# Detailed resource counting\nvmware-vra report catalog-usage --detailed-resources\n</code></pre></p>"},{"location":"user-guide/cli-reference/#report-unsync","title":"<code>report unsync</code>","text":"<p>Generate unsynced deployments report.</p> <p>Syntax: <pre><code>vmware-vra report unsync [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--project</code> | TEXT | None | Filter by project ID | | <code>--detailed-resources</code> | FLAG | False | Fetch exact resource counts | | <code>--show-details</code> | FLAG | False | Show detailed analysis | | <code>--reason-filter</code> | TEXT | None | Filter by specific reason |</p> <p>Examples: <pre><code># Basic unsync report\nvmware-vra report unsync\n\n# Detailed analysis\nvmware-vra report unsync --show-details\n\n# Filter by specific reason\nvmware-vra report unsync --reason-filter catalog_item_deleted\n</code></pre></p>"},{"location":"user-guide/cli-reference/#workflow-commands-workflow","title":"Workflow Commands (<code>workflow</code>)","text":"<p>Manage and execute workflows.</p>"},{"location":"user-guide/cli-reference/#workflow-list","title":"<code>workflow list</code>","text":"<p>List available workflows.</p> <p>Syntax: <pre><code>vmware-vra workflow list [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Default | Description | |--------|------|---------|-------------| | <code>--page-size</code> | INT | 100 | Items per page (max: 2000) | | <code>--first-page-only</code> | FLAG | False | Fetch only first page |</p> <p>Example: <pre><code>vmware-vra workflow list\n</code></pre></p>"},{"location":"user-guide/cli-reference/#workflow-run","title":"<code>workflow run</code>","text":"<p>Execute a workflow.</p> <p>Syntax: <pre><code>vmware-vra workflow run WORKFLOW_ID [OPTIONS]\n</code></pre></p> <p>Options: | Option | Type | Description | |--------|------|-------------| | <code>--inputs</code> | TEXT | Input parameters as JSON string | | <code>--inputs-file</code> | PATH | Input parameters from YAML/JSON file |</p> <p>Examples: <pre><code># Run workflow with inline inputs\nvmware-vra workflow run create-user-workflow \\\n    --inputs '{\"username\": \"john.doe\", \"department\": \"IT\"}'\n\n# Run workflow with inputs file\nvmware-vra workflow run create-user-workflow \\\n    --inputs-file user-inputs.yaml\n</code></pre></p>"},{"location":"user-guide/cli-reference/#output-formats","title":"Output Formats","text":"<p>All list and show commands support three output formats:</p>"},{"location":"user-guide/cli-reference/#table-format-default","title":"Table Format (Default)","text":"<p>Human-readable tables with aligned columns and formatting.</p> <pre><code>vmware-vra catalog list\n</code></pre>"},{"location":"user-guide/cli-reference/#json-format","title":"JSON Format","text":"<p>Machine-readable JSON for scripting and automation.</p> <pre><code>vmware-vra --format json catalog list\n</code></pre>"},{"location":"user-guide/cli-reference/#yaml-format","title":"YAML Format","text":"<p>Human-readable YAML format.</p> <pre><code>vmware-vra --format yaml catalog list\n</code></pre>"},{"location":"user-guide/cli-reference/#environment-variables","title":"Environment Variables","text":"<p>Override configuration using environment variables:</p> Variable Description Example <code>VRA_URL</code> vRA server URL <code>https://vra.company.com</code> <code>VRA_TENANT</code> vRA tenant <code>company.local</code> <code>VRA_DOMAIN</code> Authentication domain <code>vsphere.local</code> <code>VRA_VERIFY_SSL</code> SSL verification <code>true</code> or <code>false</code> <code>VRA_TIMEOUT</code> Request timeout <code>60</code> <p>Example: <pre><code>export VRA_URL=\"https://vra-dev.company.com\"\nexport VRA_TENANT=\"dev.company.local\"\nvmware-vra catalog list\n</code></pre></p>"},{"location":"user-guide/cli-reference/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"user-guide/cli-reference/#automation-scripts","title":"Automation Scripts","text":"<pre><code>#!/bin/bash\nset -e\n\n# Authenticate\nvmware-vra auth login \\\n    --username \"$VRA_USERNAME\" \\\n    --password \"$VRA_PASSWORD\" \\\n    --url \"$VRA_URL\"\n\n# Deploy infrastructure\nDEPLOYMENT_ID=$(vmware-vra catalog request blueprint-web-app \\\n    --project \"$PROJECT_ID\" \\\n    --inputs-file webapp-config.yaml \\\n    --format json | jq -r '.deploymentId')\n\necho \"Deployment created: $DEPLOYMENT_ID\"\n\n# Wait for deployment completion (custom logic)\nwhile true; do\n    STATUS=$(vmware-vra deployment show \"$DEPLOYMENT_ID\" --format json | jq -r '.status')\n    if [[ \"$STATUS\" == \"CREATE_SUCCESSFUL\" ]]; then\n        echo \"Deployment completed successfully\"\n        break\n    elif [[ \"$STATUS\" == \"CREATE_FAILED\" ]]; then\n        echo \"Deployment failed\"\n        exit 1\n    fi\n    sleep 30\ndone\n</code></pre>"},{"location":"user-guide/cli-reference/#batch-operations","title":"Batch Operations","text":"<pre><code>#!/bin/bash\n# Tag multiple deployments\n\nDEPLOYMENTS=$(vmware-vra deployment list --format json | jq -r '.[].id')\nTAG_ID=\"tag-environment-prod\"\n\nfor deployment in $DEPLOYMENTS; do\n    echo \"Tagging deployment: $deployment\"\n    vmware-vra tag assign \"$deployment\" \"$TAG_ID\" --confirm\ndone\n</code></pre>"},{"location":"user-guide/cli-reference/#data-export-pipeline","title":"Data Export Pipeline","text":"<pre><code>#!/bin/bash\n# Complete data export and analysis\n\nEXPORT_DIR=\"/backup/vra/$(date +%Y-%m-%d)\"\nmkdir -p \"$EXPORT_DIR\"\n\n# Export deployments\nvmware-vra deployment export-all \\\n    --output-dir \"$EXPORT_DIR\" \\\n    --include-resources\n\n# Generate reports\nvmware-vra report catalog-usage --format json &gt; \"$EXPORT_DIR/catalog-usage.json\"\nvmware-vra report unsync --format json &gt; \"$EXPORT_DIR/unsync-report.json\"\nvmware-vra report activity-timeline --days-back 90 --format json &gt; \"$EXPORT_DIR/activity-timeline.json\"\n\n# Create summary\necho \"Export completed: $EXPORT_DIR\"\necho \"Files created:\"\nls -la \"$EXPORT_DIR\"\n</code></pre> <p>This comprehensive CLI reference provides complete coverage of all available commands, options, and usage patterns for the VMware vRA CLI tool.</p>"},{"location":"user-guide/deployment-export/","title":"Deployment Export Guide","text":"<p>The VMware vRA CLI provides powerful deployment export capabilities through the <code>deployment export-all</code> command. This comprehensive guide covers all aspects of exporting, organizing, and analyzing your vRA deployments.</p>"},{"location":"user-guide/deployment-export/#overview","title":"Overview","text":"<p>The <code>deployment export-all</code> command fetches all deployments from your vRA environment and groups them by their associated catalog items, exporting each group to separate JSON files. This is invaluable for:</p> <ul> <li>Backup and Recovery: Create comprehensive backups of your deployment configurations</li> <li>Migration Planning: Analyze deployment patterns before environment migrations  </li> <li>Audit and Compliance: Generate detailed reports of all deployments and their relationships</li> <li>Analytics: Understand usage patterns and catalog item adoption</li> <li>Troubleshooting: Investigate unsynced deployments and catalog item relationships</li> </ul>"},{"location":"user-guide/deployment-export/#command-syntax","title":"Command Syntax","text":"<pre><code>vmware-vra deployment export-all [OPTIONS]\n</code></pre>"},{"location":"user-guide/deployment-export/#available-options","title":"Available Options","text":"Option Type Default Description <code>--project</code> TEXT None Filter deployments by specific project ID <code>--output-dir</code> TEXT <code>./exports</code> Directory to save export files <code>--include-resources</code> FLAG False Include detailed resource information (slower) <code>--no-unsynced</code> FLAG False Exclude deployments not linked to catalog items <code>--help</code> FLAG - Show command help and exit"},{"location":"user-guide/deployment-export/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"user-guide/deployment-export/#1-simple-export-default-settings","title":"1. Simple Export (Default Settings)","text":"<p>Export all deployments with default settings:</p> <pre><code>vmware-vra deployment export-all\n</code></pre> <p>Sample Output: <pre><code>\u2705 Export completed successfully!\nOutput directory: ./exports\nFiles created: 12\n\nExport Statistics:\n  Total deployments: 156\n  Synced deployments: 142\n  Unsynced deployments: 14\n  Catalog items with deployments: 8\n  Total catalog items: 23\n\nExported Files:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Filename                               \u2503 Catalog Item             \u2503 Deployments \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Ubuntu_Server_Template_abc123.json    \u2502 Ubuntu Server Template  \u2502          45 \u2502\n\u2502 Windows_Server_2019_def456.json       \u2502 Windows Server 2019     \u2502          32 \u2502\n\u2502 Docker_Container_ghi789.json          \u2502 Docker Container        \u2502          28 \u2502\n\u2502 MySQL_Database_jkl012.json            \u2502 MySQL Database          \u2502          19 \u2502\n\u2502 Load_Balancer_mno345.json             \u2502 Load Balancer           \u2502          12 \u2502\n\u2502 Storage_Volume_pqr678.json            \u2502 Storage Volume          \u2502           4 \u2502\n\u2502 Network_Segment_stu901.json           \u2502 Network Segment         \u2502           2 \u2502\n\u2502 unsynced_deployments.json             \u2502 Unsynced Deployments    \u2502          14 \u2502\n\u2502 export_summary.json                   \u2502 Export Summary          \u2502           - \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2139\ufe0f  14 unsynced deployments were included in unsynced_deployments.json\n\n\ud83d\udca1 View export_summary.json for detailed export information\n</code></pre></p>"},{"location":"user-guide/deployment-export/#2-project-specific-export","title":"2. Project-Specific Export","text":"<p>Export deployments for a specific project:</p> <pre><code>vmware-vra deployment export-all --project \"development-env-123\"\n</code></pre> <p>Sample Output: <pre><code>\u2705 Export completed successfully!\nOutput directory: ./exports\nFiles created: 6\n\nExport Statistics:\n  Total deployments: 43\n  Synced deployments: 41\n  Unsynced deployments: 2\n  Catalog items with deployments: 4\n  Total catalog items: 23\n</code></pre></p>"},{"location":"user-guide/deployment-export/#3-export-with-resource-details","title":"3. Export with Resource Details","text":"<p>Include detailed resource information for each deployment:</p> <pre><code>vmware-vra deployment export-all --include-resources\n</code></pre> <p>Sample Output: <pre><code>Exporting deployments grouped by catalog item (including resources)...\n\n\u2705 Export completed successfully!\nOutput directory: ./exports\nFiles created: 12\n\n\u2139\ufe0f  Resource details included - this may have taken longer to complete\n</code></pre></p>"},{"location":"user-guide/deployment-export/#4-custom-output-directory","title":"4. Custom Output Directory","text":"<p>Export to a specific directory:</p> <pre><code>vmware-vra deployment export-all --output-dir \"/backup/vra-exports/$(date +%Y-%m-%d)\"\n</code></pre>"},{"location":"user-guide/deployment-export/#5-exclude-unsynced-deployments","title":"5. Exclude Unsynced Deployments","text":"<p>Export only deployments that are properly linked to catalog items:</p> <pre><code>vmware-vra deployment export-all --no-unsynced\n</code></pre> <p>Sample Output: <pre><code>\u2705 Export completed successfully!\nOutput directory: ./exports\nFiles created: 9\n\n\u2139\ufe0f  14 unsynced deployments were excluded (use without --no-unsynced to include them)\n</code></pre></p>"},{"location":"user-guide/deployment-export/#advanced-usage-examples","title":"Advanced Usage Examples","text":""},{"location":"user-guide/deployment-export/#6-comprehensive-backup-script","title":"6. Comprehensive Backup Script","text":"<p>Create a complete backup with timestamps:</p> <pre><code>#!/bin/bash\nBACKUP_DIR=\"/backup/vra/$(date +%Y-%m-%d_%H-%M-%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\necho \"Starting vRA deployment export to $BACKUP_DIR...\"\nvmware-vra deployment export-all \\\n    --output-dir \"$BACKUP_DIR\" \\\n    --include-resources\n\necho \"Export completed. Backup stored in: $BACKUP_DIR\"\nls -la \"$BACKUP_DIR\"\n</code></pre>"},{"location":"user-guide/deployment-export/#7-multi-project-export","title":"7. Multi-Project Export","text":"<p>Export each project separately:</p> <pre><code>#!/bin/bash\nPROJECTS=(\"dev-project-123\" \"staging-project-456\" \"prod-project-789\")\n\nfor project in \"${PROJECTS[@]}\"; do\n    echo \"Exporting project: $project\"\n    vmware-vra deployment export-all \\\n        --project \"$project\" \\\n        --output-dir \"./exports/${project}\" \\\n        --include-resources\ndone\n</code></pre>"},{"location":"user-guide/deployment-export/#output-file-structure","title":"Output File Structure","text":"<p>The export command creates several types of files in the output directory:</p>"},{"location":"user-guide/deployment-export/#1-catalog-item-files","title":"1. Catalog Item Files","text":"<p>Naming Pattern: <code>{catalog_item_name}_{catalog_item_id}.json</code></p> <p>Example: <code>Ubuntu_Server_Template_abc123.json</code></p> <p>Sample Content: <pre><code>{\n  \"catalog_item_id\": \"abc123\",\n  \"catalog_item_info\": {\n    \"id\": \"abc123\",\n    \"name\": \"Ubuntu Server Template\",\n    \"type\": {\n      \"id\": \"com.vmw.blueprint\",\n      \"name\": \"com.vmw.blueprint\"\n    },\n    \"status\": \"PUBLISHED\",\n    \"version\": \"1.2\",\n    \"description\": \"Standard Ubuntu 20.04 server template\"\n  },\n  \"export_timestamp\": \"2024-01-15T14:30:00.123456\",\n  \"deployment_count\": 45,\n  \"deployments\": [\n    {\n      \"id\": \"deployment-001\",\n      \"name\": \"ubuntu-web-01\",\n      \"status\": \"CREATE_SUCCESSFUL\",\n      \"projectId\": \"dev-project-123\", \n      \"createdAt\": \"2024-01-10T09:15:30.000Z\",\n      \"catalogItemId\": \"abc123\",\n      \"catalogItemName\": \"Ubuntu Server Template\",\n      \"_catalog_item_info\": {\n        \"id\": \"abc123\",\n        \"name\": \"Ubuntu Server Template\",\n        \"type\": \"com.vmw.blueprint\",\n        \"status\": \"PUBLISHED\",\n        \"version\": \"1.2\",\n        \"description\": \"Standard Ubuntu 20.04 server template\"\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"user-guide/deployment-export/#2-unsynced-deployments-file","title":"2. Unsynced Deployments File","text":"<p>Filename: <code>unsynced_deployments.json</code></p> <p>Sample Content: <pre><code>{\n  \"export_timestamp\": \"2024-01-15T14:30:00.123456\",\n  \"description\": \"Deployments that could not be linked to any catalog item\",\n  \"deployment_count\": 14,\n  \"deployments\": [\n    {\n      \"id\": \"deployment-orphan-001\",\n      \"name\": \"legacy-vm-01\",\n      \"status\": \"CREATE_SUCCESSFUL\",\n      \"projectId\": \"legacy-project-456\",\n      \"createdAt\": \"2023-12-01T10:20:30.000Z\",\n      \"_unsynced_reason\": \"missing_catalog_references\"\n    },\n    {\n      \"id\": \"deployment-orphan-002\", \n      \"name\": \"manual-deployment-02\",\n      \"status\": \"CREATE_SUCCESSFUL\",\n      \"projectId\": \"dev-project-123\",\n      \"createdAt\": \"2024-01-05T15:45:20.000Z\",\n      \"catalogItemId\": \"deleted-item-999\",\n      \"_unsynced_reason\": \"catalog_item_deleted\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"user-guide/deployment-export/#3-export-summary-file","title":"3. Export Summary File","text":"<p>Filename: <code>export_summary.json</code></p> <p>Sample Content: <pre><code>{\n  \"export_timestamp\": \"2024-01-15T14:30:00.123456\",\n  \"export_parameters\": {\n    \"project_id\": null,\n    \"include_resources\": false,\n    \"include_unsynced\": true\n  },\n  \"statistics\": {\n    \"total_deployments\": 156,\n    \"synced_deployments\": 142,\n    \"unsynced_deployments\": 14,\n    \"catalog_items_with_deployments\": 8,\n    \"total_catalog_items\": 23\n  },\n  \"exported_files\": [\n    {\n      \"filename\": \"Ubuntu_Server_Template_abc123.json\",\n      \"filepath\": \"./exports/Ubuntu_Server_Template_abc123.json\", \n      \"catalog_item_id\": \"abc123\",\n      \"catalog_item_name\": \"Ubuntu Server Template\",\n      \"deployment_count\": 45\n    },\n    {\n      \"filename\": \"Windows_Server_2019_def456.json\",\n      \"filepath\": \"./exports/Windows_Server_2019_def456.json\",\n      \"catalog_item_id\": \"def456\", \n      \"catalog_item_name\": \"Windows Server 2019\",\n      \"deployment_count\": 32\n    }\n  ],\n  \"files_created\": 12\n}\n</code></pre></p>"},{"location":"user-guide/deployment-export/#understanding-export-results","title":"Understanding Export Results","text":""},{"location":"user-guide/deployment-export/#deployment-matching-logic","title":"Deployment Matching Logic","text":"<p>The export command uses intelligent matching to link deployments to catalog items:</p> <ol> <li>Direct Catalog Item ID Match: Exact match on <code>catalogItemId</code> field</li> <li>Blueprint ID Match: Match on <code>blueprintId</code> for blueprint-based deployments  </li> <li>Catalog Item Name Match: Exact match on <code>catalogItemName</code> field</li> <li>Fuzzy Name Matching: Similarity matching between deployment and catalog item names</li> </ol>"},{"location":"user-guide/deployment-export/#unsynced-deployment-reasons","title":"Unsynced Deployment Reasons","text":"<p>Deployments may be unsynced for several reasons:</p> <ul> <li><code>missing_catalog_references</code>: No catalog item references in deployment metadata</li> <li><code>catalog_item_deleted</code>: Referenced catalog item no longer exists</li> <li><code>catalog_name_mismatch</code>: Catalog item name not found in current catalog</li> <li><code>blueprint_deleted</code>: Referenced blueprint no longer exists  </li> <li><code>external_creation</code>: Deployment created outside service catalog workflow</li> </ul>"},{"location":"user-guide/deployment-export/#data-analysis-examples","title":"Data Analysis Examples","text":""},{"location":"user-guide/deployment-export/#1-find-most-used-catalog-items","title":"1. Find Most Used Catalog Items","text":"<pre><code># Export deployments\nvmware-vra deployment export-all --output-dir ./analysis\n\n# Use jq to analyze export summary\ncat ./analysis/export_summary.json | jq -r '\n  .exported_files[] | \n  select(.catalog_item_name != \"Unsynced Deployments\") |\n  \"\\(.deployment_count)\\t\\(.catalog_item_name)\"\n' | sort -rn | head -10\n</code></pre> <p>Sample Output: <pre><code>45    Ubuntu Server Template\n32    Windows Server 2019  \n28    Docker Container\n19    MySQL Database\n12    Load Balancer\n4     Storage Volume\n2     Network Segment\n</code></pre></p>"},{"location":"user-guide/deployment-export/#2-analyze-deployment-status-distribution","title":"2. Analyze Deployment Status Distribution","text":"<pre><code># Extract status information from all catalog item files\nfor file in ./exports/*.json; do\n  if [[ \"$file\" != *\"unsynced_deployments.json\"* &amp;&amp; \"$file\" != *\"export_summary.json\"* ]]; then\n    echo \"=== $(basename \"$file\") ===\"\n    cat \"$file\" | jq -r '.deployments[].status' | sort | uniq -c\n  fi\ndone\n</code></pre>"},{"location":"user-guide/deployment-export/#3-find-deployments-by-date-range","title":"3. Find Deployments by Date Range","text":"<pre><code># Find deployments created in last 30 days\nfor file in ./exports/*.json; do\n  if [[ \"$file\" != *\"unsynced_deployments.json\"* &amp;&amp; \"$file\" != *\"export_summary.json\"* ]]; then\n    cat \"$file\" | jq -r --arg cutoff \"$(date -d '30 days ago' -Iseconds)\" '\n      .deployments[] | \n      select(.createdAt &gt; $cutoff) |\n      \"\\(.createdAt)\\t\\(.name)\\t\\(.status)\"\n    '\n  fi\ndone | sort\n</code></pre>"},{"location":"user-guide/deployment-export/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"user-guide/deployment-export/#1-import-to-database","title":"1. Import to Database","text":"<p>Convert JSON exports to CSV for database import:</p> <pre><code>#!/bin/bash\n# Create CSV header\necho \"deployment_id,deployment_name,status,project_id,created_at,catalog_item_id,catalog_item_name\" &gt; deployments.csv\n\n# Process all catalog item files\nfor file in ./exports/*.json; do\n  if [[ \"$file\" != *\"unsynced_deployments.json\"* &amp;&amp; \"$file\" != *\"export_summary.json\"* ]]; then\n    cat \"$file\" | jq -r '.deployments[] | \n      [.id, .name, .status, .projectId, .createdAt, .catalogItemId // \"\", ._catalog_item_info.name // \"\"] | \n      @csv' &gt;&gt; deployments.csv\n  fi\ndone\n</code></pre>"},{"location":"user-guide/deployment-export/#2-generate-excel-report","title":"2. Generate Excel Report","text":"<pre><code># Install required tools\npip install pandas openpyxl\n\n# Python script to create Excel report\ncat &lt;&lt; 'EOF' &gt; create_excel_report.py\nimport pandas as pd\nimport json\nimport glob\nfrom datetime import datetime\n\ndef create_report():\n    all_deployments = []\n\n    # Process all catalog item files\n    for file_path in glob.glob('./exports/*.json'):\n        if 'unsynced_deployments.json' in file_path or 'export_summary.json' in file_path:\n            continue\n\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n\n        for deployment in data['deployments']:\n            all_deployments.append({\n                'Deployment ID': deployment['id'],\n                'Deployment Name': deployment['name'], \n                'Status': deployment['status'],\n                'Project ID': deployment['projectId'],\n                'Created At': deployment['createdAt'],\n                'Catalog Item': data['catalog_item_info']['name'],\n                'Catalog Item Type': data['catalog_item_info']['type']['name']\n            })\n\n    # Create DataFrame and save to Excel\n    df = pd.DataFrame(all_deployments)\n    df.to_excel(f'vra_deployments_{datetime.now().strftime(\"%Y%m%d\")}.xlsx', index=False)\n    print(f\"Excel report created: vra_deployments_{datetime.now().strftime('%Y%m%d')}.xlsx\")\n\nif __name__ == \"__main__\":\n    create_report()\nEOF\n\npython create_excel_report.py\n</code></pre>"},{"location":"user-guide/deployment-export/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/deployment-export/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"user-guide/deployment-export/#1-authentication-errors","title":"1. Authentication Errors","text":"<p>Error: <code>No valid authentication token found</code></p> <p>Solution: <pre><code># Re-authenticate\nvmware-vra auth login --username your-username --url https://vra.example.com\n</code></pre></p>"},{"location":"user-guide/deployment-export/#2-permission-errors","title":"2. Permission Errors","text":"<p>Error: <code>Failed to list deployments: 403 Forbidden</code></p> <p>Solution: Ensure your user account has appropriate permissions: - <code>Service Catalog User</code> role minimum - <code>Project Administrator</code> for project-specific exports - <code>Organization Administrator</code> for system-wide exports</p>"},{"location":"user-guide/deployment-export/#3-large-export-timeouts","title":"3. Large Export Timeouts","text":"<p>Error: Export appears to hang on large environments</p> <p>Solution: <pre><code># Use project filtering to reduce scope\nvmware-vra deployment export-all --project specific-project-id\n\n# Or exclude resource details for faster export\nvmware-vra deployment export-all --no-unsynced\n</code></pre></p>"},{"location":"user-guide/deployment-export/#4-disk-space-issues","title":"4. Disk Space Issues","text":"<p>Error: <code>No space left on device</code></p> <p>Solution: <pre><code># Check available space\ndf -h\n\n# Use external storage location\nvmware-vra deployment export-all --output-dir /mnt/external-storage/vra-exports\n</code></pre></p>"},{"location":"user-guide/deployment-export/#5-json-parsing-errors","title":"5. JSON Parsing Errors","text":"<p>Error: Issues reading exported files</p> <p>Solution: <pre><code># Validate JSON files\nfor file in ./exports/*.json; do\n  echo \"Validating: $file\"\n  python -m json.tool \"$file\" &gt; /dev/null &amp;&amp; echo \"\u2713 Valid\" || echo \"\u2717 Invalid\"\ndone\n</code></pre></p>"},{"location":"user-guide/deployment-export/#debugging-options","title":"Debugging Options","text":"<p>Enable verbose output for troubleshooting:</p> <pre><code>vmware-vra --verbose deployment export-all --output-dir ./debug-export\n</code></pre> <p>This will show: - HTTP request/response details - Deployment matching logic decisions - Resource fetching progress - File creation details</p>"},{"location":"user-guide/deployment-export/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/deployment-export/#1-regular-backups","title":"1. Regular Backups","text":"<p>Set up automated exports:</p> <pre><code>#!/bin/bash\n# /etc/cron.daily/vra-export\n\nBACKUP_ROOT=\"/backup/vra\"\nDATE=$(date +%Y-%m-%d)\nBACKUP_DIR=\"$BACKUP_ROOT/$DATE\"\n\nmkdir -p \"$BACKUP_DIR\"\n\nvmware-vra deployment export-all \\\n    --output-dir \"$BACKUP_DIR\" \\\n    --include-resources\n\n# Keep only last 30 days of backups\nfind \"$BACKUP_ROOT\" -type d -name \"20*\" -mtime +30 -exec rm -rf {} \\;\n</code></pre>"},{"location":"user-guide/deployment-export/#2-storage-management","title":"2. Storage Management","text":"<p>Monitor export sizes and implement rotation:</p> <pre><code># Check export directory size\ndu -sh ./exports\n\n# Compress older exports\nfind ./exports -name \"*.json\" -mtime +7 -exec gzip {} \\;\n</code></pre>"},{"location":"user-guide/deployment-export/#3-data-validation","title":"3. Data Validation","text":"<p>Always validate critical exports:</p> <pre><code># Verify export completeness\nEXPECTED_DEPLOYMENTS=$(vmware-vra deployment list --format json | jq length)\nEXPORTED_DEPLOYMENTS=$(cat ./exports/export_summary.json | jq '.statistics.total_deployments')\n\nif [ \"$EXPECTED_DEPLOYMENTS\" -eq \"$EXPORTED_DEPLOYMENTS\" ]; then\n    echo \"\u2713 Export complete: $EXPORTED_DEPLOYMENTS deployments\"\nelse\n    echo \"\u26a0 Potential export issue: Expected $EXPECTED_DEPLOYMENTS, got $EXPORTED_DEPLOYMENTS\"\nfi\n</code></pre>"},{"location":"user-guide/deployment-export/#4-security-considerations","title":"4. Security Considerations","text":"<ul> <li>Secure Storage: Store exports in encrypted, access-controlled locations</li> <li>Data Sanitization: Remove sensitive information before sharing exports</li> <li>Retention Policies: Implement appropriate data retention policies</li> <li>Access Auditing: Log and monitor access to export files</li> </ul> <pre><code># Example: Remove sensitive fields before sharing\ncat export.json | jq 'del(.deployments[].inputs.password, .deployments[].inputs.apiKey)' &gt; sanitized_export.json\n</code></pre> <p>This comprehensive guide provides everything needed to effectively use the deployment export functionality in the VMware vRA CLI.</p>"},{"location":"user-guide/examples/","title":"Practical Examples and Use Cases","text":"<p>This guide provides real-world examples and common usage patterns for the VMware vRA CLI tool, demonstrating how to solve typical infrastructure automation challenges.</p>"},{"location":"user-guide/examples/#basic-workflow-examples","title":"Basic Workflow Examples","text":""},{"location":"user-guide/examples/#example-1-daily-development-vm-setup","title":"Example 1: Daily Development VM Setup","text":"<p>Automate the creation of development VMs with standardized configurations:</p> <pre><code>#!/bin/bash\n# dev-vm-setup.sh\n\n# Configuration\nPROJECT_ID=\"dev-project-123\"\nCATALOG_ITEM=\"blueprint-ubuntu-dev\"\nDEV_TAG=\"tag-environment-dev\"\n\n# Function to create a dev VM\ncreate_dev_vm() {\n    local vm_name=$1\n    local developer=$2\n\n    echo \"Creating development VM: $vm_name for $developer\"\n\n    # Request the catalog item\n    DEPLOYMENT_ID=$(vmware-vra catalog request \"$CATALOG_ITEM\" \\\n        --project \"$PROJECT_ID\" \\\n        --name \"$vm_name\" \\\n        --inputs \"{\\\"hostname\\\": \\\"$vm_name\\\", \\\"owner\\\": \\\"$developer\\\", \\\"cpu\\\": 4, \\\"memory\\\": \\\"8GB\\\"}\" \\\n        --reason \"Development environment for $developer\" \\\n        --format json | jq -r '.deploymentId')\n\n    if [[ \"$DEPLOYMENT_ID\" != \"null\" &amp;&amp; -n \"$DEPLOYMENT_ID\" ]]; then\n        echo \"\u2705 Deployment created: $DEPLOYMENT_ID\"\n\n        # Wait for completion\n        echo \"\u23f3 Waiting for deployment to complete...\"\n        wait_for_deployment \"$DEPLOYMENT_ID\"\n\n        # Add development environment tag\n        vmware-vra tag assign \"$DEPLOYMENT_ID\" \"$DEV_TAG\"\n        echo \"\ud83c\udff7\ufe0f Tagged as development environment\"\n\n        # Create developer-specific tag\n        DEV_TAG_ID=$(vmware-vra tag create \"developer\" --value \"$developer\" \\\n            --description \"VM owner: $developer\" --format json | jq -r '.id')\n        vmware-vra tag assign \"$DEPLOYMENT_ID\" \"$DEV_TAG_ID\"\n\n        echo \"\u2705 Development VM ready: $vm_name\"\n    else\n        echo \"\u274c Failed to create deployment\"\n        exit 1\n    fi\n}\n\n# Function to wait for deployment completion\nwait_for_deployment() {\n    local deployment_id=$1\n    local max_attempts=30\n    local attempt=1\n\n    while [ $attempt -le $max_attempts ]; do\n        STATUS=$(vmware-vra deployment show \"$deployment_id\" --format json | jq -r '.status')\n\n        case \"$STATUS\" in\n            \"CREATE_SUCCESSFUL\")\n                echo \"\u2705 Deployment completed successfully\"\n                return 0\n                ;;\n            \"CREATE_FAILED\")\n                echo \"\u274c Deployment failed\"\n                return 1\n                ;;\n            \"CREATE_INPROGRESS\")\n                echo \"\u23f3 Still in progress... (attempt $attempt/$max_attempts)\"\n                ;;\n        esac\n\n        sleep 30\n        ((attempt++))\n    done\n\n    echo \"\u23f0 Deployment timed out\"\n    return 1\n}\n\n# Main execution\nif [[ $# -ne 2 ]]; then\n    echo \"Usage: $0 &lt;vm-name&gt; &lt;developer-email&gt;\"\n    exit 1\nfi\n\n# Authenticate if needed\nvmware-vra auth status | grep -q \"Authenticated\" || vmware-vra auth login\n\n# Create the VM\ncreate_dev_vm \"$1\" \"$2\"\n</code></pre>"},{"location":"user-guide/examples/#example-2-bulk-vm-cleanup","title":"Example 2: Bulk VM Cleanup","text":"<p>Clean up multiple VMs based on tags or naming patterns:</p> <pre><code>#!/bin/bash\n# cleanup-old-vms.sh\n\n# Configuration\nDAYS_OLD=7\nDRY_RUN=${DRY_RUN:-true}  # Set to false to actually delete\n\necho \"\ud83e\uddf9 VM Cleanup Script\"\necho \"Looking for VMs older than $DAYS_OLD days...\"\n\nif [[ \"$DRY_RUN\" == \"true\" ]]; then\n    echo \"\ud83d\udd0d DRY RUN MODE - No actual deletions will occur\"\nfi\n\n# Get all deployments\nDEPLOYMENTS=$(vmware-vra deployment list --format json)\n\n# Find old deployments\nOLD_DEPLOYMENTS=$(echo \"$DEPLOYMENTS\" | jq -r --argjson days_old \"$DAYS_OLD\" '\n    .[] | \n    select(.createdAt != null) |\n    select((now - ((.createdAt | sub(\"\\\\+.*$\"; \"\") | strptime(\"%Y-%m-%dT%H:%M:%S\") | mktime))) / 86400 &gt; $days_old) |\n    .id\n')\n\nif [[ -z \"$OLD_DEPLOYMENTS\" ]]; then\n    echo \"\u2705 No old deployments found to clean up\"\n    exit 0\nfi\n\necho \"\ud83d\udccb Found $(echo \"$OLD_DEPLOYMENTS\" | wc -l) old deployments:\"\n\n# Process each old deployment\nwhile IFS= read -r deployment_id; do\n    if [[ -z \"$deployment_id\" ]]; then\n        continue\n    fi\n\n    # Get deployment details\n    DEPLOYMENT_INFO=$(vmware-vra deployment show \"$deployment_id\" --format json)\n    DEPLOYMENT_NAME=$(echo \"$DEPLOYMENT_INFO\" | jq -r '.name')\n    DEPLOYMENT_STATUS=$(echo \"$DEPLOYMENT_INFO\" | jq -r '.status')\n    CREATED_AT=$(echo \"$DEPLOYMENT_INFO\" | jq -r '.createdAt')\n\n    echo \"\ud83d\udd0d Processing: $DEPLOYMENT_NAME ($deployment_id)\"\n    echo \"   Status: $DEPLOYMENT_STATUS\"\n    echo \"   Created: $CREATED_AT\"\n\n    # Check if deployment has 'temporary' or 'development' tags\n    TAGS=$(vmware-vra tag resource-tags \"$deployment_id\" --format json 2&gt;/dev/null || echo \"[]\")\n    IS_TEMP=$(echo \"$TAGS\" | jq -r '.[] | select(.key == \"lifecycle\" and .value == \"temporary\") | .id')\n    IS_DEV=$(echo \"$TAGS\" | jq -r '.[] | select(.key == \"environment\" and .value == \"development\") | .id')\n\n    SHOULD_DELETE=false\n\n    # Only delete if it's tagged as temporary or development\n    if [[ -n \"$IS_TEMP\" ]] || [[ -n \"$IS_DEV\" ]]; then\n        SHOULD_DELETE=true\n        echo \"   \ud83c\udff7\ufe0f Tagged for cleanup (temporary or development)\"\n    else\n        echo \"   \u26a0\ufe0f  No cleanup tags found - skipping for safety\"\n    fi\n\n    if [[ \"$SHOULD_DELETE\" == \"true\" ]]; then\n        if [[ \"$DRY_RUN\" == \"true\" ]]; then\n            echo \"   \ud83d\udd0d [DRY RUN] Would delete: $DEPLOYMENT_NAME\"\n        else\n            echo \"   \ud83d\uddd1\ufe0f Deleting: $DEPLOYMENT_NAME\"\n            if vmware-vra deployment delete \"$deployment_id\" --confirm; then\n                echo \"   \u2705 Deletion initiated for $DEPLOYMENT_NAME\"\n            else\n                echo \"   \u274c Failed to delete $DEPLOYMENT_NAME\"\n            fi\n        fi\n    fi\n\n    echo\ndone &lt;&lt;&lt; \"$OLD_DEPLOYMENTS\"\n\necho \"\ud83c\udfc1 Cleanup script completed\"\n\nif [[ \"$DRY_RUN\" == \"true\" ]]; then\n    echo \"\ud83d\udca1 Run with DRY_RUN=false to perform actual deletions\"\nfi\n</code></pre>"},{"location":"user-guide/examples/#advanced-automation-examples","title":"Advanced Automation Examples","text":""},{"location":"user-guide/examples/#example-3-environment-migration","title":"Example 3: Environment Migration","text":"<p>Export from one environment and prepare for migration to another:</p> <pre><code>#!/bin/bash\n# environment-migration.sh\n\nSOURCE_ENV=\"development\"\nTARGET_ENV=\"staging\"\nBACKUP_DIR=\"/backup/vra-migration/$(date +%Y-%m-%d)\"\n\necho \"\ud83d\ude9a Environment Migration: $SOURCE_ENV \u2192 $TARGET_ENV\"\necho \"\ud83d\udcc1 Backup directory: $BACKUP_DIR\"\n\n# Step 1: Export current environment\necho \"\ud83d\udce6 Step 1: Exporting current environment...\"\nmkdir -p \"$BACKUP_DIR\"\n\nvmware-vra deployment export-all \\\n    --project \"$SOURCE_ENV\" \\\n    --output-dir \"$BACKUP_DIR\" \\\n    --include-resources\n\n# Step 2: Generate migration analysis\necho \"\ud83d\udcca Step 2: Generating migration analysis...\"\n\n# Get export summary\nEXPORT_SUMMARY=$(cat \"$BACKUP_DIR/export_summary.json\")\nTOTAL_DEPLOYMENTS=$(echo \"$EXPORT_SUMMARY\" | jq '.statistics.total_deployments')\nCATALOG_ITEMS=$(echo \"$EXPORT_SUMMARY\" | jq '.statistics.catalog_items_with_deployments')\n\necho \"Migration Analysis:\"\necho \"  Total deployments to migrate: $TOTAL_DEPLOYMENTS\"\necho \"  Catalog items involved: $CATALOG_ITEMS\"\necho\n\n# Step 3: Validate catalog items exist in target\necho \"\ud83d\udd0d Step 3: Validating catalog items in target environment...\"\n\nMISSING_ITEMS=()\nfor file in \"$BACKUP_DIR\"/*.json; do\n    if [[ \"$file\" == *\"unsynced_deployments.json\"* ]] || [[ \"$file\" == *\"export_summary.json\"* ]]; then\n        continue\n    fi\n\n    CATALOG_ITEM_ID=$(cat \"$file\" | jq -r '.catalog_item_id')\n    CATALOG_ITEM_NAME=$(cat \"$file\" | jq -r '.catalog_item_info.name')\n\n    echo \"   Checking: $CATALOG_ITEM_NAME ($CATALOG_ITEM_ID)\"\n\n    # Check if catalog item exists in target (assuming we switch environments)\n    if ! vmware-vra catalog show \"$CATALOG_ITEM_ID\" &gt;/dev/null 2&gt;&amp;1; then\n        echo \"   \u26a0\ufe0f  Missing in target: $CATALOG_ITEM_NAME\"\n        MISSING_ITEMS+=(\"$CATALOG_ITEM_NAME\")\n    else\n        echo \"   \u2705 Available in target: $CATALOG_ITEM_NAME\"\n    fi\ndone\n\n# Step 4: Generate migration report\necho \"\ud83d\udccb Step 4: Generating migration report...\"\n\ncat &lt;&lt; EOF &gt; \"$BACKUP_DIR/migration-report.md\"\n# Migration Report: $SOURCE_ENV \u2192 $TARGET_ENV\n\n## Summary\n- **Date**: $(date)\n- **Source Environment**: $SOURCE_ENV\n- **Target Environment**: $TARGET_ENV\n- **Total Deployments**: $TOTAL_DEPLOYMENTS\n- **Catalog Items**: $CATALOG_ITEMS\n\n## Catalog Item Validation\n\n### Available in Target\n$(for file in \"$BACKUP_DIR\"/*.json; do\n    if [[ \"$file\" != *\"unsynced_deployments.json\"* ]] &amp;&amp; [[ \"$file\" != *\"export_summary.json\"* ]]; then\n        CATALOG_ITEM_ID=$(cat \"$file\" | jq -r '.catalog_item_id')\n        CATALOG_ITEM_NAME=$(cat \"$file\" | jq -r '.catalog_item_info.name')\n        DEPLOYMENT_COUNT=$(cat \"$file\" | jq -r '.deployment_count')\n        if vmware-vra catalog show \"$CATALOG_ITEM_ID\" &gt;/dev/null 2&gt;&amp;1; then\n            echo \"- \u2705 **$CATALOG_ITEM_NAME** ($DEPLOYMENT_COUNT deployments)\"\n        fi\n    fi\ndone)\n\n### Missing in Target\n$(for item in \"${MISSING_ITEMS[@]}\"; do\n    echo \"- \u274c **$item** - Needs to be created or mapped\"\ndone)\n\n## Next Steps\n\n1. **Address Missing Catalog Items**: Create or map missing catalog items in target environment\n2. **Review Configurations**: Validate input parameters are compatible\n3. **Plan Migration Strategy**: Decide on recreation vs. import approach\n4. **Test Migration**: Start with a small subset of deployments\n5. **Execute Migration**: Run full migration once validated\n\n## Files Generated\n- \\`export_summary.json\\` - Complete export statistics\n- \\`*_&lt;catalog-id&gt;.json\\` - Individual catalog item deployments\n- \\`unsynced_deployments.json\\` - Deployments without catalog associations\n- \\`migration-report.md\\` - This report\n\nEOF\n\necho \"\u2705 Migration analysis complete!\"\necho \"\ud83d\udcc4 Report saved: $BACKUP_DIR/migration-report.md\"\n\nif [[ ${#MISSING_ITEMS[@]} -gt 0 ]]; then\n    echo \"\u26a0\ufe0f  Warning: ${#MISSING_ITEMS[@]} catalog items missing in target environment\"\n    echo \"\ud83d\udccb Review migration-report.md for details\"\nfi\n</code></pre>"},{"location":"user-guide/examples/#example-4-automated-testing-pipeline","title":"Example 4: Automated Testing Pipeline","text":"<p>Integration with CI/CD for infrastructure testing:</p> <pre><code>#!/bin/bash\n# infrastructure-test-pipeline.sh\n\n# CI/CD Pipeline Integration for Infrastructure Testing\nset -e\n\nPIPELINE_ID=${CI_PIPELINE_ID:-\"local-$(date +%s)\"}\nPROJECT_ID=${TEST_PROJECT_ID:-\"test-project-123\"}\nCATALOG_ITEM=${TEST_CATALOG_ITEM:-\"blueprint-test-vm\"}\nCLEANUP_ON_SUCCESS=${CLEANUP_ON_SUCCESS:-\"true\"}\n\necho \"\ud83d\udd2c Infrastructure Test Pipeline\"\necho \"Pipeline ID: $PIPELINE_ID\"\necho \"Project: $PROJECT_ID\"\necho \"Catalog Item: $CATALOG_ITEM\"\n\n# Test configuration\nTESTS=(\n    \"test_vm_creation\"\n    \"test_vm_connectivity\"\n    \"test_vm_configuration\"\n    \"test_vm_performance\"\n)\n\nDEPLOYMENT_ID=\"\"\nTEST_RESULTS=()\n\n# Cleanup function\ncleanup() {\n    if [[ -n \"$DEPLOYMENT_ID\" ]] &amp;&amp; [[ \"$CLEANUP_ON_SUCCESS\" == \"true\" ]]; then\n        echo \"\ud83e\uddf9 Cleaning up test deployment: $DEPLOYMENT_ID\"\n        vmware-vra deployment delete \"$DEPLOYMENT_ID\" --confirm || true\n    fi\n}\ntrap cleanup EXIT\n\n# Test 1: VM Creation\ntest_vm_creation() {\n    echo \"\ud83e\uddea Test 1: VM Creation\"\n\n    local vm_name=\"test-vm-${PIPELINE_ID}\"\n\n    DEPLOYMENT_ID=$(vmware-vra catalog request \"$CATALOG_ITEM\" \\\n        --project \"$PROJECT_ID\" \\\n        --name \"$vm_name\" \\\n        --inputs '{\"cpu\": 2, \"memory\": \"4GB\", \"disk\": \"50GB\"}' \\\n        --reason \"Automated infrastructure test - Pipeline $PIPELINE_ID\" \\\n        --format json | jq -r '.deploymentId')\n\n    if [[ \"$DEPLOYMENT_ID\" == \"null\" ]] || [[ -z \"$DEPLOYMENT_ID\" ]]; then\n        echo \"\u274c Failed to create test deployment\"\n        return 1\n    fi\n\n    echo \"\u2705 Deployment request submitted: $DEPLOYMENT_ID\"\n\n    # Wait for completion with timeout\n    local max_wait=1800  # 30 minutes\n    local waited=0\n\n    while [[ $waited -lt $max_wait ]]; do\n        local status=$(vmware-vra deployment show \"$DEPLOYMENT_ID\" --format json | jq -r '.status')\n\n        case \"$status\" in\n            \"CREATE_SUCCESSFUL\")\n                echo \"\u2705 VM creation successful\"\n                return 0\n                ;;\n            \"CREATE_FAILED\")\n                echo \"\u274c VM creation failed\"\n                vmware-vra deployment show \"$DEPLOYMENT_ID\"\n                return 1\n                ;;\n            \"CREATE_INPROGRESS\")\n                echo \"\u23f3 VM creation in progress... (${waited}s elapsed)\"\n                sleep 30\n                waited=$((waited + 30))\n                ;;\n            *)\n                echo \"\u26a0\ufe0f Unknown status: $status\"\n                sleep 30\n                waited=$((waited + 30))\n                ;;\n        esac\n    done\n\n    echo \"\u23f0 VM creation timed out after ${max_wait}s\"\n    return 1\n}\n\n# Test 2: VM Connectivity\ntest_vm_connectivity() {\n    echo \"\ud83e\uddea Test 2: VM Connectivity\"\n\n    # Get VM IP address from resources\n    local resources=$(vmware-vra deployment resources \"$DEPLOYMENT_ID\" --format json)\n    local vm_ip=$(echo \"$resources\" | jq -r '.[] | select(.type | contains(\"Machine\")) | .properties.address // empty' | head -n1)\n\n    if [[ -z \"$vm_ip\" ]] || [[ \"$vm_ip\" == \"null\" ]]; then\n        echo \"\u274c Could not determine VM IP address\"\n        return 1\n    fi\n\n    echo \"\ud83d\udd0d Testing connectivity to VM: $vm_ip\"\n\n    # Test ping connectivity\n    if ping -c 3 \"$vm_ip\" &gt;/dev/null 2&gt;&amp;1; then\n        echo \"\u2705 VM is reachable via ping\"\n    else\n        echo \"\u274c VM is not reachable via ping\"\n        return 1\n    fi\n\n    # Test SSH connectivity (if applicable)\n    if command -v nc &gt;/dev/null 2&gt;&amp;1; then\n        if nc -z -w5 \"$vm_ip\" 22 2&gt;/dev/null; then\n            echo \"\u2705 VM SSH port is accessible\"\n        else\n            echo \"\u26a0\ufe0f VM SSH port is not accessible (may be expected)\"\n        fi\n    fi\n\n    return 0\n}\n\n# Test 3: VM Configuration\ntest_vm_configuration() {\n    echo \"\ud83e\uddea Test 3: VM Configuration\"\n\n    local deployment_info=$(vmware-vra deployment show \"$DEPLOYMENT_ID\" --format json)\n    local inputs=$(echo \"$deployment_info\" | jq '.inputs')\n\n    echo \"\ud83d\udd0d Verifying deployment configuration...\"\n\n    # Check if inputs match expected values\n    local expected_cpu=2\n    local actual_cpu=$(echo \"$inputs\" | jq -r '.cpu // empty')\n\n    if [[ \"$actual_cpu\" == \"$expected_cpu\" ]]; then\n        echo \"\u2705 CPU configuration correct: $actual_cpu\"\n    else\n        echo \"\u274c CPU configuration mismatch: expected $expected_cpu, got $actual_cpu\"\n        return 1\n    fi\n\n    local expected_memory=\"4GB\"\n    local actual_memory=$(echo \"$inputs\" | jq -r '.memory // empty')\n\n    if [[ \"$actual_memory\" == \"$expected_memory\" ]]; then\n        echo \"\u2705 Memory configuration correct: $actual_memory\"\n    else\n        echo \"\u274c Memory configuration mismatch: expected $expected_memory, got $actual_memory\"\n        return 1\n    fi\n\n    return 0\n}\n\n# Test 4: VM Performance (placeholder)\ntest_vm_performance() {\n    echo \"\ud83e\uddea Test 4: VM Performance\"\n    echo \"\u26a0\ufe0f Performance testing not implemented in this example\"\n    echo \"\u2705 Performance test placeholder passed\"\n    return 0\n}\n\n# Main test execution\necho \"\ud83d\ude80 Starting infrastructure tests...\"\n\n# Authenticate\nif ! vmware-vra auth status | grep -q \"Authenticated\"; then\n    echo \"\ud83d\udd10 Authentication required\"\n    exit 1\nfi\n\n# Run tests\nFAILED_TESTS=0\nfor test in \"${TESTS[@]}\"; do\n    echo\n    echo \"===========================================\" \n    if $test; then\n        TEST_RESULTS+=(\"\u2705 $test: PASSED\")\n    else\n        TEST_RESULTS+=(\"\u274c $test: FAILED\")\n        ((FAILED_TESTS++))\n    fi\n    echo \"===========================================\"\ndone\n\n# Summary\necho\necho \"\ud83d\udcca Test Summary:\"\nfor result in \"${TEST_RESULTS[@]}\"; do\n    echo \"  $result\"\ndone\n\necho\nif [[ $FAILED_TESTS -eq 0 ]]; then\n    echo \"\ud83c\udf89 All tests passed!\"\n    exit 0\nelse\n    echo \"\ud83d\udca5 $FAILED_TESTS test(s) failed!\"\n    exit 1\nfi\n</code></pre>"},{"location":"user-guide/examples/#monitoring-and-analytics-examples","title":"Monitoring and Analytics Examples","text":""},{"location":"user-guide/examples/#example-5-resource-usage-dashboard","title":"Example 5: Resource Usage Dashboard","text":"<p>Generate a comprehensive resource usage report:</p> <pre><code>#!/bin/bash\n# resource-usage-dashboard.sh\n\nOUTPUT_DIR=\"./reports/$(date +%Y-%m-%d)\"\nmkdir -p \"$OUTPUT_DIR\"\n\necho \"\ud83d\udcca Generating Resource Usage Dashboard\"\necho \"\ud83d\udcc1 Output directory: $OUTPUT_DIR\"\n\n# Generate all reports\necho \"\ud83d\udcc8 Generating catalog usage report...\"\nvmware-vra report catalog-usage --detailed-resources --include-zero \\\n    --format json &gt; \"$OUTPUT_DIR/catalog-usage.json\"\n\necho \"\ud83d\udcc5 Generating activity timeline...\"\nvmware-vra report activity-timeline --days-back 90 --group-by day \\\n    --format json &gt; \"$OUTPUT_DIR/activity-timeline.json\"\n\necho \"\ud83d\udd0d Generating unsync report...\"\nvmware-vra report unsync --detailed-resources \\\n    --format json &gt; \"$OUTPUT_DIR/unsync-report.json\"\n\necho \"\ud83d\udce6 Exporting all deployments...\"\nvmware-vra deployment export-all \\\n    --output-dir \"$OUTPUT_DIR/exports\" \\\n    --include-resources\n\n# Generate HTML dashboard\ncat &lt;&lt; 'EOF' &gt; \"$OUTPUT_DIR/dashboard.html\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;vRA Resource Usage Dashboard&lt;/title&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .chart-container { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }\n        .stats { display: flex; gap: 20px; margin: 20px 0; }\n        .stat-card { flex: 1; padding: 20px; background: #f5f5f5; border-radius: 8px; text-align: center; }\n        .stat-number { font-size: 2em; font-weight: bold; color: #2196F3; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;vRA Resource Usage Dashboard&lt;/h1&gt;\n        &lt;p&gt;Generated: &lt;span id=\"timestamp\"&gt;&lt;/span&gt;&lt;/p&gt;\n\n        &lt;div class=\"stats\"&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-number\" id=\"total-deployments\"&gt;-&lt;/div&gt;\n                &lt;div&gt;Total Deployments&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-number\" id=\"active-items\"&gt;-&lt;/div&gt;\n                &lt;div&gt;Active Catalog Items&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-number\" id=\"unsynced-count\"&gt;-&lt;/div&gt;\n                &lt;div&gt;Unsynced Deployments&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"chart-container\"&gt;\n            &lt;h2&gt;Catalog Item Usage&lt;/h2&gt;\n            &lt;canvas id=\"catalogChart\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"chart-container\"&gt;\n            &lt;h2&gt;Activity Timeline (Last 90 Days)&lt;/h2&gt;\n            &lt;canvas id=\"timelineChart\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Load and process data\n        document.getElementById('timestamp').textContent = new Date().toLocaleString();\n\n        // This would normally load from the JSON files\n        // For demo purposes, showing structure only\n        fetch('./catalog-usage.json')\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                // Update statistics\n                document.getElementById('total-deployments').textContent = \n                    data.summary?.total_deployments_system_wide || 0;\n                document.getElementById('active-items').textContent = \n                    data.summary?.active_items || 0;\n\n                // Create catalog usage chart\n                const ctx1 = document.getElementById('catalogChart').getContext('2d');\n                new Chart(ctx1, {\n                    type: 'bar',\n                    data: {\n                        labels: data.catalog_items?.slice(0, 10).map(item =&gt; item.name) || [],\n                        datasets: [{\n                            label: 'Deployments',\n                            data: data.catalog_items?.slice(0, 10).map(item =&gt; item.deployment_count) || [],\n                            backgroundColor: 'rgba(33, 150, 243, 0.8)'\n                        }]\n                    },\n                    options: {\n                        responsive: true,\n                        scales: {\n                            y: { beginAtZero: true }\n                        }\n                    }\n                });\n            })\n            .catch(err =&gt; console.error('Error loading catalog usage data:', err));\n\n        fetch('./unsync-report.json')\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                document.getElementById('unsynced-count').textContent = \n                    data.summary?.unsynced_deployments || 0;\n            })\n            .catch(err =&gt; console.error('Error loading unsync data:', err));\n\n        fetch('./activity-timeline.json')\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                // Create timeline chart\n                const ctx2 = document.getElementById('timelineChart').getContext('2d');\n                const periods = Object.keys(data.period_activity || {}).sort();\n\n                new Chart(ctx2, {\n                    type: 'line',\n                    data: {\n                        labels: periods,\n                        datasets: [{\n                            label: 'Total Deployments',\n                            data: periods.map(p =&gt; data.period_activity[p]?.total_deployments || 0),\n                            borderColor: 'rgb(33, 150, 243)',\n                            tension: 0.1\n                        }, {\n                            label: 'Successful',\n                            data: periods.map(p =&gt; data.period_activity[p]?.successful_deployments || 0),\n                            borderColor: 'rgb(76, 175, 80)',\n                            tension: 0.1\n                        }, {\n                            label: 'Failed',\n                            data: periods.map(p =&gt; data.period_activity[p]?.failed_deployments || 0),\n                            borderColor: 'rgb(244, 67, 54)',\n                            tension: 0.1\n                        }]\n                    },\n                    options: {\n                        responsive: true,\n                        scales: {\n                            y: { beginAtZero: true }\n                        }\n                    }\n                });\n            })\n            .catch(err =&gt; console.error('Error loading timeline data:', err));\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEOF\n\necho \"\u2705 Dashboard generated: $OUTPUT_DIR/dashboard.html\"\necho \"\ud83c\udf10 Open the HTML file in your browser to view the dashboard\"\n\n# Generate summary report\ncat &lt;&lt; EOF &gt; \"$OUTPUT_DIR/summary.txt\"\nvRA Resource Usage Summary\nGenerated: $(date)\n\n=== Quick Stats ===\n$(vmware-vra deployment list --first-page-only | grep -E \"Deployments \\([0-9]+ items\\)\" || echo \"Deployments: Unable to fetch\")\n$(vmware-vra catalog list --first-page-only | grep -E \"Service Catalog Items \\([0-9]+ items\\)\" || echo \"Catalog Items: Unable to fetch\")\n\n=== Files Generated ===\n- catalog-usage.json      : Detailed catalog item usage statistics\n- activity-timeline.json  : 90-day deployment activity timeline\n- unsync-report.json      : Analysis of unsynced deployments\n- exports/                : Complete deployment export\n- dashboard.html          : Interactive HTML dashboard\n- summary.txt            : This summary file\n\n=== Next Steps ===\n1. Open dashboard.html in your browser\n2. Review catalog-usage.json for optimization opportunities\n3. Check unsync-report.json for deployment issues\n4. Use exports/ for backup or migration planning\n\nEOF\n\necho \"\ud83d\udcc4 Summary saved: $OUTPUT_DIR/summary.txt\"\necho \"\ud83c\udf89 Resource usage dashboard generation complete!\"\n</code></pre>"},{"location":"user-guide/examples/#error-handling-and-best-practices","title":"Error Handling and Best Practices","text":""},{"location":"user-guide/examples/#example-6-robust-error-handling","title":"Example 6: Robust Error Handling","text":"<p>Template for production-ready scripts with comprehensive error handling:</p> <pre><code>#!/bin/bash\n# robust-vra-script-template.sh\n\n# Exit on any error\nset -e\n\n# Configuration\nSCRIPT_NAME=$(basename \"$0\")\nLOG_FILE=\"/tmp/${SCRIPT_NAME%.*}-$(date +%Y%m%d-%H%M%S).log\"\nVERBOSE=${VERBOSE:-false}\nDRY_RUN=${DRY_RUN:-false}\n\n# Error handling\nerror_exit() {\n    echo \"ERROR: $1\" &gt;&amp;2\n    echo \"Check log file: $LOG_FILE\" &gt;&amp;2\n    exit \"${2:-1}\"\n}\n\nlog() {\n    local level=$1\n    shift\n    local message=\"$*\"\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n\n    echo \"[$timestamp] [$level] $message\" | tee -a \"$LOG_FILE\"\n\n    if [[ \"$level\" == \"ERROR\" ]]; then\n        echo \"$message\" &gt;&amp;2\n    fi\n}\n\nverbose_log() {\n    if [[ \"$VERBOSE\" == \"true\" ]]; then\n        log \"DEBUG\" \"$@\"\n    fi\n}\n\n# Function to check prerequisites\ncheck_prerequisites() {\n    log \"INFO\" \"Checking prerequisites...\"\n\n    # Check if CLI is available\n    if ! command -v vmware-vra &gt;/dev/null 2&gt;&amp;1; then\n        error_exit \"vmware-vra CLI not found in PATH\"\n    fi\n\n    # Check authentication\n    if ! vmware-vra auth status | grep -q \"Authenticated\"; then\n        error_exit \"Not authenticated. Run 'vmware-vra auth login' first\"\n    fi\n\n    # Check required environment variables\n    if [[ -z \"${PROJECT_ID:-}\" ]]; then\n        error_exit \"PROJECT_ID environment variable is required\"\n    fi\n\n    # Test basic connectivity\n    if ! vmware-vra catalog list --first-page-only &gt;/dev/null 2&gt;&amp;1; then\n        error_exit \"Cannot connect to vRA API. Check authentication and connectivity\"\n    fi\n\n    log \"INFO\" \"Prerequisites check passed\"\n}\n\n# Function to safely execute vRA commands\nsafe_vra_command() {\n    local description=\"$1\"\n    shift\n\n    log \"INFO\" \"Executing: $description\"\n    verbose_log \"$@\"\n\n    if [[ \"$DRY_RUN\" == \"true\" ]]; then\n        log \"INFO\" \"[DRY RUN] Would execute: $*\"\n        return 0\n    fi\n\n    local output\n    local exit_code\n\n    # Execute command and capture output\n    if output=$(\"$@\" 2&gt;&amp;1); then\n        exit_code=0\n        verbose_log \"Command output: $output\"\n    else\n        exit_code=$?\n        log \"ERROR\" \"Command failed (exit code: $exit_code): $*\"\n        log \"ERROR\" \"Output: $output\"\n        return $exit_code\n    fi\n\n    # Return output via stdout for chaining\n    echo \"$output\"\n    return $exit_code\n}\n\n# Function to wait for deployment with timeout\nwait_for_deployment() {\n    local deployment_id=\"$1\"\n    local timeout_seconds=\"${2:-1800}\"  # 30 minutes default\n    local check_interval=\"${3:-30}\"     # 30 seconds default\n\n    log \"INFO\" \"Waiting for deployment $deployment_id to complete (timeout: ${timeout_seconds}s)\"\n\n    local elapsed=0\n    local status\n\n    while [[ $elapsed -lt $timeout_seconds ]]; do\n        if status=$(safe_vra_command \"Check deployment status\" \\\n            vmware-vra deployment show \"$deployment_id\" --format json | jq -r '.status'); then\n\n            case \"$status\" in\n                \"CREATE_SUCCESSFUL\"|\"UPDATE_SUCCESSFUL\")\n                    log \"INFO\" \"Deployment completed successfully: $status\"\n                    return 0\n                    ;;\n                \"CREATE_FAILED\"|\"UPDATE_FAILED\"|\"FAILED\")\n                    log \"ERROR\" \"Deployment failed: $status\"\n                    # Get failure details\n                    safe_vra_command \"Get deployment details\" \\\n                        vmware-vra deployment show \"$deployment_id\" | head -20\n                    return 1\n                    ;;\n                \"CREATE_INPROGRESS\"|\"UPDATE_INPROGRESS\"|\"INPROGRESS\")\n                    verbose_log \"Deployment in progress: $status (${elapsed}s elapsed)\"\n                    ;;\n                *)\n                    verbose_log \"Unknown deployment status: $status\"\n                    ;;\n            esac\n        else\n            log \"WARN\" \"Failed to check deployment status, retrying...\"\n        fi\n\n        sleep \"$check_interval\"\n        elapsed=$((elapsed + check_interval))\n    done\n\n    log \"ERROR\" \"Deployment timed out after ${timeout_seconds}s\"\n    return 1\n}\n\n# Main function\nmain() {\n    log \"INFO\" \"Starting $SCRIPT_NAME\"\n    log \"INFO\" \"Log file: $LOG_FILE\"\n\n    if [[ \"$DRY_RUN\" == \"true\" ]]; then\n        log \"INFO\" \"DRY RUN MODE - No actual changes will be made\"\n    fi\n\n    # Check prerequisites\n    check_prerequisites\n\n    # Your main logic here\n    log \"INFO\" \"Main script logic would go here\"\n\n    # Example: Create a deployment\n    local deployment_id\n    if deployment_id=$(safe_vra_command \"Request catalog item\" \\\n        vmware-vra catalog request \"$CATALOG_ITEM_ID\" \\\n        --project \"$PROJECT_ID\" \\\n        --name \"example-deployment-$(date +%s)\" \\\n        --inputs '{\"cpu\": 2, \"memory\": \"4GB\"}' \\\n        --format json | jq -r '.deploymentId'); then\n\n        log \"INFO\" \"Deployment created: $deployment_id\"\n\n        # Wait for completion\n        if wait_for_deployment \"$deployment_id\"; then\n            log \"INFO\" \"Script completed successfully\"\n        else\n            error_exit \"Deployment failed to complete\"\n        fi\n    else\n        error_exit \"Failed to create deployment\"\n    fi\n}\n\n# Cleanup function\ncleanup() {\n    log \"INFO\" \"Performing cleanup...\"\n    # Add cleanup logic here\n}\n\n# Set up signal handlers\ntrap cleanup EXIT\ntrap 'error_exit \"Script interrupted by user\" 130' INT TERM\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --verbose|-v)\n            VERBOSE=true\n            shift\n            ;;\n        --dry-run|-n)\n            DRY_RUN=true\n            shift\n            ;;\n        --help|-h)\n            cat &lt;&lt; EOF\nUsage: $SCRIPT_NAME [OPTIONS]\n\nOptions:\n  --verbose, -v     Enable verbose logging\n  --dry-run, -n     Show what would be done without making changes\n  --help, -h        Show this help message\n\nEnvironment Variables:\n  PROJECT_ID        Required: vRA project ID\n  CATALOG_ITEM_ID   Required: Catalog item to deploy\n  VERBOSE           Set to 'true' to enable verbose logging\n  DRY_RUN           Set to 'true' to enable dry run mode\n\nExample:\n  PROJECT_ID=dev-123 CATALOG_ITEM_ID=blueprint-vm $SCRIPT_NAME --verbose\nEOF\n            exit 0\n            ;;\n        *)\n            error_exit \"Unknown option: $1\"\n            ;;\n    esac\ndone\n\n# Validate required variables\nif [[ -z \"${PROJECT_ID:-}\" ]]; then\n    error_exit \"PROJECT_ID environment variable is required\"\nfi\n\nif [[ -z \"${CATALOG_ITEM_ID:-}\" ]]; then\n    error_exit \"CATALOG_ITEM_ID environment variable is required\"\nfi\n\n# Run main function\nmain \"$@\"\n\nlog \"INFO\" \"$SCRIPT_NAME completed successfully\"\n</code></pre> <p>These examples demonstrate practical, real-world usage patterns for the VMware vRA CLI tool, showing how to build robust automation solutions for common infrastructure management tasks.</p>"},{"location":"user-guide/service-catalog/","title":"Service Catalog","text":"<p>The VMware vRA CLI provides powerful interactions with the Service Catalog, enabling management of catalog items and their deployments. This guide discusses all available operations and configurations.</p>"},{"location":"user-guide/service-catalog/#catalog-commands","title":"Catalog Commands","text":""},{"location":"user-guide/service-catalog/#list-catalog-items","title":"List Catalog Items","text":"<p>List all available catalog items:</p> <pre><code>vra catalog list\n</code></pre> <p>You can filter by project:</p> <pre><code>vra catalog list --project development\n</code></pre>"},{"location":"user-guide/service-catalog/#show-catalog-item-details","title":"Show Catalog Item Details","text":"<p>Show details of a specific catalog item:</p> <pre><code>vra catalog show \u001b5C&lt;catalog-item-id\u001b5C&gt;\n</code></pre>"},{"location":"user-guide/service-catalog/#request-a-catalog-item","title":"Request a Catalog Item","text":"<p>Request a new catalog item with inputs:</p> <pre><code>vra catalog request  \u001b5C&lt;catalog-item-id\u001b5C&gt; \\\n    --inputs '{\"cpu\": 2, \"memory\": \"4G\"}' \\\n    --project \u001b5C&lt;project-id\u001b5C&gt;\n</code></pre> <p>Use a YAML/JSON file for complex parameters:</p> <pre><code>vra catalog request  \u001b5C&lt;catalog-item-id\u001b5C&gt; \\\n    --inputs-file inputs.yaml \\\n    --project \u001b5C&lt;project-id\u001b5C&gt;\n</code></pre>"},{"location":"user-guide/service-catalog/#advanced-catalog-operations","title":"Advanced Catalog Operations","text":""},{"location":"user-guide/service-catalog/#catalog-item-schema","title":"Catalog Item Schema","text":"<p>Show the request schema for a catalog item:</p> <pre><code>vra catalog schema \u001b5C&lt;catalog-item-id\u001b5C&gt;\n</code></pre>"},{"location":"user-guide/service-catalog/#deployment-management","title":"Deployment Management","text":"<p>List all deployments:</p> <pre><code>vra deployment list\n</code></pre> <p>Show details of a specific deployment:</p> <pre><code>vra deployment show \u001b5C&lt;deployment-id\u001b5C&gt;\n</code></pre> <p>Delete a deployment:</p> <pre><code>vra deployment delete \u001b5C&lt;deployment-id\u001b5C&gt; --confirm\n</code></pre> <p>View deployment resources:</p> <pre><code>vra deployment resources &lt;deployment-id&gt;\n</code></pre>"},{"location":"user-guide/service-catalog/#export-all-deployments","title":"Export All Deployments","text":"<p>NEW in v0.9.0: Export all deployments grouped by catalog item:</p> <pre><code>vra deployment export-all\n</code></pre> <p>This powerful command exports all your deployments organized by catalog item to separate JSON files, making it perfect for: - Backup and recovery operations - Migration planning between environments - Audit and compliance reporting - Usage analytics and optimization</p> <p>For comprehensive documentation, see the Deployment Export Guide.</p> <p>Quick Examples:</p> <pre><code># Basic export to ./exports directory\nvra deployment export-all\n\n# Export with detailed resource information\nvra deployment export-all --include-resources\n\n# Export specific project to custom directory\nvra deployment export-all --project dev-project-123 --output-dir /backup/vra\n\n# Export excluding unsynced deployments\nvra deployment export-all --no-unsynced\n</code></pre>"},{"location":"user-guide/service-catalog/#configuration-and-best-practices","title":"Configuration and Best Practices","text":""},{"location":"user-guide/service-catalog/#inputs-configuration","title":"Inputs Configuration","text":"<p>Define input parameters for catalog requests in a YAML or JSON file for complex setups.</p>"},{"location":"user-guide/service-catalog/#example-inputsyaml","title":"Example inputs.yaml","text":"<pre><code>cpu: 2\nmemory: \"4G\"\ndisk: \"100GB\"\nnetwork: \"corporate\"\nadditionalDisks:\n  - size: \"500GB\"\n</code></pre>"},{"location":"user-guide/service-catalog/#profiles-and-environments","title":"Profiles and Environments","text":"<p>Switch between different profiles for dev and prod environments to manage access separately.</p> <pre><code># List profiles\nvra profile list\n\n# Use production profile\nvra profile use production\n</code></pre>"},{"location":"user-guide/service-catalog/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use secure authentication with bearer tokens directly from the CLI.</li> <li>Do not store sensitive inputs like passwords in files.</li> <li>Validate SSL/TLS for all direct API communications.</li> </ul> <p>Always ensure your security policies comply with organization requirements and follow VMware recommendations for vRA installations.</p>"},{"location":"user-guide/tag-management/","title":"Tag Management","text":"<p>The VMware vRA CLI provides comprehensive tag management functionality, enabling you to organize, categorize, and track resources in your vRA environment. Tags are key-value pairs that can be assigned to various resources such as deployments and catalog items.</p>"},{"location":"user-guide/tag-management/#overview","title":"Overview","text":"<p>Tags in vRA serve multiple purposes:</p> <ul> <li>Resource Organization: Group related resources together</li> <li>Cost Tracking: Track resource usage by department, project, or owner</li> <li>Automation: Enable automated policies and workflows based on tags</li> <li>Compliance: Ensure resources meet organizational standards</li> <li>Lifecycle Management: Track resource lifecycle stages</li> </ul>"},{"location":"user-guide/tag-management/#tag-commands","title":"Tag Commands","text":""},{"location":"user-guide/tag-management/#list-tags","title":"List Tags","text":"<p>List all available tags in your vRA environment:</p> <pre><code>vra tag list\n</code></pre> <p>Search for specific tags:</p> <pre><code>vra tag list --search \"environment\"\n</code></pre>"},{"location":"user-guide/tag-management/#show-tag-details","title":"Show Tag Details","text":"<p>Show detailed information about a specific tag:</p> <pre><code>vra tag show &lt;tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#create-tags","title":"Create Tags","text":"<p>Create a simple tag with just a key:</p> <pre><code>vra tag create \"environment\"\n</code></pre> <p>Create a tag with key and value:</p> <pre><code>vra tag create \"environment\" --value \"production\"\n</code></pre> <p>Create a tag with description:</p> <pre><code>vra tag create \"environment\" --value \"production\" --description \"Production environment tag\"\n</code></pre>"},{"location":"user-guide/tag-management/#update-tags","title":"Update Tags","text":"<p>Update an existing tag:</p> <pre><code>vra tag update &lt;tag-id&gt; --key \"env\" --value \"prod\" --description \"Updated production tag\"\n</code></pre>"},{"location":"user-guide/tag-management/#delete-tags","title":"Delete Tags","text":"<p>Delete a tag (with confirmation):</p> <pre><code>vra tag delete &lt;tag-id&gt;\n</code></pre> <p>Skip confirmation prompt:</p> <pre><code>vra tag delete &lt;tag-id&gt; --confirm\n</code></pre>"},{"location":"user-guide/tag-management/#resource-tagging","title":"Resource Tagging","text":""},{"location":"user-guide/tag-management/#assign-tags-to-resources","title":"Assign Tags to Resources","text":"<p>Assign a tag to a deployment:</p> <pre><code>vra tag assign &lt;deployment-id&gt; &lt;tag-id&gt;\n</code></pre> <p>Assign a tag to a catalog item:</p> <pre><code>vra tag assign &lt;catalog-item-id&gt; &lt;tag-id&gt; --resource-type catalog-item\n</code></pre>"},{"location":"user-guide/tag-management/#remove-tags-from-resources","title":"Remove Tags from Resources","text":"<p>Remove a tag from a deployment:</p> <pre><code>vra tag remove &lt;deployment-id&gt; &lt;tag-id&gt;\n</code></pre> <p>Remove a tag from a catalog item:</p> <pre><code>vra tag remove &lt;catalog-item-id&gt; &lt;tag-id&gt; --resource-type catalog-item\n</code></pre>"},{"location":"user-guide/tag-management/#view-resource-tags","title":"View Resource Tags","text":"<p>Show all tags assigned to a deployment:</p> <pre><code>vra tag resource-tags &lt;deployment-id&gt;\n</code></pre> <p>Show tags for a catalog item:</p> <pre><code>vra tag resource-tags &lt;catalog-item-id&gt; --resource-type catalog-item\n</code></pre>"},{"location":"user-guide/tag-management/#tag-schema","title":"Tag Schema","text":""},{"location":"user-guide/tag-management/#tag-object-structure","title":"Tag Object Structure","text":"<pre><code>{\n  \"id\": \"string\",\n  \"key\": \"string\",\n  \"value\": \"string|null\",\n  \"description\": \"string|null\",\n  \"created_at\": \"string|null\",\n  \"updated_at\": \"string|null\",\n  \"created_by\": \"string|null\",\n  \"updated_by\": \"string|null\"\n}\n</code></pre>"},{"location":"user-guide/tag-management/#tag-properties","title":"Tag Properties","text":"Property Type Required Description <code>id</code> string Yes Unique identifier for the tag <code>key</code> string Yes Tag key/name (e.g., \"environment\") <code>value</code> string No Tag value (e.g., \"production\") <code>description</code> string No Human-readable description <code>created_at</code> string No ISO 8601 timestamp of creation <code>updated_at</code> string No ISO 8601 timestamp of last update <code>created_by</code> string No Username who created the tag <code>updated_by</code> string No Username who last updated the tag"},{"location":"user-guide/tag-management/#use-cases","title":"Use Cases","text":""},{"location":"user-guide/tag-management/#1-environment-management","title":"1. Environment Management","text":"<p>Track different environments across your infrastructure:</p> <pre><code># Create environment tags\nvra tag create \"environment\" --value \"development\" --description \"Development environment\"\nvra tag create \"environment\" --value \"staging\" --description \"Staging environment\"\nvra tag create \"environment\" --value \"production\" --description \"Production environment\"\n\n# Assign to deployments\nvra tag assign &lt;dev-deployment-id&gt; &lt;dev-tag-id&gt;\nvra tag assign &lt;prod-deployment-id&gt; &lt;prod-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#2-cost-center-tracking","title":"2. Cost Center Tracking","text":"<p>Track resource usage by department or cost center:</p> <pre><code># Create cost center tags\nvra tag create \"cost-center\" --value \"engineering\" --description \"Engineering department\"\nvra tag create \"cost-center\" --value \"marketing\" --description \"Marketing department\"\nvra tag create \"cost-center\" --value \"finance\" --description \"Finance department\"\n\n# Assign to resources\nvra tag assign &lt;engineering-vm&gt; &lt;engineering-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#3-project-organization","title":"3. Project Organization","text":"<p>Organize resources by project:</p> <pre><code># Create project tags\nvra tag create \"project\" --value \"webapp-v2\" --description \"Web Application Version 2\"\nvra tag create \"project\" --value \"mobile-app\" --description \"Mobile Application Project\"\n\n# Assign to catalog items and deployments\nvra tag assign &lt;webapp-catalog-item&gt; &lt;webapp-tag-id&gt; --resource-type catalog-item\nvra tag assign &lt;webapp-deployment&gt; &lt;webapp-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#4-lifecycle-management","title":"4. Lifecycle Management","text":"<p>Track resource lifecycle stages:</p> <pre><code># Create lifecycle tags\nvra tag create \"lifecycle\" --value \"active\" --description \"Active resources\"\nvra tag create \"lifecycle\" --value \"deprecated\" --description \"Deprecated resources\"\nvra tag create \"lifecycle\" --value \"decommissioned\" --description \"Resources to be removed\"\n\n# Update resource lifecycle\nvra tag assign &lt;old-deployment&gt; &lt;deprecated-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#5-compliance-and-governance","title":"5. Compliance and Governance","text":"<p>Ensure resources meet compliance requirements:</p> <pre><code># Create compliance tags\nvra tag create \"compliance\" --value \"gdpr-compliant\" --description \"GDPR compliant resources\"\nvra tag create \"compliance\" --value \"hipaa-required\" --description \"HIPAA compliance required\"\nvra tag create \"backup\" --value \"daily\" --description \"Daily backup schedule\"\n\n# Assign to sensitive resources\nvra tag assign &lt;sensitive-deployment&gt; &lt;gdpr-tag-id&gt;\nvra tag assign &lt;medical-app-deployment&gt; &lt;hipaa-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#6-owner-and-contact-information","title":"6. Owner and Contact Information","text":"<p>Track resource ownership:</p> <pre><code># Create owner tags\nvra tag create \"owner\" --value \"john.doe@company.com\" --description \"Resource owner\"\nvra tag create \"team\" --value \"devops\" --description \"Responsible team\"\nvra tag create \"contact\" --value \"support@company.com\" --description \"Support contact\"\n\n# Assign ownership\nvra tag assign &lt;deployment-id&gt; &lt;owner-tag-id&gt;\nvra tag assign &lt;deployment-id&gt; &lt;team-tag-id&gt;\n</code></pre>"},{"location":"user-guide/tag-management/#advanced-tagging-strategies","title":"Advanced Tagging Strategies","text":""},{"location":"user-guide/tag-management/#hierarchical-tagging","title":"Hierarchical Tagging","text":"<p>Use hierarchical tag structures for complex organizations:</p> <pre><code># Create hierarchical tags\nvra tag create \"app.tier\" --value \"frontend\" --description \"Frontend application tier\"\nvra tag create \"app.tier\" --value \"backend\" --description \"Backend application tier\"\nvra tag create \"app.tier\" --value \"database\" --description \"Database tier\"\n\n# Region-specific tags\nvra tag create \"region.primary\" --value \"us-east-1\" --description \"Primary region\"\nvra tag create \"region.backup\" --value \"us-west-2\" --description \"Backup region\"\n</code></pre>"},{"location":"user-guide/tag-management/#batch-operations","title":"Batch Operations","text":"<p>Use shell scripting for batch tag operations:</p> <pre><code>#!/bin/bash\n# Batch tag creation for multiple environments\n\nenvironments=(\"dev\" \"test\" \"stage\" \"prod\")\ncost_centers=(\"eng\" \"ops\" \"qa\" \"security\")\n\n# Create environment tags\nfor env in \"${environments[@]}\"; do\n    vra tag create \"environment\" --value \"$env\" --description \"$env environment\"\ndone\n\n# Create cost center tags\nfor cc in \"${cost_centers[@]}\"; do\n    vra tag create \"cost-center\" --value \"$cc\" --description \"$cc department\"\ndone\n</code></pre>"},{"location":"user-guide/tag-management/#tag-validation","title":"Tag Validation","text":"<p>Implement tag validation workflows:</p> <pre><code>#!/bin/bash\n# Validate that critical deployments have required tags\n\ndeployment_id=\"$1\"\nrequired_tags=(\"environment\" \"owner\" \"cost-center\")\n\n# Get current tags\ncurrent_tags=$(vra tag resource-tags \"$deployment_id\" --format json)\n\n# Check for required tags\nfor tag in \"${required_tags[@]}\"; do\n    if ! echo \"$current_tags\" | grep -q \"$tag\"; then\n        echo \"Warning: Deployment $deployment_id missing required tag: $tag\"\n    fi\ndone\n</code></pre>"},{"location":"user-guide/tag-management/#output-formats","title":"Output Formats","text":"<p>All tag commands support multiple output formats:</p>"},{"location":"user-guide/tag-management/#table-format-default","title":"Table Format (Default)","text":"<pre><code>vra tag list\n</code></pre>"},{"location":"user-guide/tag-management/#json-format","title":"JSON Format","text":"<pre><code>vra tag list --format json\n</code></pre>"},{"location":"user-guide/tag-management/#yaml-format","title":"YAML Format","text":"<pre><code>vra tag list --format yaml\n</code></pre>"},{"location":"user-guide/tag-management/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/tag-management/#1-tag-naming-conventions","title":"1. Tag Naming Conventions","text":"<ul> <li>Use consistent naming conventions across your organization</li> <li>Use lowercase with hyphens: <code>cost-center</code>, <code>project-name</code></li> <li>Avoid special characters that might cause issues in automation</li> </ul>"},{"location":"user-guide/tag-management/#2-tag-strategy-planning","title":"2. Tag Strategy Planning","text":"<ul> <li>Define your tagging strategy before implementation</li> <li>Document tag purposes and allowed values</li> <li>Implement governance policies for tag usage</li> </ul>"},{"location":"user-guide/tag-management/#3-regular-maintenance","title":"3. Regular Maintenance","text":"<pre><code># Regular cleanup of unused tags\nvra tag list --format json | jq -r '.[] | select(.created_at &lt; \"2024-01-01\") | .id'\n\n# Audit tag usage\nvra deployment list --format json | jq -r '.[].id' | while read deployment; do\n    echo \"Deployment: $deployment\"\n    vra tag resource-tags \"$deployment\" --format json | jq -r '.[].key'\n    echo \"---\"\ndone\n</code></pre>"},{"location":"user-guide/tag-management/#4-integration-with-automation","title":"4. Integration with Automation","text":"<p>Tags can be used in automation workflows and policies:</p> <ul> <li>Cost Management: Filter resources by cost-center tags for billing</li> <li>Backup Policies: Apply backup schedules based on backup tags  </li> <li>Security Policies: Apply security controls based on compliance tags</li> <li>Lifecycle Management: Automate resource cleanup based on lifecycle tags</li> </ul>"},{"location":"user-guide/tag-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/tag-management/#common-issues","title":"Common Issues","text":"<ol> <li>Tag Not Found: Ensure the tag ID exists and you have permissions</li> <li>Resource Type Not Supported: Check that the resource type supports tagging</li> <li>Permission Denied: Verify you have the necessary permissions to manage tags</li> </ol>"},{"location":"user-guide/tag-management/#debug-commands","title":"Debug Commands","text":"<pre><code># Check tag existence\nvra tag show &lt;tag-id&gt; --format json\n\n# Verify resource exists\nvra deployment show &lt;deployment-id&gt; --format json\n\n# List all tags to find correct ID\nvra tag list --format json | jq -r '.[] | \"\\(.id): \\(.key)=\\(.value)\"'\n</code></pre>"},{"location":"user-guide/tag-management/#api-endpoints","title":"API Endpoints","text":"<p>The CLI uses these vRA API endpoints for tag management:</p> <ul> <li><code>GET /vco/api/tags</code> - List tags</li> <li><code>POST /vco/api/tags</code> - Create tag</li> <li><code>GET /vco/api/tags/{id}</code> - Get tag details</li> <li><code>PUT /vco/api/tags/{id}</code> - Update tag</li> <li><code>DELETE /vco/api/tags/{id}</code> - Delete tag</li> <li><code>POST /deployment/api/deployments/{id}/tags</code> - Assign tag to deployment</li> <li><code>DELETE /deployment/api/deployments/{id}/tags/{tagId}</code> - Remove tag from deployment</li> </ul> <p>Tag management is essential for maintaining organized, compliant, and efficiently managed vRA environments.</p>"},{"location":"user-guide/troubleshooting/","title":"VMware vRA CLI Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues when using the VMware vRA CLI tool.</p>"},{"location":"user-guide/troubleshooting/#general-troubleshooting-steps","title":"General Troubleshooting Steps","text":""},{"location":"user-guide/troubleshooting/#enable-verbose-mode","title":"Enable Verbose Mode","text":"<p>Always start troubleshooting with verbose mode to see detailed HTTP request/response information:</p> <pre><code>vmware-vra --verbose [command]\n</code></pre> <p>Example: <pre><code>vmware-vra --verbose auth login\nvmware-vra --verbose catalog list\nvmware-vra --verbose deployment export-all\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#check-cli-version-and-environment","title":"Check CLI Version and Environment","text":"<pre><code># Check CLI version\nvmware-vra --version\n\n# Check current configuration\nvmware-vra config show\n\n# Check authentication status\nvmware-vra auth status\n</code></pre>"},{"location":"user-guide/troubleshooting/#verify-network-connectivity","title":"Verify Network Connectivity","text":"<pre><code># Test basic connectivity to vRA server\ncurl -k https://your-vra-server.com/health\n\n# Test with authentication (replace with your actual token)\ncurl -k -H \"Authorization: Bearer your-token\" https://your-vra-server.com/catalog/api/items\n</code></pre>"},{"location":"user-guide/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"user-guide/troubleshooting/#issue-no-valid-authentication-token-found","title":"Issue: \"No valid authentication token found\"","text":"<p>Symptoms: <pre><code>\u274c No valid authentication token found. Please run 'vra auth login' first.\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Re-authenticate: <pre><code>vmware-vra auth login --username your-username --url https://vra.example.com\n</code></pre></p> </li> <li> <p>Check stored tokens: <pre><code>vmware-vra auth status\n</code></pre></p> </li> <li> <p>Clear and re-authenticate: <pre><code>vmware-vra auth logout\nvmware-vra auth login\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-authentication-failed-401-unauthorized","title":"Issue: \"Authentication failed: 401 Unauthorized\"","text":"<p>Symptoms: <pre><code>\u274c Authentication failed: 401 Unauthorized\n</code></pre></p> <p>Possible Causes and Solutions:</p> <ol> <li>Invalid credentials:</li> <li>Verify username and password</li> <li> <p>Check if account is locked or disabled</p> </li> <li> <p>Wrong domain (for multiple identity sources): <pre><code>vmware-vra auth login --username admin --domain vsphere.local\n</code></pre></p> </li> <li> <p>Wrong tenant: <pre><code>vmware-vra auth login --tenant correct-tenant.local\n</code></pre></p> </li> <li> <p>Wrong vRA URL: <pre><code>vmware-vra auth login --url https://correct-vra.example.com\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-ssl-certificate-verification-failed","title":"Issue: \"SSL Certificate Verification Failed\"","text":"<p>Symptoms: <pre><code>SSL: CERTIFICATE_VERIFY_FAILED\nrequests.exceptions.SSLError: HTTPSConnectionPool\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Disable SSL verification (NOT recommended for production): <pre><code>vmware-vra config set verify_ssl false\n</code></pre></p> </li> <li> <p>Add certificate to system trust store (recommended):</p> </li> <li>Download the vRA certificate</li> <li>Add to your system's certificate store</li> <li> <p>Restart CLI</p> </li> <li> <p>Use proper certificate setup:</p> </li> <li>Ensure vRA has valid SSL certificate</li> <li>Verify certificate chain is complete</li> </ol>"},{"location":"user-guide/troubleshooting/#issue-token-expired-errors-during-operations","title":"Issue: \"Token expired\" errors during operations","text":"<p>Symptoms: <pre><code>403 Forbidden - Token expired\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Refresh token manually: <pre><code>vmware-vra auth refresh\n</code></pre></p> </li> <li> <p>Re-authenticate if refresh fails: <pre><code>vmware-vra auth login\n</code></pre></p> </li> <li> <p>Check token expiration: <pre><code>vmware-vra auth status\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#permission-and-authorization-issues","title":"Permission and Authorization Issues","text":""},{"location":"user-guide/troubleshooting/#issue-403-forbidden-on-specific-operations","title":"Issue: \"403 Forbidden\" on specific operations","text":"<p>Symptoms: <pre><code>Failed to list deployments: 403 Forbidden\nFailed to request catalog item: 403 Forbidden\n</code></pre></p> <p>Required Roles by Operation:</p> Operation Minimum Required Role List catalog items Service Catalog User Request catalog items Service Catalog User + Project access List all deployments Service Catalog User List project deployments Project Member Delete deployments Project Administrator Export all deployments Service Catalog User (system-wide) or Project Administrator (project-specific) Tag management Depends on resource - see below <p>Tag Management Permissions: - List tags: Service Catalog User - Create/Delete tags: Organization Administrator - Assign/Remove tags: Resource owner or Project Administrator</p> <p>Solutions:</p> <ol> <li>Check your roles in vRA:</li> <li>Log into vRA web interface</li> <li>Check assigned roles in user profile</li> <li> <p>Contact administrator for role assignment</p> </li> <li> <p>Use project-specific operations: <pre><code># Instead of system-wide list\nvmware-vra deployment list --project your-project-id\n\n# Instead of full export\nvmware-vra deployment export-all --project your-project-id\n</code></pre></p> </li> <li> <p>Request appropriate permissions:</p> </li> <li>Contact your vRA administrator</li> <li>Request minimum required roles for your use case</li> </ol>"},{"location":"user-guide/troubleshooting/#network-and-connectivity-issues","title":"Network and Connectivity Issues","text":""},{"location":"user-guide/troubleshooting/#issue-connection-timeouts","title":"Issue: Connection timeouts","text":"<p>Symptoms: <pre><code>requests.exceptions.ConnectTimeout\nConnection timed out after 30 seconds\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Increase timeout: <pre><code>vmware-vra config set timeout 120\n</code></pre></p> </li> <li> <p>Check network connectivity: <pre><code>ping your-vra-server.com\ntelnet your-vra-server.com 443\n</code></pre></p> </li> <li> <p>Check proxy settings: <pre><code># Set proxy if required\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-dns-resolution-failures","title":"Issue: DNS resolution failures","text":"<p>Symptoms: <pre><code>requests.exceptions.ConnectionError: [Errno -2] Name or service not known\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Verify DNS resolution: <pre><code>nslookup your-vra-server.com\n</code></pre></p> </li> <li> <p>Use IP address instead: <pre><code>vmware-vra config set api_url https://192.168.1.100\n</code></pre></p> </li> <li> <p>Check /etc/hosts file: <pre><code># Add entry if needed\necho \"192.168.1.100 vra.company.com\" &gt;&gt; /etc/hosts\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#export-specific-issues","title":"Export-Specific Issues","text":""},{"location":"user-guide/troubleshooting/#issue-export-command-hangs-or-times-out","title":"Issue: Export command hangs or times out","text":"<p>Symptoms: <pre><code># Command appears to hang indefinitely\nvmware-vra deployment export-all\n# No output for extended period\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Use project filtering to reduce scope: <pre><code>vmware-vra deployment export-all --project specific-project-id\n</code></pre></p> </li> <li> <p>Disable resource details (faster): <pre><code>vmware-vra deployment export-all --no-unsynced\n</code></pre></p> </li> <li> <p>Increase timeout: <pre><code>vmware-vra config set timeout 300\n</code></pre></p> </li> <li> <p>Check system resources: <pre><code># Check available memory and disk space\ndf -h\nfree -h\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-no-space-left-on-device-during-export","title":"Issue: \"No space left on device\" during export","text":"<p>Symptoms: <pre><code>IOError: [Errno 28] No space left on device\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check available space: <pre><code>df -h\n</code></pre></p> </li> <li> <p>Use external storage: <pre><code>vmware-vra deployment export-all --output-dir /mnt/external-storage/exports\n</code></pre></p> </li> <li> <p>Clean up existing exports: <pre><code># Compress old exports\nfind ./exports -name \"*.json\" -mtime +7 -exec gzip {} \\;\n\n# Remove very old exports\nfind ./exports -name \"*.gz\" -mtime +30 -delete\n</code></pre></p> </li> <li> <p>Export in smaller chunks: <pre><code># Export each project separately\nfor project in project1 project2 project3; do\n  vmware-vra deployment export-all --project \"$project\" --output-dir \"./exports/$project\"\ndone\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-export-creates-empty-or-incomplete-files","title":"Issue: Export creates empty or incomplete files","text":"<p>Symptoms: - Export completes but files are empty - Missing expected deployments in export</p> <p>Solutions:</p> <ol> <li> <p>Verify permissions: <pre><code># Check if you have permission to see all deployments\nvmware-vra deployment list --first-page-only\n</code></pre></p> </li> <li> <p>Check export summary: <pre><code># Look at the export summary for clues\ncat ./exports/export_summary.json | jq '.statistics'\n</code></pre></p> </li> <li> <p>Enable verbose mode: <pre><code>vmware-vra --verbose deployment export-all --output-dir ./debug-export\n</code></pre></p> </li> <li> <p>Validate export files: <pre><code># Check if JSON files are valid\nfor file in ./exports/*.json; do\n  echo \"Validating: $file\"\n  python -m json.tool \"$file\" &gt; /dev/null &amp;&amp; echo \"\u2713 Valid\" || echo \"\u2717 Invalid\"\ndone\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"user-guide/troubleshooting/#issue-config-file-not-found-or-configuration-not-persisting","title":"Issue: \"Config file not found\" or configuration not persisting","text":"<p>Symptoms: <pre><code>Configuration changes don't persist between sessions\nConfig file errors\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check config file location: <pre><code>vmware-vra config show\n# Look for config file path at bottom\n</code></pre></p> </li> <li> <p>Create config directory manually: <pre><code>mkdir -p ~/.config/vmware-vra-cli\n</code></pre></p> </li> <li> <p>Set configuration manually: <pre><code>vmware-vra config set api_url https://vra.example.com\nvmware-vra config set tenant company.local\n</code></pre></p> </li> <li> <p>Check file permissions: <pre><code>ls -la ~/.config/vmware-vra-cli/config.json\n# Should be readable/writable by user\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#issue-environment-variables-not-being-recognized","title":"Issue: Environment variables not being recognized","text":"<p>Symptoms: - Environment variables don't override config - Settings revert to defaults</p> <p>Solutions:</p> <ol> <li> <p>Verify environment variable names: <pre><code># Correct variable names:\nexport VRA_URL=\"https://vra.example.com\"\nexport VRA_TENANT=\"company.local\"\nexport VRA_DOMAIN=\"vsphere.local\"\nexport VRA_VERIFY_SSL=\"true\"\nexport VRA_TIMEOUT=\"60\"\n</code></pre></p> </li> <li> <p>Check variable values: <pre><code>env | grep VRA_\n</code></pre></p> </li> <li> <p>Test with explicit values: <pre><code>VRA_URL=\"https://test.example.com\" vmware-vra config show\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#data-and-json-issues","title":"Data and JSON Issues","text":""},{"location":"user-guide/troubleshooting/#issue-json-decode-error-when-parsing-responses","title":"Issue: \"JSON decode error\" when parsing responses","text":"<p>Symptoms: <pre><code>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check vRA server status: <pre><code>curl -k https://vra.example.com/health\n</code></pre></p> </li> <li> <p>Verify API endpoints: <pre><code># Test with curl\ncurl -k -H \"Authorization: Bearer your-token\" \\\n  \"https://vra.example.com/catalog/api/items\" | jq .\n</code></pre></p> </li> <li> <p>Check for HTML error pages: <pre><code># Enable verbose mode to see raw responses\nvmware-vra --verbose catalog list\n</code></pre></p> </li> <li> <p>Verify vRA version compatibility:</p> </li> <li>Check if your vRA version is supported</li> <li>Some API endpoints may differ between versions</li> </ol>"},{"location":"user-guide/troubleshooting/#issue-unicode-or-character-encoding-errors","title":"Issue: Unicode or character encoding errors","text":"<p>Symptoms: <pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check system locale: <pre><code>locale\n# Ensure UTF-8 locale is set\n</code></pre></p> </li> <li> <p>Set UTF-8 environment: <pre><code>export LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n</code></pre></p> </li> <li> <p>Check deployment/catalog item names:</p> </li> <li>Some special characters may cause issues</li> <li>Contact administrator to fix problematic names</li> </ol>"},{"location":"user-guide/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"user-guide/troubleshooting/#issue-slow-cli-operations","title":"Issue: Slow CLI operations","text":"<p>Symptoms: - Commands take much longer than expected - Large environments cause timeouts</p> <p>Solutions:</p> <ol> <li> <p>Use pagination options: <pre><code># Fetch only first page for quick results\nvmware-vra catalog list --first-page-only\nvmware-vra deployment list --first-page-only\n</code></pre></p> </li> <li> <p>Increase page sizes: <pre><code># Get more items per request\nvmware-vra catalog list --page-size 2000\n</code></pre></p> </li> <li> <p>Filter by project: <pre><code># Reduce scope of operations\nvmware-vra deployment list --project your-project-id\n</code></pre></p> </li> <li> <p>Avoid resource details when not needed: <pre><code># Faster export without resource details\nvmware-vra deployment export-all --no-unsynced\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"user-guide/troubleshooting/#windows-issues","title":"Windows Issues","text":"<p>Issue: SSL errors on Windows</p> <p>Solution: <pre><code># Update certificate store\ncertlm.msc\n# Import vRA certificate manually\n</code></pre></p> <p>Issue: Path issues with PowerShell</p> <p>Solution: <pre><code># Use forward slashes or escape backslashes\nvmware-vra deployment export-all --output-dir \"./exports\"\n# or\nvmware-vra deployment export-all --output-dir \"C:\\\\backup\\\\exports\"\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#macos-issues","title":"macOS Issues","text":"<p>Issue: SSL certificate verification on macOS</p> <p>Solution: <pre><code># Add certificate to keychain\nsecurity add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain certificate.crt\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#linux-issues","title":"Linux Issues","text":"<p>Issue: Missing dependencies</p> <p>Solution: <pre><code># Install required packages (Ubuntu/Debian)\nsudo apt-get update\nsudo apt-get install python3-pip curl jq\n\n# Install required packages (RHEL/CentOS)\nsudo yum install python3-pip curl jq\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#debugging-tools-and-techniques","title":"Debugging Tools and Techniques","text":""},{"location":"user-guide/troubleshooting/#http-traffic-analysis","title":"HTTP Traffic Analysis","text":"<p>Use tools to analyze HTTP traffic:</p> <pre><code># Using mitmproxy (requires setup)\nmitmdump -s script.py\n\n# Using tcpdump (requires root)\nsudo tcpdump -i any port 443\n\n# Using curl to test specific endpoints\ncurl -k -H \"Authorization: Bearer token\" \\\n  \"https://vra.example.com/catalog/api/items\" -v\n</code></pre>"},{"location":"user-guide/troubleshooting/#log-analysis","title":"Log Analysis","text":"<p>Enable comprehensive logging:</p> <pre><code># Create log directory\nmkdir -p ~/.cache/vmware-vra-cli/logs\n\n# Enable debug logging (if supported by CLI)\nexport VRA_DEBUG=true\nvmware-vra --verbose catalog list 2&gt;&amp;1 | tee debug.log\n</code></pre>"},{"location":"user-guide/troubleshooting/#json-response-analysis","title":"JSON Response Analysis","text":"<p>Analyze responses for debugging:</p> <pre><code># Pretty print JSON responses\nvmware-vra --format json catalog list | jq .\n\n# Filter specific fields\nvmware-vra --format json deployment list | jq '.[].status' | sort | uniq -c\n\n# Find problematic entries\nvmware-vra --format json catalog list | jq '.[] | select(.name | contains(\"special-chars\"))'\n</code></pre>"},{"location":"user-guide/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"user-guide/troubleshooting/#cli-help","title":"CLI Help","text":"<pre><code># Global help\nvmware-vra --help\n\n# Command-specific help\nvmware-vra deployment --help\nvmware-vra deployment export-all --help\n\n# Show all available commands\nvmware-vra --help | grep -A 100 \"Commands:\"\n</code></pre>"},{"location":"user-guide/troubleshooting/#collecting-diagnostic-information","title":"Collecting Diagnostic Information","text":"<p>When reporting issues, collect this information:</p> <pre><code>#!/bin/bash\n# diagnostic-info.sh\n\necho \"=== VMware vRA CLI Diagnostic Information ===\"\necho \"Date: $(date)\"\necho \"CLI Version: $(vmware-vra --version)\"\necho \"Platform: $(uname -a)\"\necho \"Python Version: $(python --version 2&gt;&amp;1)\"\n\necho -e \"\\n=== Configuration ===\"\nvmware-vra config show\n\necho -e \"\\n=== Authentication Status ===\"\nvmware-vra auth status\n\necho -e \"\\n=== Network Connectivity ===\"\nping -c 3 your-vra-server.com 2&gt;/dev/null || echo \"Ping failed\"\n\necho -e \"\\n=== Environment Variables ===\"\nenv | grep VRA_ || echo \"No VRA_ environment variables set\"\n\necho -e \"\\n=== Recent Errors (if log file exists) ===\"\nif [ -f debug.log ]; then\n    tail -20 debug.log\nelse\n    echo \"No debug.log file found\"\nfi\n</code></pre>"},{"location":"user-guide/troubleshooting/#common-error-patterns","title":"Common Error Patterns","text":"Error Pattern Likely Cause Quick Fix <code>SSL: CERTIFICATE_VERIFY_FAILED</code> SSL certificate issues Set <code>verify_ssl false</code> temporarily <code>401 Unauthorized</code> Authentication expired Run <code>vmware-vra auth refresh</code> <code>403 Forbidden</code> Insufficient permissions Check user roles in vRA <code>Connection timeout</code> Network issues Increase timeout or check connectivity <code>JSON decode error</code> Server returning HTML/error page Check vRA server status <code>No space left on device</code> Disk full Clean up or use different output directory <code>Command not found</code> CLI not installed properly Reinstall CLI"},{"location":"user-guide/troubleshooting/#prevention-tips","title":"Prevention Tips","text":""},{"location":"user-guide/troubleshooting/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code>#!/bin/bash\n# vra-cli-maintenance.sh\n\n# Test authentication\nvmware-vra auth status\n\n# Test basic connectivity\nvmware-vra catalog list --first-page-only &gt;/dev/null &amp;&amp; echo \"\u2713 API accessible\" || echo \"\u2717 API issues\"\n\n# Check disk space for exports\ndf -h . | grep -v \"Avail\" | awk '{if($5 &gt; 80) print \"\u26a0 Disk space low: \"$5\" used\"}'\n\n# Clean old exports\nfind ./exports -name \"*.json\" -mtime +7 -exec echo \"Old export file: {}\" \\;\n</code></pre>"},{"location":"user-guide/troubleshooting/#configuration-validation","title":"Configuration Validation","text":"<pre><code>#!/bin/bash\n# validate-config.sh\n\necho \"Validating vRA CLI configuration...\"\n\n# Check required config\nCONFIG_ITEMS=(\"api_url\" \"tenant\")\nfor item in \"${CONFIG_ITEMS[@]}\"; do\n    VALUE=$(vmware-vra config show --format json 2&gt;/dev/null | jq -r \".$item\")\n    if [ \"$VALUE\" = \"null\" ] || [ -z \"$VALUE\" ]; then\n        echo \"\u26a0 Missing required config: $item\"\n    else\n        echo \"\u2713 $item configured\"\n    fi\ndone\n\n# Test authentication\nif vmware-vra auth status | grep -q \"Authenticated\"; then\n    echo \"\u2713 Authentication valid\"\nelse\n    echo \"\u26a0 Authentication required\"\nfi\n\necho \"Configuration validation complete.\"\n</code></pre> <p>This comprehensive troubleshooting guide should help resolve most issues encountered when using the VMware vRA CLI tool.</p>"}]}